/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "Delay.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define DRDY_IS_LOW() (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3)==0)
#define CS_0()	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
#define CS_1()	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

TIM_HandleTypeDef htim4;

/* USER CODE BEGIN PV */
int i=0;
uint8_t id=0;
uint8_t TxData[8];
float data;
float tempdata;
int32_t read = 0;
uint8_t StartFlag = 0;
uint8_t RDATACsend_data[3] = {0xff,0xff,0xff};
uint8_t Databuffer[3] = {0x00,0x00,0x00};
uint8_t RDATACcmdbuffer[1] = {CMD_RDATAC};
uint8_t SDATACcmduffer[1] = {CMD_SDATAC};
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
static void MX_TIM4_Init(void);
/* USER CODE BEGIN PFP */
void waitDRDY(void);
void setBuffer(void);
uint8_t readByteFromReg(uint8_t registerID);
uint8_t receive8bit(void);
uint8_t readChipID(void);
void send8bit(uint8_t data);
void setPGA(uint8_t pga);
void writeByteToReg(uint8_t registerID, uint8_t value);
void setDataRate(uint8_t drate);
void scanSEChannels(uint8_t channels[], uint8_t numOfChannels, int32_t *values);
void scanDIFFChannelContinuous(uint8_t positiveCh, uint8_t negativeCh, uint32_t numOfMeasure, float *values);
int32_t getValSEChannel(uint8_t channel);
float getValDIFFChannel(uint8_t positiveCh, uint8_t negativeCh);
void setSEChannel(uint8_t channel);
void setDIFFChannel(uint8_t positiveCh, uint8_t NegativeCh);
void writeCMD(uint8_t command);
int32_t readData(void);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*
*********************************************************************************************************
*	name: scanDIFFChannelContinuous
*	Continuously acquire analog data from one differential analog input.
*   Allows sampling of one differential input channel up to 30,000 SPS.
*	parameter:
*	The return value: val
*********************************************************************************************************
*/
void scanDIFFChannelContinuous(uint8_t positiveCh, uint8_t negativeCh, uint32_t numOfMeasure, float *values)
{



	// Start reading data.

	for (int i = 0; i < numOfMeasure; ++i)
	{
		waitDRDY();

	}

	// Stop continuous mode.
	waitDRDY();
	//HAL_SPI_Transmit(&hspi1, stopbuffer ,1,50); // Stop read data continuous.
	delay_us(7);
	CS_1();
}
/*
*********************************************************************************************************
*	name: setDIFFChannel
*	function: Write to MUX register - set channel to read from in single-ended mode
*   Bit 7,6,5,4 determine the positive input channel (AINp).
*   Bit 3,2,1,0 determine the negative input channel (AINn). e.g. (0-1, 2,3 - 4,5 - 6,7)
*	parameter:
*	The return value: val
*********************************************************************************************************
*/
void setDIFFChannel(uint8_t positiveCh, uint8_t NegativeCh)
{
	writeByteToReg(REG_MUX, positiveCh <<4 | NegativeCh); //xxxx1000 - AINp = positiveCh, AINn = NegativeCh
}
/*
*********************************************************************************************************
*	name: getValDIFFChannel
*	Get one differential analog input value by issuing command to input multiplexer.
* 	It reads a value from previous conversion!
*	DRDY needs to be low!
*	parameter:
*	The return value: val
*********************************************************************************************************
*/
float getValDIFFChannel(uint8_t positiveCh, uint8_t negativeCh)
{
	float read = 0;
	setDIFFChannel(positiveCh, negativeCh);
	delay_us(3); // min delayus: t11 = 24 * 1 / 7,68 Mhz = 3,125 micro sec
	writeCMD(CMD_SYNC);
	delay_us(3);
	writeCMD(CMD_WAKEUP);
	delay_us(2); // min delayus: t11 = 4 * 1 / 7,68 Mhz = 0,52 micro sec
	read = readData();
	read = read / 1670000;
	data = read;
	return read;
}

/*
*********************************************************************************************************
*	name: scanDIFFChannels
*	Get one differential analog input value from input channels you set (min 1, max 4).
* 	It reads a value from previous conversion!
*	DRDY needs to be low!
*	parameter:
*	The return value: val
*********************************************************************************************************
*/
void scanDIFFChannels(uint8_t positiveChs[], uint8_t negativeChs[], uint8_t numOfChannels, uint32_t *values)
{
	for (int i = 0; i < numOfChannels; ++i){
		waitDRDY();
		values[i] = getValDIFFChannel(positiveChs[i], negativeChs[i]);
	}
}
/*
*********************************************************************************************************
*	name: readData
*	function: Read 24 bit value from SPI bus, when DRDY goes low to read signle conversion result
* 	Allows reading data from multiple different channels.
*	parameter: None
*	The return value: None
*********************************************************************************************************
*/
int32_t readData(void)
{
	int32_t read = 0;
	uint8_t send_data[3] = {0xff,0xff,0xff};
	uint8_t buffer[3] = {0x00,0x00,0x00};
    uint8_t cmdbuffer[1] = {CMD_RDATA};
	CS_0();
	HAL_SPI_Transmit(&hspi1, cmdbuffer ,1,50);
	//send8bit(CMD_RDATA);
	delay_us(7);// min delay: t6 = 50 * 1/freq.clkin = 50 * 1 / 7,68 Mhz = 6.5 micro sec

	HAL_SPI_TransmitReceive(&hspi1,send_data,buffer,3,50);
	// DRDY goes high here

	// construct 24 bit value
	read =  ((int32_t)buffer[0] << 16) & 0x00FF0000;
	read |= ((int32_t)buffer[1] << 8);
	read |= buffer[2];
	if (read & 0x800000){
		read |= 0xFF000000;
	}

	CS_1();

	return (int32_t)read;
}
/*
*********************************************************************************************************
*	name: writeCMD
*	function: Send Standalone commands to register
*	parameter: command
*	The return value: None
*********************************************************************************************************
*/

void writeCMD(uint8_t command)
{
	uint8_t Txbuffer[1];
	Txbuffer[0] = command;
	CS_0();
	HAL_SPI_Transmit(&hspi1, Txbuffer ,1,50);
	CS_1();
}


/*
*********************************************************************************************************
*	name: setSEChannel
*	function: Write to MUX register - set channel to read from in single-ended mode
*   Bit 7,6,5,4 determine the positive input channel (AINp).
*   Bit 3,2,1,0 determine the negative input channel (AINn). True Ground
*	parameter:
*	The return value: val
*********************************************************************************************************
*/
void setSEChannel(uint8_t channel)
{
	writeByteToReg(REG_MUX, channel << 4 | 1 << 3); //xxxx1000 - AINp = channel, AINn = AINCOM
}
/*
*********************************************************************************************************
*	name: getValSEChannel
*	Get one single-ended analog input value by issuing command to input multiplexer.
*	It reads a value from previous conversion!
* 	DRDY needs to be low!
*	parameter:
*	The return value: val
*********************************************************************************************************
*/
int32_t getValSEChannel(uint8_t channel)
{
	float read = 0;
	setSEChannel(channel); // MUX command
	delay_us(10); // min delay: t11 = 24 * 1 / 7,68 Mhz = 3,125 micro sec
	writeCMD(CMD_SYNC);    // SYNC command
	delay_us(10);
	writeCMD(CMD_WAKEUP);  // WAKEUP command
	delay_us(5); // min delay: t11 = 4 * 1 / 7,68 Mhz = 0,52 micro sec
	read = readData();
	read = read / 1670000;
	data = read;
	return read;
}
/*
 *
*********************************************************************************************************
*	name: scanSEChannels
*	Get one single-ended analog input value from input channels you set (min 1, max 8).
* 	It reads a value from previous conversion!
*	DRDY needs to be low!
*	parameter:
*	The return value: val
*********************************************************************************************************
*/
void scanSEChannels(uint8_t channels[], uint8_t numOfChannels, int32_t *values)
{
	for (int i = 0; i < numOfChannels; ++i){
		waitDRDY();
		values[i] = getValSEChannel(channels[i]);
	}
}
/*
*********************************************************************************************************
*	name: setDataRate
*	function: sampling rate of collection
*	parameter: pga
*	The return value: None
*********************************************************************************************************
*/
void setDataRate(uint8_t drate)
{
	writeByteToReg(REG_DRATE,drate);
}

/**
*********************************************************************************************************
*	name: writeByteToReg
*	function: read 1 byte from register address registerID.
*	parameter: register ID
*	The return value:
*********************************************************************************************************
*/
void writeByteToReg(uint8_t registerID, uint8_t value)
{
	uint8_t Txbuffer[3];
	Txbuffer[0] = CMD_WREG | registerID;
	Txbuffer[1] = 0x00;
	Txbuffer[2] = value;
	CS_0();
	HAL_SPI_Transmit(&hspi1, Txbuffer ,3,100);
	/*
	send8bit(CMD_WREG | registerID);		//1syt byte: address of the first register to write
	send8bit(0x00);							//2nd byte: number of byte to write = 1.
	send8bit(value);						//3rd byte: value to write to register
	*/
	CS_1();

}
/*
*********************************************************************************************************
*	name: setPGA
*	function: Set gain of amplifier
*	parameter: pga
*	The return value: None
*********************************************************************************************************
*/
void setPGA(uint8_t pga)
{
	writeByteToReg(REG_ADCON,pga);
}
/*
*********************************************************************************************************
*	name: Send8bit
*	function: SPI send data to SPI slave
*	parameter: data
*	The return value: NULL
*********************************************************************************************************
*/
void send8bit(uint8_t data)
{
	HAL_SPI_Transmit(&hspi1, &data ,1,100);
}
/*
*********************************************************************************************************
*	name: waitDRDY
*	function: Wait for DRDY is Low
*	parameter: data
*	The return value: None
*********************************************************************************************************
*/
void waitDRDY(void)
{
	uint32_t i;
		for (i = 0; i < 40000000; i++){
			if (DRDY_IS_LOW()){
				break;
			}
		}
		/*
	while(!DRDY_IS_LOW())
	{
		continue;
	}
		 */
}
/*
*********************************************************************************************************
*	name: readChipID
*	function: Get data from Status register - chipID "check"
*	parameter:
*	The return value: val
*********************************************************************************************************
*/
uint8_t readChipID(void)
{
	waitDRDY();
	volatile uint8_t id = readByteFromReg(REG_STATUS);
	return (id >> 4);
}

/*
*********************************************************************************************************
*	name: receive8bit
*	function: receive data from SPI slave
*	parameter: data
*	The return value: NULL
*********************************************************************************************************
*/
uint8_t receive8bit(void)
{
	/*
	uint8_t TXbuffer[1];
	uint8_t RXbuffer[1];
	TXbuffer[0] = 0xff;

	HAL_SPI_Transmit(&hspi1, TXbuffer ,1,50);
	HAL_SPI_Receive(&hspi1, RXbuffer ,1,50);

	return RXbuffer[0];
	*/
	uint8_t send_data = 0xff;
	uint8_t read = 0;
	HAL_SPI_TransmitReceive(&hspi1,&send_data,&read,1,50);
	return read;



}
/*
*********************************************************************************************************
*	name: readByteFromReg
*	function: read 1 byte from register address registerID.
*	parameter: register ID
*	The return value:
*********************************************************************************************************
*/
uint8_t readByteFromReg(uint8_t registerID)
{
	uint8_t TXbuffer[2];
	TXbuffer[0] = CMD_RREG | registerID;
	TXbuffer[1] = 0x00;
	CS_0();
	HAL_SPI_Transmit(&hspi1, TXbuffer ,2,50);
	delay_us(10);
	uint8_t read = receive8bit();
	CS_1();

	return read;
}
/*
*********************************************************************************************************
*	name: setBuffer
*	function: Set the internal buffer (True-enable), (Fasle-disable)
*	parameter: bool val
*	The return value: val
*********************************************************************************************************
*/
void setBuffer(void)
{
	uint8_t val = 1;
	uint8_t Txbuffer[2];
	Txbuffer[0] = CMD_WREG | REG_STATUS;
	Txbuffer[1] = (0 <<3) | (1 << 2) | (val << 1);

	CS_0();
	HAL_SPI_Transmit(&hspi1, Txbuffer ,2,50);
	//send8bit(CMD_WREG | REG_STATUS);
	//send8bit((0 <<3) | (1 << 2) | (val << 1));
	CS_1();
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI1_Init();
  MX_TIM4_Init();
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start(&htim4);
  //HAL_TIM_Base_Start_IT(&htim4);
  //delay_ms(1000);
  delay_init(122);
  volatile uint32_t sysclock = SystemCoreClock;
  writeCMD(CMD_RESET);
  delay_ms(10);
  setBuffer();
  setPGA(PGA_GAIN1);
  setDataRate(DRATE_7500);
  id = readChipID();


  delay_ms(500);
  delay_ms(500);

	uint8_t  posChannels [4] = {AIN0, AIN2, AIN4, AIN6};
	uint8_t  negChannels [4] = {AIN1, AIN3, AIN5, AIN7};

	// Set differential analog input channel.
	setDIFFChannel(posChannels[0], negChannels[0]);
	delay_us(15);
	writeCMD(CMD_SYNC);    // SYNC command
	delay_us(10);
	writeCMD(CMD_WAKEUP);  // WAKEUP command
	delay_us(15); // min delay: t11 = 4 * 1 / 7,68 Mhz = 0,52 micro sec
	// Set continuous mode.
	waitDRDY();
	CS_0();
	HAL_SPI_Transmit(&hspi1, RDATACcmdbuffer ,1,50);
	delay_ms(10); // min delay: t6 = 50 * 1/7.68 MHz = 6.5 microseconds
	StartFlag = 1;
	delay_us(1);
  //Differential-Continuous
  int num_measure_DIFF_CONT = 15000; // 30x measurements because it works with much higher sample rate
  float values_DIFF_CONT [num_measure_DIFF_CONT];


  /* Single-end
   *   //int num_ch_SE = 8;
  int num_ch_SE = 1;
  int32_t values_SE [num_ch_SE];
  //uint8_t  channels_SE [8] = {AIN0, AIN1, AIN2, AIN3, AIN4, AIN5, AIN6, AIN7};
  uint8_t channels_SE [1] = {AIN0}; // TESTING
   *
   *
*/

  // Differential
  /*
  	int num_ch_DIFF = 1;
  	uint32_t values_DIFF [num_ch_DIFF];

  	uint8_t  posChannels [1] = {AIN0}; // TESTING
  	uint8_t  negChannels [1] = {AIN1}; // TESTING
*/


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//scanSEChannels(channels_SE, num_ch_SE, values_SE);
	//scanDIFFChannels(posChannels, negChannels, num_ch_DIFF, values_DIFF);
	//scanDIFFChannelContinuous(AIN0, AIN1, num_measure_DIFF_CONT, values_DIFF_CONT);
	//delay_ms(1);
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 122;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 0;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 0;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);

}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
    if (htim->Instance == htim4.Instance){


    }
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{

	if(GPIO_Pin == GPIO_PIN_3 && id == 3 && StartFlag == 1)
	{
		//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
		delay_us(3);
		HAL_SPI_TransmitReceive(&hspi1,RDATACsend_data,Databuffer,3,50);

				// construct 24 bit value
		read  = ((int32_t)Databuffer[0] << 16) & 0x00FF0000;
		read |= ((int32_t)Databuffer[1] << 8);
		read |= Databuffer[2];
		if (read & 0x800000){
			read |= 0xFF000000;

		}
		//tempdata = read;
		data = read;
		delay_us(5);
	}
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
