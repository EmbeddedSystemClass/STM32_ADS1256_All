
Differential-Continous_RTOS_ISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006678  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a078  08006808  08006808  00016808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010880  08010880  00020880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010888  08010888  00020888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801088c  0801088c  0002088c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  20000000  08010890  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00030094  2**0
                  CONTENTS
  8 .bss          0001c2fc  20000094  20000094  00030094  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2001c390  2001c390  00030094  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 11 .debug_info   00021d0a  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004c70  00000000  00000000  00051dce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000c90a  00000000  00000000  00056a3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f08  00000000  00000000  00063348  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014d8  00000000  00000000  00064250  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022ca8  00000000  00000000  00065728  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012050  00000000  00000000  000883d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cd415  00000000  00000000  0009a420  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00167835  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dc8  00000000  00000000  001678b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080067f0 	.word	0x080067f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	080067f0 	.word	0x080067f0

080001d0 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 80001d0:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80001d2:	2b01      	cmp	r3, #1
	IT       LS
 80001d4:	bf98      	it	ls
	BXLS     lr
 80001d6:	4770      	bxls	lr
	PUSH     {r4-r9}
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80001dc:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 80001e8:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 80001ee:	4480      	add	r8, r0
	ADD      r9,r0,r9
 80001f0:	4481      	add	r9, r0
	ADD      r2,r0,r2
 80001f2:	4402      	add	r2, r0
	ADD      r12,r0,r12
 80001f4:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 80001fe:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000204:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000208:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800020c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000210:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800021a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800022c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800022e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000230:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
	POP      {r4-r9}
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 800023a:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 800023c:	2b01      	cmp	r3, #1
	IT       LS
 800023e:	bf98      	it	ls
	BXLS     lr
 8000240:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 8000246:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000252:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 8000270:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000276:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 800027a:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800027e:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000282:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 8000284:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000286:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
	POP      {r4-r9}
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b972 	b.w	8000dc8 <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9e08      	ldr	r6, [sp, #32]
 8000b02:	4604      	mov	r4, r0
 8000b04:	4688      	mov	r8, r1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d14b      	bne.n	8000ba2 <__udivmoddi4+0xa6>
 8000b0a:	428a      	cmp	r2, r1
 8000b0c:	4615      	mov	r5, r2
 8000b0e:	d967      	bls.n	8000be0 <__udivmoddi4+0xe4>
 8000b10:	fab2 f282 	clz	r2, r2
 8000b14:	b14a      	cbz	r2, 8000b2a <__udivmoddi4+0x2e>
 8000b16:	f1c2 0720 	rsb	r7, r2, #32
 8000b1a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b1e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b22:	4095      	lsls	r5, r2
 8000b24:	ea47 0803 	orr.w	r8, r7, r3
 8000b28:	4094      	lsls	r4, r2
 8000b2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b2e:	0c23      	lsrs	r3, r4, #16
 8000b30:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b34:	fa1f fc85 	uxth.w	ip, r5
 8000b38:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b3c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b40:	fb07 f10c 	mul.w	r1, r7, ip
 8000b44:	4299      	cmp	r1, r3
 8000b46:	d909      	bls.n	8000b5c <__udivmoddi4+0x60>
 8000b48:	18eb      	adds	r3, r5, r3
 8000b4a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b4e:	f080 811b 	bcs.w	8000d88 <__udivmoddi4+0x28c>
 8000b52:	4299      	cmp	r1, r3
 8000b54:	f240 8118 	bls.w	8000d88 <__udivmoddi4+0x28c>
 8000b58:	3f02      	subs	r7, #2
 8000b5a:	442b      	add	r3, r5
 8000b5c:	1a5b      	subs	r3, r3, r1
 8000b5e:	b2a4      	uxth	r4, r4
 8000b60:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b64:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b6c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b70:	45a4      	cmp	ip, r4
 8000b72:	d909      	bls.n	8000b88 <__udivmoddi4+0x8c>
 8000b74:	192c      	adds	r4, r5, r4
 8000b76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b7a:	f080 8107 	bcs.w	8000d8c <__udivmoddi4+0x290>
 8000b7e:	45a4      	cmp	ip, r4
 8000b80:	f240 8104 	bls.w	8000d8c <__udivmoddi4+0x290>
 8000b84:	3802      	subs	r0, #2
 8000b86:	442c      	add	r4, r5
 8000b88:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b8c:	eba4 040c 	sub.w	r4, r4, ip
 8000b90:	2700      	movs	r7, #0
 8000b92:	b11e      	cbz	r6, 8000b9c <__udivmoddi4+0xa0>
 8000b94:	40d4      	lsrs	r4, r2
 8000b96:	2300      	movs	r3, #0
 8000b98:	e9c6 4300 	strd	r4, r3, [r6]
 8000b9c:	4639      	mov	r1, r7
 8000b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0xbe>
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	f000 80eb 	beq.w	8000d82 <__udivmoddi4+0x286>
 8000bac:	2700      	movs	r7, #0
 8000bae:	e9c6 0100 	strd	r0, r1, [r6]
 8000bb2:	4638      	mov	r0, r7
 8000bb4:	4639      	mov	r1, r7
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	fab3 f783 	clz	r7, r3
 8000bbe:	2f00      	cmp	r7, #0
 8000bc0:	d147      	bne.n	8000c52 <__udivmoddi4+0x156>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0xd0>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 80fa 	bhi.w	8000dc0 <__udivmoddi4+0x2c4>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb61 0303 	sbc.w	r3, r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	4698      	mov	r8, r3
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	d0e0      	beq.n	8000b9c <__udivmoddi4+0xa0>
 8000bda:	e9c6 4800 	strd	r4, r8, [r6]
 8000bde:	e7dd      	b.n	8000b9c <__udivmoddi4+0xa0>
 8000be0:	b902      	cbnz	r2, 8000be4 <__udivmoddi4+0xe8>
 8000be2:	deff      	udf	#255	; 0xff
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	2a00      	cmp	r2, #0
 8000bea:	f040 808f 	bne.w	8000d0c <__udivmoddi4+0x210>
 8000bee:	1b49      	subs	r1, r1, r5
 8000bf0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bf4:	fa1f f885 	uxth.w	r8, r5
 8000bf8:	2701      	movs	r7, #1
 8000bfa:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bfe:	0c23      	lsrs	r3, r4, #16
 8000c00:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb08 f10c 	mul.w	r1, r8, ip
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	d907      	bls.n	8000c20 <__udivmoddi4+0x124>
 8000c10:	18eb      	adds	r3, r5, r3
 8000c12:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x122>
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	f200 80cd 	bhi.w	8000db8 <__udivmoddi4+0x2bc>
 8000c1e:	4684      	mov	ip, r0
 8000c20:	1a59      	subs	r1, r3, r1
 8000c22:	b2a3      	uxth	r3, r4
 8000c24:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c28:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c2c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c30:	fb08 f800 	mul.w	r8, r8, r0
 8000c34:	45a0      	cmp	r8, r4
 8000c36:	d907      	bls.n	8000c48 <__udivmoddi4+0x14c>
 8000c38:	192c      	adds	r4, r5, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x14a>
 8000c40:	45a0      	cmp	r8, r4
 8000c42:	f200 80b6 	bhi.w	8000db2 <__udivmoddi4+0x2b6>
 8000c46:	4618      	mov	r0, r3
 8000c48:	eba4 0408 	sub.w	r4, r4, r8
 8000c4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c50:	e79f      	b.n	8000b92 <__udivmoddi4+0x96>
 8000c52:	f1c7 0c20 	rsb	ip, r7, #32
 8000c56:	40bb      	lsls	r3, r7
 8000c58:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c5c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c60:	fa01 f407 	lsl.w	r4, r1, r7
 8000c64:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c68:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c6c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c70:	4325      	orrs	r5, r4
 8000c72:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c76:	0c2c      	lsrs	r4, r5, #16
 8000c78:	fb08 3319 	mls	r3, r8, r9, r3
 8000c7c:	fa1f fa8e 	uxth.w	sl, lr
 8000c80:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c84:	fb09 f40a 	mul.w	r4, r9, sl
 8000c88:	429c      	cmp	r4, r3
 8000c8a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c8e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c92:	d90b      	bls.n	8000cac <__udivmoddi4+0x1b0>
 8000c94:	eb1e 0303 	adds.w	r3, lr, r3
 8000c98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c9c:	f080 8087 	bcs.w	8000dae <__udivmoddi4+0x2b2>
 8000ca0:	429c      	cmp	r4, r3
 8000ca2:	f240 8084 	bls.w	8000dae <__udivmoddi4+0x2b2>
 8000ca6:	f1a9 0902 	sub.w	r9, r9, #2
 8000caa:	4473      	add	r3, lr
 8000cac:	1b1b      	subs	r3, r3, r4
 8000cae:	b2ad      	uxth	r5, r5
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cbc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cc0:	45a2      	cmp	sl, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x1da>
 8000cc4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ccc:	d26b      	bcs.n	8000da6 <__udivmoddi4+0x2aa>
 8000cce:	45a2      	cmp	sl, r4
 8000cd0:	d969      	bls.n	8000da6 <__udivmoddi4+0x2aa>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4474      	add	r4, lr
 8000cd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cda:	fba0 8902 	umull	r8, r9, r0, r2
 8000cde:	eba4 040a 	sub.w	r4, r4, sl
 8000ce2:	454c      	cmp	r4, r9
 8000ce4:	46c2      	mov	sl, r8
 8000ce6:	464b      	mov	r3, r9
 8000ce8:	d354      	bcc.n	8000d94 <__udivmoddi4+0x298>
 8000cea:	d051      	beq.n	8000d90 <__udivmoddi4+0x294>
 8000cec:	2e00      	cmp	r6, #0
 8000cee:	d069      	beq.n	8000dc4 <__udivmoddi4+0x2c8>
 8000cf0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cf4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cf8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cfc:	40fd      	lsrs	r5, r7
 8000cfe:	40fc      	lsrs	r4, r7
 8000d00:	ea4c 0505 	orr.w	r5, ip, r5
 8000d04:	e9c6 5400 	strd	r5, r4, [r6]
 8000d08:	2700      	movs	r7, #0
 8000d0a:	e747      	b.n	8000b9c <__udivmoddi4+0xa0>
 8000d0c:	f1c2 0320 	rsb	r3, r2, #32
 8000d10:	fa20 f703 	lsr.w	r7, r0, r3
 8000d14:	4095      	lsls	r5, r2
 8000d16:	fa01 f002 	lsl.w	r0, r1, r2
 8000d1a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d1e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d22:	4338      	orrs	r0, r7
 8000d24:	0c01      	lsrs	r1, r0, #16
 8000d26:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d2a:	fa1f f885 	uxth.w	r8, r5
 8000d2e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d36:	fb07 f308 	mul.w	r3, r7, r8
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d40:	d907      	bls.n	8000d52 <__udivmoddi4+0x256>
 8000d42:	1869      	adds	r1, r5, r1
 8000d44:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d48:	d22f      	bcs.n	8000daa <__udivmoddi4+0x2ae>
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	d92d      	bls.n	8000daa <__udivmoddi4+0x2ae>
 8000d4e:	3f02      	subs	r7, #2
 8000d50:	4429      	add	r1, r5
 8000d52:	1acb      	subs	r3, r1, r3
 8000d54:	b281      	uxth	r1, r0
 8000d56:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d5a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d62:	fb00 f308 	mul.w	r3, r0, r8
 8000d66:	428b      	cmp	r3, r1
 8000d68:	d907      	bls.n	8000d7a <__udivmoddi4+0x27e>
 8000d6a:	1869      	adds	r1, r5, r1
 8000d6c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d70:	d217      	bcs.n	8000da2 <__udivmoddi4+0x2a6>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d915      	bls.n	8000da2 <__udivmoddi4+0x2a6>
 8000d76:	3802      	subs	r0, #2
 8000d78:	4429      	add	r1, r5
 8000d7a:	1ac9      	subs	r1, r1, r3
 8000d7c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d80:	e73b      	b.n	8000bfa <__udivmoddi4+0xfe>
 8000d82:	4637      	mov	r7, r6
 8000d84:	4630      	mov	r0, r6
 8000d86:	e709      	b.n	8000b9c <__udivmoddi4+0xa0>
 8000d88:	4607      	mov	r7, r0
 8000d8a:	e6e7      	b.n	8000b5c <__udivmoddi4+0x60>
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	e6fb      	b.n	8000b88 <__udivmoddi4+0x8c>
 8000d90:	4541      	cmp	r1, r8
 8000d92:	d2ab      	bcs.n	8000cec <__udivmoddi4+0x1f0>
 8000d94:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d98:	eb69 020e 	sbc.w	r2, r9, lr
 8000d9c:	3801      	subs	r0, #1
 8000d9e:	4613      	mov	r3, r2
 8000da0:	e7a4      	b.n	8000cec <__udivmoddi4+0x1f0>
 8000da2:	4660      	mov	r0, ip
 8000da4:	e7e9      	b.n	8000d7a <__udivmoddi4+0x27e>
 8000da6:	4618      	mov	r0, r3
 8000da8:	e795      	b.n	8000cd6 <__udivmoddi4+0x1da>
 8000daa:	4667      	mov	r7, ip
 8000dac:	e7d1      	b.n	8000d52 <__udivmoddi4+0x256>
 8000dae:	4681      	mov	r9, r0
 8000db0:	e77c      	b.n	8000cac <__udivmoddi4+0x1b0>
 8000db2:	3802      	subs	r0, #2
 8000db4:	442c      	add	r4, r5
 8000db6:	e747      	b.n	8000c48 <__udivmoddi4+0x14c>
 8000db8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dbc:	442b      	add	r3, r5
 8000dbe:	e72f      	b.n	8000c20 <__udivmoddi4+0x124>
 8000dc0:	4638      	mov	r0, r7
 8000dc2:	e708      	b.n	8000bd6 <__udivmoddi4+0xda>
 8000dc4:	4637      	mov	r7, r6
 8000dc6:	e6e9      	b.n	8000b9c <__udivmoddi4+0xa0>

08000dc8 <__aeabi_idiv0>:
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop

08000dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dcc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dce:	4a0e      	ldr	r2, [pc, #56]	; (8000e08 <HAL_InitTick+0x3c>)
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <HAL_InitTick+0x40>)
{
 8000dd2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd4:	7818      	ldrb	r0, [r3, #0]
 8000dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dda:	fbb3 f3f0 	udiv	r3, r3, r0
 8000dde:	6810      	ldr	r0, [r2, #0]
 8000de0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000de4:	f000 f896 	bl	8000f14 <HAL_SYSTICK_Config>
 8000de8:	4604      	mov	r4, r0
 8000dea:	b958      	cbnz	r0, 8000e04 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dec:	2d0f      	cmp	r5, #15
 8000dee:	d809      	bhi.n	8000e04 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df0:	4602      	mov	r2, r0
 8000df2:	4629      	mov	r1, r5
 8000df4:	f04f 30ff 	mov.w	r0, #4294967295
 8000df8:	f000 f84a 	bl	8000e90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dfc:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <HAL_InitTick+0x44>)
 8000dfe:	4620      	mov	r0, r4
 8000e00:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000e02:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000e04:	2001      	movs	r0, #1
 8000e06:	e7fc      	b.n	8000e02 <HAL_InitTick+0x36>
 8000e08:	20000028 	.word	0x20000028
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	20000004 	.word	0x20000004

08000e14 <HAL_Init>:
{
 8000e14:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <HAL_Init+0x30>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e1e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e26:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e2e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e30:	2003      	movs	r0, #3
 8000e32:	f000 f81b 	bl	8000e6c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e36:	200f      	movs	r0, #15
 8000e38:	f7ff ffc8 	bl	8000dcc <HAL_InitTick>
  HAL_MspInit();
 8000e3c:	f005 faa4 	bl	8006388 <HAL_MspInit>
}
 8000e40:	2000      	movs	r0, #0
 8000e42:	bd08      	pop	{r3, pc}
 8000e44:	40023c00 	.word	0x40023c00

08000e48 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e48:	4a03      	ldr	r2, [pc, #12]	; (8000e58 <HAL_IncTick+0x10>)
 8000e4a:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <HAL_IncTick+0x14>)
 8000e4c:	6811      	ldr	r1, [r2, #0]
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	440b      	add	r3, r1
 8000e52:	6013      	str	r3, [r2, #0]
}
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20004074 	.word	0x20004074
 8000e5c:	20000000 	.word	0x20000000

08000e60 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e60:	4b01      	ldr	r3, [pc, #4]	; (8000e68 <HAL_GetTick+0x8>)
 8000e62:	6818      	ldr	r0, [r3, #0]
}
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	20004074 	.word	0x20004074

08000e6c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e6c:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e6e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e70:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e74:	041b      	lsls	r3, r3, #16
 8000e76:	0c1b      	lsrs	r3, r3, #16
 8000e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e7c:	0200      	lsls	r0, r0, #8
 8000e7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e82:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000e86:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000e88:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e90:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e92:	b570      	push	{r4, r5, r6, lr}
 8000e94:	68dc      	ldr	r4, [r3, #12]
 8000e96:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e9a:	f1c4 0507 	rsb	r5, r4, #7
 8000e9e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea0:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea4:	bf28      	it	cs
 8000ea6:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eac:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eae:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb2:	bf8c      	ite	hi
 8000eb4:	3c03      	subhi	r4, #3
 8000eb6:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb8:	ea21 0303 	bic.w	r3, r1, r3
 8000ebc:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ebe:	fa06 f404 	lsl.w	r4, r6, r4
 8000ec2:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000ec6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ecc:	bfa8      	it	ge
 8000ece:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8000ed2:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed6:	bfbc      	itt	lt
 8000ed8:	f000 000f 	andlt.w	r0, r0, #15
 8000edc:	4a05      	ldrlt	r2, [pc, #20]	; (8000ef4 <HAL_NVIC_SetPriority+0x64>)
 8000ede:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee0:	bfaa      	itet	ge
 8000ee2:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee6:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000eec:	bd70      	pop	{r4, r5, r6, pc}
 8000eee:	bf00      	nop
 8000ef0:	e000ed00 	.word	0xe000ed00
 8000ef4:	e000ed14 	.word	0xe000ed14

08000ef8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000ef8:	2800      	cmp	r0, #0
 8000efa:	db08      	blt.n	8000f0e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000efc:	0942      	lsrs	r2, r0, #5
 8000efe:	2301      	movs	r3, #1
 8000f00:	f000 001f 	and.w	r0, r0, #31
 8000f04:	fa03 f000 	lsl.w	r0, r3, r0
 8000f08:	4b01      	ldr	r3, [pc, #4]	; (8000f10 <HAL_NVIC_EnableIRQ+0x18>)
 8000f0a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000f0e:	4770      	bx	lr
 8000f10:	e000e100 	.word	0xe000e100

08000f14 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f14:	3801      	subs	r0, #1
 8000f16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000f1a:	d20a      	bcs.n	8000f32 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1e:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f20:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f22:	21f0      	movs	r1, #240	; 0xf0
 8000f24:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f28:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f2c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f32:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000e010 	.word	0xe000e010
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000f40:	6803      	ldr	r3, [r0, #0]
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000f48:	f023 0303 	bic.w	r3, r3, #3
 8000f4c:	2118      	movs	r1, #24
 8000f4e:	3a10      	subs	r2, #16
 8000f50:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000f54:	4904      	ldr	r1, [pc, #16]	; (8000f68 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000f56:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000f58:	bf88      	it	hi
 8000f5a:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000f5c:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000f5e:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000f60:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8000f62:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	08006850 	.word	0x08006850

08000f6c <HAL_DMA_Init>:
{
 8000f6c:	b570      	push	{r4, r5, r6, lr}
 8000f6e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f70:	f7ff ff76 	bl	8000e60 <HAL_GetTick>
 8000f74:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000f76:	2c00      	cmp	r4, #0
 8000f78:	d071      	beq.n	800105e <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000f80:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f82:	2302      	movs	r3, #2
 8000f84:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000f88:	6813      	ldr	r3, [r2, #0]
 8000f8a:	f023 0301 	bic.w	r3, r3, #1
 8000f8e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f90:	6821      	ldr	r1, [r4, #0]
 8000f92:	680b      	ldr	r3, [r1, #0]
 8000f94:	07d8      	lsls	r0, r3, #31
 8000f96:	d43c      	bmi.n	8001012 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000f98:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f9a:	4d32      	ldr	r5, [pc, #200]	; (8001064 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f9c:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f9e:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fa0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	68e2      	ldr	r2, [r4, #12]
 8000fa8:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000faa:	6922      	ldr	r2, [r4, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	6962      	ldr	r2, [r4, #20]
 8000fb0:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fb2:	69e2      	ldr	r2, [r4, #28]
 8000fb4:	4303      	orrs	r3, r0
 8000fb6:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fb8:	6a22      	ldr	r2, [r4, #32]
 8000fba:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fbc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000fbe:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fc0:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000fc4:	bf02      	ittt	eq
 8000fc6:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8000fca:	4335      	orreq	r5, r6
 8000fcc:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8000fce:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000fd0:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fd2:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000fd4:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000fd8:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fdc:	d10b      	bne.n	8000ff6 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8000fde:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000fe0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000fe2:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000fe4:	b13d      	cbz	r5, 8000ff6 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000fe6:	b9f8      	cbnz	r0, 8001028 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8000fe8:	2a01      	cmp	r2, #1
 8000fea:	d02d      	beq.n	8001048 <HAL_DMA_Init+0xdc>
 8000fec:	d301      	bcc.n	8000ff2 <HAL_DMA_Init+0x86>
 8000fee:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000ff0:	d101      	bne.n	8000ff6 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000ff2:	01ea      	lsls	r2, r5, #7
 8000ff4:	d42b      	bmi.n	800104e <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8000ff6:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	f7ff ffa1 	bl	8000f40 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ffe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001000:	233f      	movs	r3, #63	; 0x3f
 8001002:	4093      	lsls	r3, r2
 8001004:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001006:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001008:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800100a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800100c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001010:	e009      	b.n	8001026 <HAL_DMA_Init+0xba>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001012:	f7ff ff25 	bl	8000e60 <HAL_GetTick>
 8001016:	1b40      	subs	r0, r0, r5
 8001018:	2805      	cmp	r0, #5
 800101a:	d9b9      	bls.n	8000f90 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800101c:	2320      	movs	r3, #32
 800101e:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001020:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8001022:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001026:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001028:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800102c:	d113      	bne.n	8001056 <HAL_DMA_Init+0xea>
    switch (tmp)
 800102e:	2a03      	cmp	r2, #3
 8001030:	d8e1      	bhi.n	8000ff6 <HAL_DMA_Init+0x8a>
 8001032:	a001      	add	r0, pc, #4	; (adr r0, 8001038 <HAL_DMA_Init+0xcc>)
 8001034:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001038:	0800104f 	.word	0x0800104f
 800103c:	08000ff3 	.word	0x08000ff3
 8001040:	0800104f 	.word	0x0800104f
 8001044:	08001049 	.word	0x08001049
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001048:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800104c:	d1d3      	bne.n	8000ff6 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800104e:	2340      	movs	r3, #64	; 0x40
 8001050:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001052:	2001      	movs	r0, #1
 8001054:	e7e5      	b.n	8001022 <HAL_DMA_Init+0xb6>
    switch (tmp)
 8001056:	2a02      	cmp	r2, #2
 8001058:	d9f9      	bls.n	800104e <HAL_DMA_Init+0xe2>
 800105a:	2a03      	cmp	r2, #3
 800105c:	e7c8      	b.n	8000ff0 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 800105e:	2001      	movs	r0, #1
 8001060:	e7e1      	b.n	8001026 <HAL_DMA_Init+0xba>
 8001062:	bf00      	nop
 8001064:	f010803f 	.word	0xf010803f

08001068 <HAL_DMA_Start_IT>:
{
 8001068:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 800106a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800106e:	2c01      	cmp	r4, #1
 8001070:	d036      	beq.n	80010e0 <HAL_DMA_Start_IT+0x78>
 8001072:	2401      	movs	r4, #1
 8001074:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001078:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800107c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 800107e:	2c01      	cmp	r4, #1
 8001080:	f04f 0500 	mov.w	r5, #0
 8001084:	f04f 0402 	mov.w	r4, #2
 8001088:	d128      	bne.n	80010dc <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 800108a:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800108e:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001090:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001092:	6825      	ldr	r5, [r4, #0]
 8001094:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8001098:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800109a:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800109c:	6883      	ldr	r3, [r0, #8]
 800109e:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 80010a0:	bf0e      	itee	eq
 80010a2:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80010a4:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80010a6:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010a8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 80010aa:	bf08      	it	eq
 80010ac:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010ae:	233f      	movs	r3, #63	; 0x3f
 80010b0:	4093      	lsls	r3, r2
 80010b2:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80010b4:	6823      	ldr	r3, [r4, #0]
 80010b6:	f043 0316 	orr.w	r3, r3, #22
 80010ba:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80010bc:	6963      	ldr	r3, [r4, #20]
 80010be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c2:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80010c4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80010c6:	b11b      	cbz	r3, 80010d0 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 80010c8:	6823      	ldr	r3, [r4, #0]
 80010ca:	f043 0308 	orr.w	r3, r3, #8
 80010ce:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80010d0:	6823      	ldr	r3, [r4, #0]
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010d8:	2000      	movs	r0, #0
}
 80010da:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 80010dc:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 80010e0:	2002      	movs	r0, #2
 80010e2:	e7fa      	b.n	80010da <HAL_DMA_Start_IT+0x72>

080010e4 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010e4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d003      	beq.n	80010f4 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ec:	2380      	movs	r3, #128	; 0x80
 80010ee:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80010f0:	2001      	movs	r0, #1
 80010f2:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80010f4:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80010f6:	2305      	movs	r3, #5
 80010f8:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80010fc:	6813      	ldr	r3, [r2, #0]
 80010fe:	f023 0301 	bic.w	r3, r3, #1
 8001102:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001104:	2000      	movs	r0, #0
}
 8001106:	4770      	bx	lr

08001108 <HAL_DMA_IRQHandler>:
{
 8001108:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 800110a:	2300      	movs	r3, #0
 800110c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800110e:	4b5c      	ldr	r3, [pc, #368]	; (8001280 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001110:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8001112:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001114:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8001116:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001118:	2208      	movs	r2, #8
 800111a:	409a      	lsls	r2, r3
 800111c:	4232      	tst	r2, r6
{
 800111e:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001120:	d00c      	beq.n	800113c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001122:	6801      	ldr	r1, [r0, #0]
 8001124:	6808      	ldr	r0, [r1, #0]
 8001126:	0740      	lsls	r0, r0, #29
 8001128:	d508      	bpl.n	800113c <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800112a:	6808      	ldr	r0, [r1, #0]
 800112c:	f020 0004 	bic.w	r0, r0, #4
 8001130:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001132:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001134:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001136:	f042 0201 	orr.w	r2, r2, #1
 800113a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800113c:	2201      	movs	r2, #1
 800113e:	409a      	lsls	r2, r3
 8001140:	4232      	tst	r2, r6
 8001142:	d008      	beq.n	8001156 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001144:	6821      	ldr	r1, [r4, #0]
 8001146:	6949      	ldr	r1, [r1, #20]
 8001148:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800114a:	bf41      	itttt	mi
 800114c:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800114e:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8001150:	f042 0202 	orrmi.w	r2, r2, #2
 8001154:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001156:	2204      	movs	r2, #4
 8001158:	409a      	lsls	r2, r3
 800115a:	4232      	tst	r2, r6
 800115c:	d008      	beq.n	8001170 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800115e:	6821      	ldr	r1, [r4, #0]
 8001160:	6809      	ldr	r1, [r1, #0]
 8001162:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001164:	bf41      	itttt	mi
 8001166:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001168:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 800116a:	f042 0204 	orrmi.w	r2, r2, #4
 800116e:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001170:	2210      	movs	r2, #16
 8001172:	409a      	lsls	r2, r3
 8001174:	4232      	tst	r2, r6
 8001176:	d010      	beq.n	800119a <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001178:	6823      	ldr	r3, [r4, #0]
 800117a:	6819      	ldr	r1, [r3, #0]
 800117c:	0709      	lsls	r1, r1, #28
 800117e:	d50c      	bpl.n	800119a <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001180:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	0350      	lsls	r0, r2, #13
 8001186:	d537      	bpl.n	80011f8 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	0319      	lsls	r1, r3, #12
 800118c:	d401      	bmi.n	8001192 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800118e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001190:	e000      	b.n	8001194 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001192:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8001194:	b10b      	cbz	r3, 800119a <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8001196:	4620      	mov	r0, r4
 8001198:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800119a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800119c:	2220      	movs	r2, #32
 800119e:	408a      	lsls	r2, r1
 80011a0:	4232      	tst	r2, r6
 80011a2:	d03a      	beq.n	800121a <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80011a4:	6823      	ldr	r3, [r4, #0]
 80011a6:	6818      	ldr	r0, [r3, #0]
 80011a8:	06c6      	lsls	r6, r0, #27
 80011aa:	d536      	bpl.n	800121a <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80011ac:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80011ae:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80011b2:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011b4:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80011b6:	d127      	bne.n	8001208 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011b8:	f022 0216 	bic.w	r2, r2, #22
 80011bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011be:	695a      	ldr	r2, [r3, #20]
 80011c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011c4:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011c6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80011c8:	b90a      	cbnz	r2, 80011ce <HAL_DMA_IRQHandler+0xc6>
 80011ca:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80011cc:	b11a      	cbz	r2, 80011d6 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	f022 0208 	bic.w	r2, r2, #8
 80011d4:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011d6:	233f      	movs	r3, #63	; 0x3f
 80011d8:	408b      	lsls	r3, r1
 80011da:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 80011dc:	2300      	movs	r3, #0
 80011de:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80011e2:	2301      	movs	r3, #1
 80011e4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80011e8:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d045      	beq.n	800127a <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 80011ee:	4620      	mov	r0, r4
}
 80011f0:	b003      	add	sp, #12
 80011f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 80011f6:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011fc:	bf5e      	ittt	pl
 80011fe:	681a      	ldrpl	r2, [r3, #0]
 8001200:	f022 0208 	bicpl.w	r2, r2, #8
 8001204:	601a      	strpl	r2, [r3, #0]
 8001206:	e7c2      	b.n	800118e <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001208:	0350      	lsls	r0, r2, #13
 800120a:	d527      	bpl.n	800125c <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	0319      	lsls	r1, r3, #12
 8001210:	d431      	bmi.n	8001276 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8001212:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8001214:	b10b      	cbz	r3, 800121a <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8001216:	4620      	mov	r0, r4
 8001218:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800121a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800121c:	b36b      	cbz	r3, 800127a <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800121e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001220:	07da      	lsls	r2, r3, #31
 8001222:	d519      	bpl.n	8001258 <HAL_DMA_IRQHandler+0x150>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001224:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8001226:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8001228:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800122c:	6813      	ldr	r3, [r2, #0]
 800122e:	f023 0301 	bic.w	r3, r3, #1
 8001232:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001234:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001238:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 800123c:	9b01      	ldr	r3, [sp, #4]
 800123e:	3301      	adds	r3, #1
 8001240:	42bb      	cmp	r3, r7
 8001242:	9301      	str	r3, [sp, #4]
 8001244:	d802      	bhi.n	800124c <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001246:	6813      	ldr	r3, [r2, #0]
 8001248:	07db      	lsls	r3, r3, #31
 800124a:	d4f7      	bmi.n	800123c <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 800124c:	2300      	movs	r3, #0
 800124e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001252:	2301      	movs	r3, #1
 8001254:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001258:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800125a:	e7c6      	b.n	80011ea <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001262:	d108      	bne.n	8001276 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001264:	6819      	ldr	r1, [r3, #0]
 8001266:	f021 0110 	bic.w	r1, r1, #16
 800126a:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800126c:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 800126e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001272:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001276:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001278:	e7cc      	b.n	8001214 <HAL_DMA_IRQHandler+0x10c>
}
 800127a:	b003      	add	sp, #12
 800127c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800127e:	bf00      	nop
 8001280:	20000028 	.word	0x20000028

08001284 <HAL_DMA_GetState>:
  return hdma->State;
 8001284:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8001288:	4770      	bx	lr

0800128a <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800128a:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800128c:	4770      	bx	lr
	...

08001290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001294:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001296:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001298:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001448 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800129c:	4a68      	ldr	r2, [pc, #416]	; (8001440 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800129e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 800144c <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012a2:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012a4:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80012a6:	f04f 0c01 	mov.w	ip, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012aa:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80012ac:	fa0c fc03 	lsl.w	ip, ip, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012b0:	ea04 060c 	and.w	r6, r4, ip
    if(iocurrent == ioposition)
 80012b4:	45b4      	cmp	ip, r6
 80012b6:	f040 80ae 	bne.w	8001416 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ba:	684c      	ldr	r4, [r1, #4]
 80012bc:	f024 0710 	bic.w	r7, r4, #16
 80012c0:	2f02      	cmp	r7, #2
 80012c2:	d116      	bne.n	80012f2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80012c4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80012c8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012cc:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80012d0:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012d4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80012d8:	f04f 0e0f 	mov.w	lr, #15
 80012dc:	fa0e fe0b 	lsl.w	lr, lr, fp
 80012e0:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012e4:	690d      	ldr	r5, [r1, #16]
 80012e6:	fa05 f50b 	lsl.w	r5, r5, fp
 80012ea:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 80012ee:	f8ca 5020 	str.w	r5, [sl, #32]
 80012f2:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012f6:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80012f8:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012fc:	fa05 f50a 	lsl.w	r5, r5, sl
 8001300:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001302:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001306:	ea05 0b0b 	and.w	fp, r5, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800130a:	fa0e fe0a 	lsl.w	lr, lr, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800130e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001310:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001314:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001316:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800131a:	d811      	bhi.n	8001340 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800131c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800131e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001322:	68cf      	ldr	r7, [r1, #12]
 8001324:	fa07 fe0a 	lsl.w	lr, r7, sl
 8001328:	ea4e 070b 	orr.w	r7, lr, fp
        GPIOx->OSPEEDR = temp;
 800132c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800132e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001330:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001334:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001338:	409f      	lsls	r7, r3
 800133a:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 800133e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001340:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001342:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001344:	688f      	ldr	r7, [r1, #8]
 8001346:	fa07 f70a 	lsl.w	r7, r7, sl
 800134a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800134c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800134e:	00e5      	lsls	r5, r4, #3
 8001350:	d561      	bpl.n	8001416 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001352:	f04f 0b00 	mov.w	fp, #0
 8001356:	f8cd b00c 	str.w	fp, [sp, #12]
 800135a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800135e:	4d39      	ldr	r5, [pc, #228]	; (8001444 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001360:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001364:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001368:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800136c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001370:	9703      	str	r7, [sp, #12]
 8001372:	9f03      	ldr	r7, [sp, #12]
 8001374:	f023 0703 	bic.w	r7, r3, #3
 8001378:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800137c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001380:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001384:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001388:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800138c:	f04f 0c0f 	mov.w	ip, #15
 8001390:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001394:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001396:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800139a:	d043      	beq.n	8001424 <HAL_GPIO_Init+0x194>
 800139c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013a0:	42a8      	cmp	r0, r5
 80013a2:	d041      	beq.n	8001428 <HAL_GPIO_Init+0x198>
 80013a4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013a8:	42a8      	cmp	r0, r5
 80013aa:	d03f      	beq.n	800142c <HAL_GPIO_Init+0x19c>
 80013ac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013b0:	42a8      	cmp	r0, r5
 80013b2:	d03d      	beq.n	8001430 <HAL_GPIO_Init+0x1a0>
 80013b4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013b8:	42a8      	cmp	r0, r5
 80013ba:	d03b      	beq.n	8001434 <HAL_GPIO_Init+0x1a4>
 80013bc:	4548      	cmp	r0, r9
 80013be:	d03b      	beq.n	8001438 <HAL_GPIO_Init+0x1a8>
 80013c0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80013c4:	42a8      	cmp	r0, r5
 80013c6:	d039      	beq.n	800143c <HAL_GPIO_Init+0x1ac>
 80013c8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013cc:	42a8      	cmp	r0, r5
 80013ce:	bf14      	ite	ne
 80013d0:	2508      	movne	r5, #8
 80013d2:	2507      	moveq	r5, #7
 80013d4:	fa05 f50e 	lsl.w	r5, r5, lr
 80013d8:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013dc:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80013de:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80013e0:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013e2:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80013e6:	bf0c      	ite	eq
 80013e8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80013ea:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80013ec:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80013ee:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013f0:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80013f4:	bf0c      	ite	eq
 80013f6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80013f8:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80013fa:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013fc:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013fe:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001402:	bf0c      	ite	eq
 8001404:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001406:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001408:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800140a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800140c:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800140e:	bf54      	ite	pl
 8001410:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001412:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001414:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001416:	3301      	adds	r3, #1
 8001418:	2b10      	cmp	r3, #16
 800141a:	f47f af44 	bne.w	80012a6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800141e:	b005      	add	sp, #20
 8001420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001424:	465d      	mov	r5, fp
 8001426:	e7d5      	b.n	80013d4 <HAL_GPIO_Init+0x144>
 8001428:	2501      	movs	r5, #1
 800142a:	e7d3      	b.n	80013d4 <HAL_GPIO_Init+0x144>
 800142c:	2502      	movs	r5, #2
 800142e:	e7d1      	b.n	80013d4 <HAL_GPIO_Init+0x144>
 8001430:	2503      	movs	r5, #3
 8001432:	e7cf      	b.n	80013d4 <HAL_GPIO_Init+0x144>
 8001434:	2504      	movs	r5, #4
 8001436:	e7cd      	b.n	80013d4 <HAL_GPIO_Init+0x144>
 8001438:	2505      	movs	r5, #5
 800143a:	e7cb      	b.n	80013d4 <HAL_GPIO_Init+0x144>
 800143c:	2506      	movs	r5, #6
 800143e:	e7c9      	b.n	80013d4 <HAL_GPIO_Init+0x144>
 8001440:	40013c00 	.word	0x40013c00
 8001444:	40020000 	.word	0x40020000
 8001448:	40023800 	.word	0x40023800
 800144c:	40021400 	.word	0x40021400

08001450 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001450:	6903      	ldr	r3, [r0, #16]
 8001452:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001454:	bf14      	ite	ne
 8001456:	2001      	movne	r0, #1
 8001458:	2000      	moveq	r0, #0
 800145a:	4770      	bx	lr

0800145c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800145c:	b10a      	cbz	r2, 8001462 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800145e:	6181      	str	r1, [r0, #24]
  }
}
 8001460:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001462:	0409      	lsls	r1, r1, #16
 8001464:	e7fb      	b.n	800145e <HAL_GPIO_WritePin+0x2>

08001466 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001466:	6943      	ldr	r3, [r0, #20]
 8001468:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800146c:	bf08      	it	eq
 800146e:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8001470:	6181      	str	r1, [r0, #24]
  }
}
 8001472:	4770      	bx	lr

08001474 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001474:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001476:	4b04      	ldr	r3, [pc, #16]	; (8001488 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001478:	6959      	ldr	r1, [r3, #20]
 800147a:	4201      	tst	r1, r0
 800147c:	d002      	beq.n	8001484 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800147e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001480:	f004 ff50 	bl	8006324 <HAL_GPIO_EXTI_Callback>
  }
}
 8001484:	bd08      	pop	{r3, pc}
 8001486:	bf00      	nop
 8001488:	40013c00 	.word	0x40013c00

0800148c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800148c:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800148e:	4604      	mov	r4, r0
 8001490:	b908      	cbnz	r0, 8001496 <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 8001492:	2001      	movs	r0, #1
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
}
 8001494:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001496:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800149a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800149e:	b91b      	cbnz	r3, 80014a8 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80014a0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80014a4:	f004 ff90 	bl	80063c8 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 80014a8:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80014aa:	2324      	movs	r3, #36	; 0x24
 80014ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80014b0:	6813      	ldr	r3, [r2, #0]
 80014b2:	f023 0301 	bic.w	r3, r3, #1
 80014b6:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014b8:	f001 f9ac 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014bc:	6863      	ldr	r3, [r4, #4]
 80014be:	4a41      	ldr	r2, [pc, #260]	; (80015c4 <HAL_I2C_Init+0x138>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d84d      	bhi.n	8001560 <HAL_I2C_Init+0xd4>
 80014c4:	4a40      	ldr	r2, [pc, #256]	; (80015c8 <HAL_I2C_Init+0x13c>)
 80014c6:	4290      	cmp	r0, r2
 80014c8:	d9e3      	bls.n	8001492 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014ca:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80014cc:	493f      	ldr	r1, [pc, #252]	; (80015cc <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014ce:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80014d0:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014d4:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80014d8:	430d      	orrs	r5, r1
 80014da:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014dc:	6a15      	ldr	r5, [r2, #32]
 80014de:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80014e2:	3101      	adds	r1, #1
 80014e4:	4329      	orrs	r1, r5
 80014e6:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014e8:	69d1      	ldr	r1, [r2, #28]
 80014ea:	4d36      	ldr	r5, [pc, #216]	; (80015c4 <HAL_I2C_Init+0x138>)
 80014ec:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80014f0:	42ab      	cmp	r3, r5
 80014f2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80014f6:	f100 30ff 	add.w	r0, r0, #4294967295
 80014fa:	d848      	bhi.n	800158e <HAL_I2C_Init+0x102>
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fbb0 f0f3 	udiv	r0, r0, r3
 8001502:	1c43      	adds	r3, r0, #1
 8001504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001508:	2b04      	cmp	r3, #4
 800150a:	bf38      	it	cc
 800150c:	2304      	movcc	r3, #4
 800150e:	430b      	orrs	r3, r1
 8001510:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001512:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8001516:	6811      	ldr	r1, [r2, #0]
 8001518:	4303      	orrs	r3, r0
 800151a:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800151e:	430b      	orrs	r3, r1
 8001520:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001522:	6891      	ldr	r1, [r2, #8]
 8001524:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8001528:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 800152c:	4303      	orrs	r3, r0
 800152e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001532:	430b      	orrs	r3, r1
 8001534:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001536:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 800153a:	68d1      	ldr	r1, [r2, #12]
 800153c:	4303      	orrs	r3, r0
 800153e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001542:	430b      	orrs	r3, r1
 8001544:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001546:	6813      	ldr	r3, [r2, #0]
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800154e:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001550:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001552:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001554:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001558:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800155a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 800155e:	e799      	b.n	8001494 <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001560:	4a1b      	ldr	r2, [pc, #108]	; (80015d0 <HAL_I2C_Init+0x144>)
 8001562:	4290      	cmp	r0, r2
 8001564:	d995      	bls.n	8001492 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001566:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001568:	4e18      	ldr	r6, [pc, #96]	; (80015cc <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800156a:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 800156c:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001570:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001574:	4335      	orrs	r5, r6
 8001576:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001578:	6a15      	ldr	r5, [r2, #32]
 800157a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800157e:	4371      	muls	r1, r6
 8001580:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001584:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001588:	fbb1 f1f6 	udiv	r1, r1, r6
 800158c:	e7a9      	b.n	80014e2 <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800158e:	68a5      	ldr	r5, [r4, #8]
 8001590:	b955      	cbnz	r5, 80015a8 <HAL_I2C_Init+0x11c>
 8001592:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001596:	fbb0 f0f3 	udiv	r0, r0, r3
 800159a:	1c43      	adds	r3, r0, #1
 800159c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a0:	b16b      	cbz	r3, 80015be <HAL_I2C_Init+0x132>
 80015a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015a6:	e7b2      	b.n	800150e <HAL_I2C_Init+0x82>
 80015a8:	2519      	movs	r5, #25
 80015aa:	436b      	muls	r3, r5
 80015ac:	fbb0 f0f3 	udiv	r0, r0, r3
 80015b0:	1c43      	adds	r3, r0, #1
 80015b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015b6:	b113      	cbz	r3, 80015be <HAL_I2C_Init+0x132>
 80015b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015bc:	e7a7      	b.n	800150e <HAL_I2C_Init+0x82>
 80015be:	2301      	movs	r3, #1
 80015c0:	e7a5      	b.n	800150e <HAL_I2C_Init+0x82>
 80015c2:	bf00      	nop
 80015c4:	000186a0 	.word	0x000186a0
 80015c8:	001e847f 	.word	0x001e847f
 80015cc:	000f4240 	.word	0x000f4240
 80015d0:	003d08ff 	.word	0x003d08ff

080015d4 <HAL_I2C_Slave_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015d4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80015d8:	2b20      	cmp	r3, #32
{
 80015da:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80015dc:	d132      	bne.n	8001644 <HAL_I2C_Slave_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 80015de:	2900      	cmp	r1, #0
 80015e0:	d02e      	beq.n	8001640 <HAL_I2C_Slave_Receive_IT+0x6c>
 80015e2:	2a00      	cmp	r2, #0
 80015e4:	d02c      	beq.n	8001640 <HAL_I2C_Slave_Receive_IT+0x6c>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015e6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d02a      	beq.n	8001644 <HAL_I2C_Slave_Receive_IT+0x70>

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015ee:	6804      	ldr	r4, [r0, #0]
    __HAL_LOCK(hi2c);
 80015f0:	2301      	movs	r3, #1
 80015f2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015f6:	6823      	ldr	r3, [r4, #0]
 80015f8:	07db      	lsls	r3, r3, #31
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015fa:	bf5e      	ittt	pl
 80015fc:	6823      	ldrpl	r3, [r4, #0]
 80015fe:	f043 0301 	orrpl.w	r3, r3, #1
 8001602:	6023      	strpl	r3, [r4, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001604:	6823      	ldr	r3, [r4, #0]
 8001606:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800160a:	6023      	str	r3, [r4, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800160c:	2322      	movs	r3, #34	; 0x22
 800160e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001612:	2320      	movs	r3, #32
 8001614:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001618:	2300      	movs	r3, #0
 800161a:	6403      	str	r3, [r0, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
 800161c:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800161e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001620:	8502      	strh	r2, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001622:	4a09      	ldr	r2, [pc, #36]	; (8001648 <HAL_I2C_Slave_Receive_IT+0x74>)
 8001624:	62c2      	str	r2, [r0, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001626:	6822      	ldr	r2, [r4, #0]
    hi2c->pBuffPtr    = pData;
 8001628:	6241      	str	r1, [r0, #36]	; 0x24
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800162a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800162e:	6022      	str	r2, [r4, #0]
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001630:	6862      	ldr	r2, [r4, #4]
    __HAL_UNLOCK(hi2c);
 8001632:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001636:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800163a:	6062      	str	r2, [r4, #4]

    return HAL_OK;
 800163c:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800163e:	bd10      	pop	{r4, pc}
      return  HAL_ERROR;
 8001640:	2001      	movs	r0, #1
 8001642:	e7fc      	b.n	800163e <HAL_I2C_Slave_Receive_IT+0x6a>
    return HAL_BUSY;
 8001644:	2002      	movs	r0, #2
 8001646:	e7fa      	b.n	800163e <HAL_I2C_Slave_Receive_IT+0x6a>
 8001648:	ffff0000 	.word	0xffff0000

0800164c <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800164c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800164e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001652:	2b20      	cmp	r3, #32
{
 8001654:	4604      	mov	r4, r0
 8001656:	4617      	mov	r7, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001658:	d14f      	bne.n	80016fa <HAL_I2C_Slave_Transmit_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800165a:	2900      	cmp	r1, #0
 800165c:	d04b      	beq.n	80016f6 <HAL_I2C_Slave_Transmit_DMA+0xaa>
 800165e:	2a00      	cmp	r2, #0
 8001660:	d049      	beq.n	80016f6 <HAL_I2C_Slave_Transmit_DMA+0xaa>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001662:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001666:	2b01      	cmp	r3, #1
 8001668:	d047      	beq.n	80016fa <HAL_I2C_Slave_Transmit_DMA+0xae>
 800166a:	2301      	movs	r3, #1
 800166c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001670:	6803      	ldr	r3, [r0, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	07d2      	lsls	r2, r2, #31
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001676:	bf5e      	ittt	pl
 8001678:	6818      	ldrpl	r0, [r3, #0]
 800167a:	f040 0001 	orrpl.w	r0, r0, #1
 800167e:	6018      	strpl	r0, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001680:	6818      	ldr	r0, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8001688:	f842 0b10 	str.w	r0, [r2], #16

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800168c:	2500      	movs	r5, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800168e:	2321      	movs	r3, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001690:	2620      	movs	r6, #32
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001692:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001696:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800169a:	6425      	str	r5, [r4, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
 800169c:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800169e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016a0:	4817      	ldr	r0, [pc, #92]	; (8001700 <HAL_I2C_Slave_Transmit_DMA+0xb4>)
 80016a2:	62e0      	str	r0, [r4, #44]	; 0x2c

    /* Set the I2C DMA transfer complete callback */
    hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80016a4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80016a6:	4f17      	ldr	r7, [pc, #92]	; (8001704 <HAL_I2C_Slave_Transmit_DMA+0xb8>)
    hi2c->pBuffPtr    = pData;
 80016a8:	6261      	str	r1, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80016ae:	63c7      	str	r7, [r0, #60]	; 0x3c

    /* Set the DMA error callback */
    hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80016b0:	4f15      	ldr	r7, [pc, #84]	; (8001708 <HAL_I2C_Slave_Transmit_DMA+0xbc>)
 80016b2:	64c7      	str	r7, [r0, #76]	; 0x4c

    /* Set the unused DMA callbacks to NULL */
    hi2c->hdmatx->XferHalfCpltCallback = NULL;
    hi2c->hdmatx->XferM1CpltCallback = NULL;
 80016b4:	e9c0 5510 	strd	r5, r5, [r0, #64]	; 0x40
    hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80016b8:	6485      	str	r5, [r0, #72]	; 0x48
    hi2c->hdmatx->XferAbortCallback = NULL;
 80016ba:	6505      	str	r5, [r0, #80]	; 0x50

    /* Enable the DMA stream */
    dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80016bc:	f7ff fcd4 	bl	8001068 <HAL_DMA_Start_IT>

    if (dmaxferstatus == HAL_OK)
 80016c0:	b978      	cbnz	r0, 80016e2 <HAL_I2C_Slave_Transmit_DMA+0x96>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016c2:	6823      	ldr	r3, [r4, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016ca:	601a      	str	r2, [r3, #0]

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80016cc:	685a      	ldr	r2, [r3, #4]
      __HAL_UNLOCK(hi2c);
 80016ce:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80016d2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80016d6:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016de:	605a      	str	r2, [r3, #4]
  }
  else
  {
    return HAL_BUSY;
  }
}
 80016e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->State     = HAL_I2C_STATE_READY;
 80016e2:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80016e6:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80016ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80016ec:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80016f0:	f043 0310 	orr.w	r3, r3, #16
 80016f4:	6423      	str	r3, [r4, #64]	; 0x40
      return  HAL_ERROR;
 80016f6:	2001      	movs	r0, #1
 80016f8:	e7f2      	b.n	80016e0 <HAL_I2C_Slave_Transmit_DMA+0x94>
    return HAL_BUSY;
 80016fa:	2002      	movs	r0, #2
 80016fc:	e7f0      	b.n	80016e0 <HAL_I2C_Slave_Transmit_DMA+0x94>
 80016fe:	bf00      	nop
 8001700:	ffff0000 	.word	0xffff0000
 8001704:	0800175b 	.word	0x0800175b
 8001708:	0800171f 	.word	0x0800171f

0800170c <HAL_I2C_MasterTxCpltCallback>:
 800170c:	4770      	bx	lr

0800170e <HAL_I2C_MasterRxCpltCallback>:
 800170e:	4770      	bx	lr

08001710 <HAL_I2C_SlaveTxCpltCallback>:
 8001710:	4770      	bx	lr

08001712 <HAL_I2C_SlaveRxCpltCallback>:
 8001712:	4770      	bx	lr

08001714 <HAL_I2C_AddrCallback>:
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001714:	4770      	bx	lr

08001716 <HAL_I2C_ListenCpltCallback>:
 8001716:	4770      	bx	lr

08001718 <HAL_I2C_MemTxCpltCallback>:
 8001718:	4770      	bx	lr

0800171a <HAL_I2C_MemRxCpltCallback>:
 800171a:	4770      	bx	lr

0800171c <HAL_I2C_ErrorCallback>:
 800171c:	4770      	bx	lr

0800171e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800171e:	b538      	push	{r3, r4, r5, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001720:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 8001722:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001724:	2500      	movs	r5, #0
 8001726:	63dd      	str	r5, [r3, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 8001728:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800172a:	63dd      	str	r5, [r3, #60]	; 0x3c

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800172c:	f7ff fdad 	bl	800128a <HAL_DMA_GetError>
 8001730:	2802      	cmp	r0, #2
 8001732:	d011      	beq.n	8001758 <I2C_DMAError+0x3a>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001734:	6822      	ldr	r2, [r4, #0]
 8001736:	6813      	ldr	r3, [r2, #0]
 8001738:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800173c:	6013      	str	r3, [r2, #0]

    hi2c->XferCount = 0U;

    hi2c->State = HAL_I2C_STATE_READY;
 800173e:	2320      	movs	r3, #32
    hi2c->XferCount = 0U;
 8001740:	8565      	strh	r5, [r4, #42]	; 0x2a
    hi2c->State = HAL_I2C_STATE_READY;
 8001742:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001746:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800174a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800174c:	f043 0310 	orr.w	r3, r3, #16
 8001750:	6423      	str	r3, [r4, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8001752:	4620      	mov	r0, r4
 8001754:	f7ff ffe2 	bl	800171c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001758:	bd38      	pop	{r3, r4, r5, pc}

0800175a <I2C_DMAXferCplt>:
{
 800175a:	b570      	push	{r4, r5, r6, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800175c:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800175e:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001760:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001764:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001768:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800176a:	685d      	ldr	r5, [r3, #4]
  hi2c->hdmatx->XferCpltCallback = NULL;
 800176c:	6b66      	ldr	r6, [r4, #52]	; 0x34
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800176e:	f425 7540 	bic.w	r5, r5, #768	; 0x300
 8001772:	605d      	str	r5, [r3, #4]
  hi2c->hdmatx->XferCpltCallback = NULL;
 8001774:	2500      	movs	r5, #0
 8001776:	63f5      	str	r5, [r6, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 8001778:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800177a:	b2d2      	uxtb	r2, r2
  hi2c->hdmarx->XferCpltCallback = NULL;
 800177c:	63f5      	str	r5, [r6, #60]	; 0x3c
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800177e:	f002 0521 	and.w	r5, r2, #33	; 0x21
 8001782:	2d21      	cmp	r5, #33	; 0x21
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001784:	b2c0      	uxtb	r0, r0
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8001786:	d005      	beq.n	8001794 <I2C_DMAXferCplt+0x3a>
 8001788:	f002 0522 	and.w	r5, r2, #34	; 0x22
 800178c:	2d22      	cmp	r5, #34	; 0x22
 800178e:	d123      	bne.n	80017d8 <I2C_DMAXferCplt+0x7e>
 8001790:	2820      	cmp	r0, #32
 8001792:	d121      	bne.n	80017d8 <I2C_DMAXferCplt+0x7e>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001794:	6859      	ldr	r1, [r3, #4]
 8001796:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800179a:	6059      	str	r1, [r3, #4]
    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800179c:	2a29      	cmp	r2, #41	; 0x29
    hi2c->XferCount = 0U;
 800179e:	f04f 0300 	mov.w	r3, #0
 80017a2:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80017a4:	d10d      	bne.n	80017c2 <I2C_DMAXferCplt+0x68>
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80017a6:	2321      	movs	r3, #33	; 0x21
 80017a8:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80017aa:	2328      	movs	r3, #40	; 0x28
 80017ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80017b0:	4620      	mov	r0, r4
 80017b2:	f7ff ffad 	bl	8001710 <HAL_I2C_SlaveTxCpltCallback>
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80017b6:	6822      	ldr	r2, [r4, #0]
 80017b8:	6853      	ldr	r3, [r2, #4]
 80017ba:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80017be:	6053      	str	r3, [r2, #4]
}
 80017c0:	bd70      	pop	{r4, r5, r6, pc}
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80017c2:	2a2a      	cmp	r2, #42	; 0x2a
 80017c4:	d1f7      	bne.n	80017b6 <I2C_DMAXferCplt+0x5c>
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80017c6:	2322      	movs	r3, #34	; 0x22
 80017c8:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80017ca:	2328      	movs	r3, #40	; 0x28
 80017cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80017d0:	4620      	mov	r0, r4
 80017d2:	f7ff ff9e 	bl	8001712 <HAL_I2C_SlaveRxCpltCallback>
 80017d6:	e7ee      	b.n	80017b6 <I2C_DMAXferCplt+0x5c>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80017d8:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80017dc:	2a00      	cmp	r2, #0
 80017de:	d0ef      	beq.n	80017c0 <I2C_DMAXferCplt+0x66>
    if (hi2c->XferCount == (uint16_t)1)
 80017e0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80017e2:	b292      	uxth	r2, r2
 80017e4:	2a01      	cmp	r2, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017e6:	bf02      	ittt	eq
 80017e8:	681a      	ldreq	r2, [r3, #0]
 80017ea:	f422 6280 	biceq.w	r2, r2, #1024	; 0x400
 80017ee:	601a      	streq	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80017f0:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80017f2:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80017f6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80017fa:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80017fc:	d006      	beq.n	800180c <I2C_DMAXferCplt+0xb2>
 80017fe:	2908      	cmp	r1, #8
 8001800:	d004      	beq.n	800180c <I2C_DMAXferCplt+0xb2>
 8001802:	f1b1 4f2a 	cmp.w	r1, #2852126720	; 0xaa000000
 8001806:	d001      	beq.n	800180c <I2C_DMAXferCplt+0xb2>
 8001808:	2920      	cmp	r1, #32
 800180a:	d103      	bne.n	8001814 <I2C_DMAXferCplt+0xba>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001812:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800181a:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001822:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8001824:	2300      	movs	r3, #0
 8001826:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001828:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800182a:	b11b      	cbz	r3, 8001834 <I2C_DMAXferCplt+0xda>
      HAL_I2C_ErrorCallback(hi2c);
 800182c:	4620      	mov	r0, r4
 800182e:	f7ff ff75 	bl	800171c <HAL_I2C_ErrorCallback>
 8001832:	e7c5      	b.n	80017c0 <I2C_DMAXferCplt+0x66>
      hi2c->State = HAL_I2C_STATE_READY;
 8001834:	2220      	movs	r2, #32
 8001836:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800183a:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800183e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001842:	2a40      	cmp	r2, #64	; 0x40
 8001844:	d104      	bne.n	8001850 <I2C_DMAXferCplt+0xf6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001846:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8001848:	4620      	mov	r0, r4
 800184a:	f7ff ff66 	bl	800171a <HAL_I2C_MemRxCpltCallback>
 800184e:	e7b7      	b.n	80017c0 <I2C_DMAXferCplt+0x66>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001850:	2312      	movs	r3, #18
 8001852:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8001854:	4620      	mov	r0, r4
 8001856:	f7ff ff5a 	bl	800170e <HAL_I2C_MasterRxCpltCallback>
}
 800185a:	e7b1      	b.n	80017c0 <I2C_DMAXferCplt+0x66>

0800185c <HAL_I2C_AbortCpltCallback>:
 800185c:	4770      	bx	lr

0800185e <I2C_DMAAbort>:
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800185e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
  hi2c->hdmarx->XferCpltCallback = NULL;

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001860:	6802      	ldr	r2, [r0, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001862:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
{
 8001866:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001868:	6814      	ldr	r4, [r2, #0]
  hi2c->hdmatx->XferCpltCallback = NULL;
 800186a:	6b46      	ldr	r6, [r0, #52]	; 0x34
  hi2c->hdmarx->XferCpltCallback = NULL;
 800186c:	6b85      	ldr	r5, [r0, #56]	; 0x38
  hi2c->hdmatx->XferCpltCallback = NULL;
 800186e:	2300      	movs	r3, #0
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001870:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
  hi2c->hdmatx->XferCpltCallback = NULL;
 8001874:	63f3      	str	r3, [r6, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 8001876:	63eb      	str	r3, [r5, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001878:	6014      	str	r4, [r2, #0]

  hi2c->XferCount = 0U;
 800187a:	8543      	strh	r3, [r0, #42]	; 0x2a
  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
  hi2c->hdmarx->XferAbortCallback = NULL;

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800187c:	6814      	ldr	r4, [r2, #0]
  hi2c->hdmatx->XferAbortCallback = NULL;
 800187e:	6533      	str	r3, [r6, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 8001880:	f024 0401 	bic.w	r4, r4, #1
  hi2c->hdmarx->XferAbortCallback = NULL;
 8001884:	652b      	str	r3, [r5, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 8001886:	6014      	str	r4, [r2, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001888:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800188c:	2c60      	cmp	r4, #96	; 0x60
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800188e:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001890:	d108      	bne.n	80018a4 <I2C_DMAAbort+0x46>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8001892:	2220      	movs	r2, #32
 8001894:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001898:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800189c:	6403      	str	r3, [r0, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800189e:	f7ff ffdd 	bl	800185c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80018a2:	bd70      	pop	{r4, r5, r6, pc}
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80018a4:	f001 0128 	and.w	r1, r1, #40	; 0x28
 80018a8:	2928      	cmp	r1, #40	; 0x28
 80018aa:	d10d      	bne.n	80018c8 <I2C_DMAAbort+0x6a>
      __HAL_I2C_ENABLE(hi2c);
 80018ac:	6814      	ldr	r4, [r2, #0]
 80018ae:	f044 0401 	orr.w	r4, r4, #1
 80018b2:	6014      	str	r4, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018b4:	6814      	ldr	r4, [r2, #0]
 80018b6:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 80018ba:	6014      	str	r4, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80018bc:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80018be:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
    HAL_I2C_ErrorCallback(hi2c);
 80018c2:	f7ff ff2b 	bl	800171c <HAL_I2C_ErrorCallback>
}
 80018c6:	e7ec      	b.n	80018a2 <I2C_DMAAbort+0x44>
      hi2c->State = HAL_I2C_STATE_READY;
 80018c8:	2220      	movs	r2, #32
 80018ca:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ce:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 80018d2:	e7f6      	b.n	80018c2 <I2C_DMAAbort+0x64>

080018d4 <I2C_ITError>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80018d4:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80018d8:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 80018dc:	6803      	ldr	r3, [r0, #0]
 80018de:	2910      	cmp	r1, #16
{
 80018e0:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80018e2:	b2d2      	uxtb	r2, r2
{
 80018e4:	4604      	mov	r4, r0
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80018e6:	d105      	bne.n	80018f4 <I2C_ITError+0x20>
 80018e8:	2a22      	cmp	r2, #34	; 0x22
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80018ea:	bf02      	ittt	eq
 80018ec:	6819      	ldreq	r1, [r3, #0]
 80018ee:	f421 6100 	biceq.w	r1, r1, #2048	; 0x800
 80018f2:	6019      	streq	r1, [r3, #0]
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80018f4:	f002 0128 	and.w	r1, r2, #40	; 0x28
 80018f8:	2928      	cmp	r1, #40	; 0x28
 80018fa:	d13a      	bne.n	8001972 <I2C_ITError+0x9e>
    hi2c->PreviousState = I2C_STATE_NONE;
 80018fc:	2200      	movs	r2, #0
 80018fe:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001900:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 800190a:	d059      	beq.n	80019c0 <I2C_ITError+0xec>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800190c:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800190e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001910:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001914:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8001916:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800191a:	2b01      	cmp	r3, #1
 800191c:	4b3c      	ldr	r3, [pc, #240]	; (8001a10 <I2C_ITError+0x13c>)
 800191e:	d035      	beq.n	800198c <I2C_ITError+0xb8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001920:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001922:	f7ff fbdf 	bl	80010e4 <HAL_DMA_Abort_IT>
 8001926:	b150      	cbz	r0, 800193e <I2C_ITError+0x6a>
        __HAL_I2C_DISABLE(hi2c);
 8001928:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800192a:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 800192c:	6813      	ldr	r3, [r2, #0]
 800192e:	f023 0301 	bic.w	r3, r3, #1
 8001932:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8001934:	2320      	movs	r3, #32
 8001936:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800193a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800193c:	4798      	blx	r3
  CurrentState = hi2c->State;
 800193e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8001942:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001944:	0752      	lsls	r2, r2, #29
  CurrentState = hi2c->State;
 8001946:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8001948:	d512      	bpl.n	8001970 <I2C_ITError+0x9c>
 800194a:	2b28      	cmp	r3, #40	; 0x28
 800194c:	d110      	bne.n	8001970 <I2C_ITError+0x9c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800194e:	6822      	ldr	r2, [r4, #0]
 8001950:	6853      	ldr	r3, [r2, #4]
 8001952:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001956:	6053      	str	r3, [r2, #4]
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001958:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <I2C_ITError+0x140>)
 800195a:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State         = HAL_I2C_STATE_READY;
 800195c:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 800195e:	2300      	movs	r3, #0
 8001960:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8001962:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 8001964:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001968:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 800196c:	f7ff fed3 	bl	8001716 <HAL_I2C_ListenCpltCallback>
}
 8001970:	bd10      	pop	{r4, pc}
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8001972:	6859      	ldr	r1, [r3, #4]
 8001974:	0509      	lsls	r1, r1, #20
 8001976:	d404      	bmi.n	8001982 <I2C_ITError+0xae>
 8001978:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State = HAL_I2C_STATE_READY;
 800197a:	bf1c      	itt	ne
 800197c:	2220      	movne	r2, #32
 800197e:	f884 203d 	strbne.w	r2, [r4, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8001982:	2200      	movs	r2, #0
 8001984:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001986:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 800198a:	e7bb      	b.n	8001904 <I2C_ITError+0x30>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800198c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800198e:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001990:	f7ff fba8 	bl	80010e4 <HAL_DMA_Abort_IT>
 8001994:	2800      	cmp	r0, #0
 8001996:	d0d2      	beq.n	800193e <I2C_ITError+0x6a>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001998:	6823      	ldr	r3, [r4, #0]
 800199a:	695a      	ldr	r2, [r3, #20]
 800199c:	0652      	lsls	r2, r2, #25
 800199e:	d505      	bpl.n	80019ac <I2C_ITError+0xd8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019a0:	691a      	ldr	r2, [r3, #16]
 80019a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019a4:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80019a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019a8:	3301      	adds	r3, #1
 80019aa:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 80019ac:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80019ae:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 80019b0:	6813      	ldr	r3, [r2, #0]
 80019b2:	f023 0301 	bic.w	r3, r3, #1
 80019b6:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80019b8:	2320      	movs	r3, #32
 80019ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80019be:	e7bc      	b.n	800193a <I2C_ITError+0x66>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80019c0:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80019c4:	2960      	cmp	r1, #96	; 0x60
 80019c6:	d115      	bne.n	80019f4 <I2C_ITError+0x120>
    hi2c->State = HAL_I2C_STATE_READY;
 80019c8:	2120      	movs	r1, #32
 80019ca:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019ce:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80019d0:	695a      	ldr	r2, [r3, #20]
 80019d2:	0650      	lsls	r0, r2, #25
 80019d4:	d505      	bpl.n	80019e2 <I2C_ITError+0x10e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019d6:	691a      	ldr	r2, [r3, #16]
 80019d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019da:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80019dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019de:	3301      	adds	r3, #1
 80019e0:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 80019e2:	6822      	ldr	r2, [r4, #0]
 80019e4:	6813      	ldr	r3, [r2, #0]
 80019e6:	f023 0301 	bic.w	r3, r3, #1
 80019ea:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80019ec:	4620      	mov	r0, r4
 80019ee:	f7ff ff35 	bl	800185c <HAL_I2C_AbortCpltCallback>
 80019f2:	e7a4      	b.n	800193e <I2C_ITError+0x6a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80019f4:	695a      	ldr	r2, [r3, #20]
 80019f6:	0651      	lsls	r1, r2, #25
 80019f8:	d505      	bpl.n	8001a06 <I2C_ITError+0x132>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019fa:	691a      	ldr	r2, [r3, #16]
 80019fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019fe:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001a00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a02:	3301      	adds	r3, #1
 8001a04:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8001a06:	4620      	mov	r0, r4
 8001a08:	f7ff fe88 	bl	800171c <HAL_I2C_ErrorCallback>
 8001a0c:	e797      	b.n	800193e <I2C_ITError+0x6a>
 8001a0e:	bf00      	nop
 8001a10:	0800185f 	.word	0x0800185f
 8001a14:	ffff0000 	.word	0xffff0000

08001a18 <HAL_I2C_EV_IRQHandler>:
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001a18:	6803      	ldr	r3, [r0, #0]
{
 8001a1a:	b530      	push	{r4, r5, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001a1c:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001a1e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001a20:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
{
 8001a24:	4604      	mov	r4, r0
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001a26:	b2c9      	uxtb	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001a28:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001a2c:	2910      	cmp	r1, #16
{
 8001a2e:	b08d      	sub	sp, #52	; 0x34
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001a30:	b2c0      	uxtb	r0, r0
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001a32:	d002      	beq.n	8001a3a <HAL_I2C_EV_IRQHandler+0x22>
 8001a34:	2940      	cmp	r1, #64	; 0x40
 8001a36:	f040 82b0 	bne.w	8001f9a <HAL_I2C_EV_IRQHandler+0x582>
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001a3a:	6999      	ldr	r1, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001a3c:	6958      	ldr	r0, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001a3e:	f010 0f01 	tst.w	r0, #1
 8001a42:	d107      	bne.n	8001a54 <HAL_I2C_EV_IRQHandler+0x3c>
 8001a44:	f5b5 0f2a 	cmp.w	r5, #11141120	; 0xaa0000
 8001a48:	d002      	beq.n	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
 8001a4a:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 8001a4e:	d152      	bne.n	8001af6 <HAL_I2C_EV_IRQHandler+0xde>
}
 8001a50:	b00d      	add	sp, #52	; 0x34
 8001a52:	bd30      	pop	{r4, r5, pc}
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a54:	0595      	lsls	r5, r2, #22
 8001a56:	d54e      	bpl.n	8001af6 <HAL_I2C_EV_IRQHandler+0xde>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8001a58:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001a5a:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8001a5e:	d10c      	bne.n	8001a7a <HAL_I2C_EV_IRQHandler+0x62>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8001a60:	2201      	movs	r2, #1
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8001a62:	62e2      	str	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001a64:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8001a68:	2a40      	cmp	r2, #64	; 0x40
 8001a6a:	d111      	bne.n	8001a90 <HAL_I2C_EV_IRQHandler+0x78>
    if (hi2c->EventCount == 0U)
 8001a6c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001a6e:	b952      	cbnz	r2, 8001a86 <HAL_I2C_EV_IRQHandler+0x6e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001a70:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001a72:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001a76:	611a      	str	r2, [r3, #16]
 8001a78:	e7ea      	b.n	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8001a7a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001a7c:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
 8001a80:	d1f0      	bne.n	8001a64 <HAL_I2C_EV_IRQHandler+0x4c>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8001a82:	2208      	movs	r2, #8
 8001a84:	e7ed      	b.n	8001a62 <HAL_I2C_EV_IRQHandler+0x4a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001a86:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001a88:	f042 0201 	orr.w	r2, r2, #1
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	e7f2      	b.n	8001a76 <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a90:	6922      	ldr	r2, [r4, #16]
 8001a92:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8001a96:	d11b      	bne.n	8001ad0 <HAL_I2C_EV_IRQHandler+0xb8>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001a98:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001a9c:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001a9e:	6c62      	ldr	r2, [r4, #68]	; 0x44
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001aa0:	d112      	bne.n	8001ac8 <HAL_I2C_EV_IRQHandler+0xb0>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001aa2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001aa6:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8001aa8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001aaa:	b912      	cbnz	r2, 8001ab2 <HAL_I2C_EV_IRQHandler+0x9a>
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8001aac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001aae:	2900      	cmp	r1, #0
 8001ab0:	d0ce      	beq.n	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8001ab2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ab4:	b91a      	cbnz	r2, 8001abe <HAL_I2C_EV_IRQHandler+0xa6>
 8001ab6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001ab8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001aba:	2a00      	cmp	r2, #0
 8001abc:	d0c8      	beq.n	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	e7c3      	b.n	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001ac8:	f042 0201 	orr.w	r2, r2, #1
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	e7ea      	b.n	8001aa6 <HAL_I2C_EV_IRQHandler+0x8e>
      if (hi2c->EventCount == 0U)
 8001ad0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001ad2:	b932      	cbnz	r2, 8001ae2 <HAL_I2C_EV_IRQHandler+0xca>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001ad4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001ad6:	11d2      	asrs	r2, r2, #7
 8001ad8:	f002 0206 	and.w	r2, r2, #6
 8001adc:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8001ae0:	e7c9      	b.n	8001a76 <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 8001ae2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001ae4:	2a01      	cmp	r2, #1
 8001ae6:	d1b3      	bne.n	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001ae8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001aea:	11d2      	asrs	r2, r2, #7
 8001aec:	f002 0206 	and.w	r2, r2, #6
 8001af0:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 8001af4:	e7bf      	b.n	8001a76 <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001af6:	0705      	lsls	r5, r0, #28
 8001af8:	d503      	bpl.n	8001b02 <HAL_I2C_EV_IRQHandler+0xea>
 8001afa:	0595      	lsls	r5, r2, #22
 8001afc:	d501      	bpl.n	8001b02 <HAL_I2C_EV_IRQHandler+0xea>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001afe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001b00:	e7e4      	b.n	8001acc <HAL_I2C_EV_IRQHandler+0xb4>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b02:	0785      	lsls	r5, r0, #30
 8001b04:	f140 80dd 	bpl.w	8001cc2 <HAL_I2C_EV_IRQHandler+0x2aa>
 8001b08:	0595      	lsls	r5, r2, #22
 8001b0a:	f140 80da 	bpl.w	8001cc2 <HAL_I2C_EV_IRQHandler+0x2aa>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001b0e:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8001b12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8001b14:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b16:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8001b1a:	2822      	cmp	r0, #34	; 0x22
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001b1c:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b1e:	f040 80c8 	bne.w	8001cb2 <HAL_I2C_EV_IRQHandler+0x29a>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001b22:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001b24:	b940      	cbnz	r0, 8001b38 <HAL_I2C_EV_IRQHandler+0x120>
 8001b26:	2940      	cmp	r1, #64	; 0x40
 8001b28:	d106      	bne.n	8001b38 <HAL_I2C_EV_IRQHandler+0x120>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b2a:	9001      	str	r0, [sp, #4]
 8001b2c:	695a      	ldr	r2, [r3, #20]
 8001b2e:	9201      	str	r2, [sp, #4]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	9301      	str	r3, [sp, #4]
 8001b34:	9b01      	ldr	r3, [sp, #4]
 8001b36:	e78b      	b.n	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001b38:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001b3a:	b981      	cbnz	r1, 8001b5e <HAL_I2C_EV_IRQHandler+0x146>
 8001b3c:	6920      	ldr	r0, [r4, #16]
 8001b3e:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8001b42:	d10c      	bne.n	8001b5e <HAL_I2C_EV_IRQHandler+0x146>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b44:	9102      	str	r1, [sp, #8]
 8001b46:	695a      	ldr	r2, [r3, #20]
 8001b48:	9202      	str	r2, [sp, #8]
 8001b4a:	699a      	ldr	r2, [r3, #24]
 8001b4c:	9202      	str	r2, [sp, #8]
 8001b4e:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b56:	601a      	str	r2, [r3, #0]
            hi2c->EventCount++;
 8001b58:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	e028      	b.n	8001bb0 <HAL_I2C_EV_IRQHandler+0x198>
      if (hi2c->XferCount == 0U)
 8001b5e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8001b60:	b289      	uxth	r1, r1
 8001b62:	b951      	cbnz	r1, 8001b7a <HAL_I2C_EV_IRQHandler+0x162>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b64:	9103      	str	r1, [sp, #12]
 8001b66:	695a      	ldr	r2, [r3, #20]
 8001b68:	9203      	str	r2, [sp, #12]
 8001b6a:	699a      	ldr	r2, [r3, #24]
 8001b6c:	9203      	str	r2, [sp, #12]
 8001b6e:	9a03      	ldr	r2, [sp, #12]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	e019      	b.n	8001bae <HAL_I2C_EV_IRQHandler+0x196>
      else if (hi2c->XferCount == 1U)
 8001b7a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8001b7c:	b289      	uxth	r1, r1
 8001b7e:	2901      	cmp	r1, #1
 8001b80:	d14a      	bne.n	8001c18 <HAL_I2C_EV_IRQHandler+0x200>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8001b82:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001b86:	d11c      	bne.n	8001bc2 <HAL_I2C_EV_IRQHandler+0x1aa>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b8e:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8001b96:	d00d      	beq.n	8001bb4 <HAL_I2C_EV_IRQHandler+0x19c>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b9e:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	9204      	str	r2, [sp, #16]
 8001ba4:	695a      	ldr	r2, [r3, #20]
 8001ba6:	9204      	str	r2, [sp, #16]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	9304      	str	r3, [sp, #16]
 8001bac:	9b04      	ldr	r3, [sp, #16]
      hi2c->EventCount = 0U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	6523      	str	r3, [r4, #80]	; 0x50
 8001bb2:	e74d      	b.n	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bb4:	9205      	str	r2, [sp, #20]
 8001bb6:	695a      	ldr	r2, [r3, #20]
 8001bb8:	9205      	str	r2, [sp, #20]
 8001bba:	699a      	ldr	r2, [r3, #24]
 8001bbc:	9205      	str	r2, [sp, #20]
 8001bbe:	9a05      	ldr	r2, [sp, #20]
 8001bc0:	e7d6      	b.n	8001b70 <HAL_I2C_EV_IRQHandler+0x158>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8001bc2:	2a08      	cmp	r2, #8
 8001bc4:	d01c      	beq.n	8001c00 <HAL_I2C_EV_IRQHandler+0x1e8>
 8001bc6:	2a20      	cmp	r2, #32
 8001bc8:	d01a      	beq.n	8001c00 <HAL_I2C_EV_IRQHandler+0x1e8>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8001bca:	2d12      	cmp	r5, #18
 8001bcc:	d10d      	bne.n	8001bea <HAL_I2C_EV_IRQHandler+0x1d2>
 8001bce:	2a01      	cmp	r2, #1
 8001bd0:	d116      	bne.n	8001c00 <HAL_I2C_EV_IRQHandler+0x1e8>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bd8:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	9206      	str	r2, [sp, #24]
 8001bde:	695a      	ldr	r2, [r3, #20]
 8001be0:	9206      	str	r2, [sp, #24]
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	9306      	str	r3, [sp, #24]
 8001be6:	9b06      	ldr	r3, [sp, #24]
 8001be8:	e7e1      	b.n	8001bae <HAL_I2C_EV_IRQHandler+0x196>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001bea:	2a10      	cmp	r2, #16
 8001bec:	d8f1      	bhi.n	8001bd2 <HAL_I2C_EV_IRQHandler+0x1ba>
 8001bee:	49a0      	ldr	r1, [pc, #640]	; (8001e70 <HAL_I2C_EV_IRQHandler+0x458>)
 8001bf0:	fa21 f202 	lsr.w	r2, r1, r2
 8001bf4:	07d0      	lsls	r0, r2, #31
 8001bf6:	d5ec      	bpl.n	8001bd2 <HAL_I2C_EV_IRQHandler+0x1ba>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001bfe:	e7eb      	b.n	8001bd8 <HAL_I2C_EV_IRQHandler+0x1c0>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c06:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	9207      	str	r2, [sp, #28]
 8001c0c:	695a      	ldr	r2, [r3, #20]
 8001c0e:	9207      	str	r2, [sp, #28]
 8001c10:	699a      	ldr	r2, [r3, #24]
 8001c12:	9207      	str	r2, [sp, #28]
 8001c14:	9a07      	ldr	r2, [sp, #28]
 8001c16:	e7ab      	b.n	8001b70 <HAL_I2C_EV_IRQHandler+0x158>
      else if (hi2c->XferCount == 2U)
 8001c18:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8001c1a:	b289      	uxth	r1, r1
 8001c1c:	2902      	cmp	r1, #2
 8001c1e:	d12a      	bne.n	8001c76 <HAL_I2C_EV_IRQHandler+0x25e>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001c20:	2a10      	cmp	r2, #16
 8001c22:	d803      	bhi.n	8001c2c <HAL_I2C_EV_IRQHandler+0x214>
 8001c24:	4992      	ldr	r1, [pc, #584]	; (8001e70 <HAL_I2C_EV_IRQHandler+0x458>)
 8001c26:	40d1      	lsrs	r1, r2
 8001c28:	07c9      	lsls	r1, r1, #31
 8001c2a:	d420      	bmi.n	8001c6e <HAL_I2C_EV_IRQHandler+0x256>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c2c:	6819      	ldr	r1, [r3, #0]
 8001c2e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001c32:	6019      	str	r1, [r3, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c34:	6819      	ldr	r1, [r3, #0]
 8001c36:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c3a:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001c3c:	6859      	ldr	r1, [r3, #4]
 8001c3e:	050d      	lsls	r5, r1, #20
 8001c40:	d50d      	bpl.n	8001c5e <HAL_I2C_EV_IRQHandler+0x246>
 8001c42:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001c46:	d006      	beq.n	8001c56 <HAL_I2C_EV_IRQHandler+0x23e>
 8001c48:	1e51      	subs	r1, r2, #1
 8001c4a:	291f      	cmp	r1, #31
 8001c4c:	d807      	bhi.n	8001c5e <HAL_I2C_EV_IRQHandler+0x246>
 8001c4e:	4a89      	ldr	r2, [pc, #548]	; (8001e74 <HAL_I2C_EV_IRQHandler+0x45c>)
 8001c50:	40ca      	lsrs	r2, r1
 8001c52:	07d0      	lsls	r0, r2, #31
 8001c54:	d503      	bpl.n	8001c5e <HAL_I2C_EV_IRQHandler+0x246>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001c5c:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	9208      	str	r2, [sp, #32]
 8001c62:	695a      	ldr	r2, [r3, #20]
 8001c64:	9208      	str	r2, [sp, #32]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	9308      	str	r3, [sp, #32]
 8001c6a:	9b08      	ldr	r3, [sp, #32]
 8001c6c:	e79f      	b.n	8001bae <HAL_I2C_EV_IRQHandler+0x196>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c6e:	6819      	ldr	r1, [r3, #0]
 8001c70:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001c74:	e7e1      	b.n	8001c3a <HAL_I2C_EV_IRQHandler+0x222>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c76:	6819      	ldr	r1, [r3, #0]
 8001c78:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001c7c:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001c7e:	6859      	ldr	r1, [r3, #4]
 8001c80:	0509      	lsls	r1, r1, #20
 8001c82:	d50e      	bpl.n	8001ca2 <HAL_I2C_EV_IRQHandler+0x28a>
 8001c84:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001c88:	d007      	beq.n	8001c9a <HAL_I2C_EV_IRQHandler+0x282>
 8001c8a:	3a01      	subs	r2, #1
 8001c8c:	2a1f      	cmp	r2, #31
 8001c8e:	d808      	bhi.n	8001ca2 <HAL_I2C_EV_IRQHandler+0x28a>
 8001c90:	4978      	ldr	r1, [pc, #480]	; (8001e74 <HAL_I2C_EV_IRQHandler+0x45c>)
 8001c92:	fa21 f202 	lsr.w	r2, r1, r2
 8001c96:	07d2      	lsls	r2, r2, #31
 8001c98:	d503      	bpl.n	8001ca2 <HAL_I2C_EV_IRQHandler+0x28a>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ca0:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	9209      	str	r2, [sp, #36]	; 0x24
 8001ca6:	695a      	ldr	r2, [r3, #20]
 8001ca8:	9209      	str	r2, [sp, #36]	; 0x24
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	9309      	str	r3, [sp, #36]	; 0x24
 8001cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001cb0:	e77d      	b.n	8001bae <HAL_I2C_EV_IRQHandler+0x196>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	920a      	str	r2, [sp, #40]	; 0x28
 8001cb6:	695a      	ldr	r2, [r3, #20]
 8001cb8:	920a      	str	r2, [sp, #40]	; 0x28
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	930a      	str	r3, [sp, #40]	; 0x28
 8001cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001cc0:	e6c6      	b.n	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001cc2:	f011 0f04 	tst.w	r1, #4
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001cc6:	6859      	ldr	r1, [r3, #4]
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001cc8:	f000 80a8 	beq.w	8001e1c <HAL_I2C_EV_IRQHandler+0x404>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001ccc:	050d      	lsls	r5, r1, #20
 8001cce:	f53f aebf 	bmi.w	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
 8001cd2:	f3c0 0180 	ubfx	r1, r0, #2, #1
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001cd6:	0600      	lsls	r0, r0, #24
 8001cd8:	d569      	bpl.n	8001dae <HAL_I2C_EV_IRQHandler+0x396>
 8001cda:	0555      	lsls	r5, r2, #21
 8001cdc:	d567      	bpl.n	8001dae <HAL_I2C_EV_IRQHandler+0x396>
 8001cde:	2900      	cmp	r1, #0
 8001ce0:	d168      	bne.n	8001db4 <HAL_I2C_EV_IRQHandler+0x39c>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001ce2:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001ce6:	8d25      	ldrh	r5, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001ce8:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001cec:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001cee:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001cf0:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001cf2:	b9c5      	cbnz	r5, 8001d26 <HAL_I2C_EV_IRQHandler+0x30e>
 8001cf4:	2a21      	cmp	r2, #33	; 0x21
 8001cf6:	d118      	bne.n	8001d2a <HAL_I2C_EV_IRQHandler+0x312>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001cf8:	2808      	cmp	r0, #8
 8001cfa:	d078      	beq.n	8001dee <HAL_I2C_EV_IRQHandler+0x3d6>
 8001cfc:	2820      	cmp	r0, #32
 8001cfe:	d076      	beq.n	8001dee <HAL_I2C_EV_IRQHandler+0x3d6>
 8001d00:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8001d04:	d073      	beq.n	8001dee <HAL_I2C_EV_IRQHandler+0x3d6>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d0c:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001d0e:	2311      	movs	r3, #17
 8001d10:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001d18:	2320      	movs	r3, #32
 8001d1a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d1e:	4620      	mov	r0, r4
 8001d20:	f7ff fcf4 	bl	800170c <HAL_I2C_MasterTxCpltCallback>
 8001d24:	e694      	b.n	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001d26:	2a21      	cmp	r2, #33	; 0x21
 8001d28:	d005      	beq.n	8001d36 <HAL_I2C_EV_IRQHandler+0x31e>
 8001d2a:	2940      	cmp	r1, #64	; 0x40
 8001d2c:	f47f ae90 	bne.w	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001d30:	2a22      	cmp	r2, #34	; 0x22
 8001d32:	f47f ae8d 	bne.w	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount == 0U)
 8001d36:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001d38:	b292      	uxth	r2, r2
 8001d3a:	b91a      	cbnz	r2, 8001d44 <HAL_I2C_EV_IRQHandler+0x32c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d42:	e6bf      	b.n	8001ac4 <HAL_I2C_EV_IRQHandler+0xac>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d44:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8001d48:	2a40      	cmp	r2, #64	; 0x40
 8001d4a:	d126      	bne.n	8001d9a <HAL_I2C_EV_IRQHandler+0x382>
        if (hi2c->EventCount == 0U)
 8001d4c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001d4e:	b962      	cbnz	r2, 8001d6a <HAL_I2C_EV_IRQHandler+0x352>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001d50:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8001d52:	2a01      	cmp	r2, #1
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001d54:	6ca2      	ldr	r2, [r4, #72]	; 0x48
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001d56:	d104      	bne.n	8001d62 <HAL_I2C_EV_IRQHandler+0x34a>
 8001d58:	b2d2      	uxtb	r2, r2
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001d5a:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 8001d5c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001d5e:	3302      	adds	r3, #2
 8001d60:	e726      	b.n	8001bb0 <HAL_I2C_EV_IRQHandler+0x198>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001d62:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001d66:	611a      	str	r2, [r3, #16]
 8001d68:	e6f6      	b.n	8001b58 <HAL_I2C_EV_IRQHandler+0x140>
        else if (hi2c->EventCount == 1U)
 8001d6a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001d6c:	2a01      	cmp	r2, #1
 8001d6e:	d102      	bne.n	8001d76 <HAL_I2C_EV_IRQHandler+0x35e>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001d70:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	e7f7      	b.n	8001d66 <HAL_I2C_EV_IRQHandler+0x34e>
        else if (hi2c->EventCount == 2U)
 8001d76:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001d78:	2a02      	cmp	r2, #2
 8001d7a:	f47f ae69 	bne.w	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d7e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001d82:	2a22      	cmp	r2, #34	; 0x22
 8001d84:	d104      	bne.n	8001d90 <HAL_I2C_EV_IRQHandler+0x378>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	e65f      	b.n	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001d90:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001d94:	2a21      	cmp	r2, #33	; 0x21
 8001d96:	f47f ae5b 	bne.w	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d9a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d9c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001da0:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 8001da2:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8001da4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001da6:	3b01      	subs	r3, #1
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001dac:	e650      	b.n	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dae:	2900      	cmp	r1, #0
 8001db0:	f43f ae4e 	beq.w	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
 8001db4:	0590      	lsls	r0, r2, #22
 8001db6:	f57f ae4b 	bpl.w	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001dba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001dbc:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001dc0:	2a21      	cmp	r2, #33	; 0x21
 8001dc2:	f47f ae45 	bne.w	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount != 0U)
 8001dc6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001dc8:	b292      	uxth	r2, r2
 8001dca:	2a00      	cmp	r2, #0
 8001dcc:	d1e5      	bne.n	8001d9a <HAL_I2C_EV_IRQHandler+0x382>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001dce:	2908      	cmp	r1, #8
 8001dd0:	d00d      	beq.n	8001dee <HAL_I2C_EV_IRQHandler+0x3d6>
 8001dd2:	2920      	cmp	r1, #32
 8001dd4:	d00b      	beq.n	8001dee <HAL_I2C_EV_IRQHandler+0x3d6>
 8001dd6:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8001dda:	d008      	beq.n	8001dee <HAL_I2C_EV_IRQHandler+0x3d6>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ddc:	6859      	ldr	r1, [r3, #4]
 8001dde:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8001de2:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001de4:	2311      	movs	r3, #17
 8001de6:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8001dec:	e794      	b.n	8001d18 <HAL_I2C_EV_IRQHandler+0x300>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001df4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dfc:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001dfe:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8001e00:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001e02:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001e04:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e08:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e0c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e10:	2a40      	cmp	r2, #64	; 0x40
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001e12:	4620      	mov	r0, r4
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e14:	d184      	bne.n	8001d20 <HAL_I2C_EV_IRQHandler+0x308>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001e16:	f7ff fc7f 	bl	8001718 <HAL_I2C_MemTxCpltCallback>
 8001e1a:	e619      	b.n	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001e1c:	0509      	lsls	r1, r1, #20
 8001e1e:	f53f ae17 	bmi.w	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e22:	0645      	lsls	r5, r0, #25
 8001e24:	f3c0 0180 	ubfx	r1, r0, #2, #1
 8001e28:	d54d      	bpl.n	8001ec6 <HAL_I2C_EV_IRQHandler+0x4ae>
 8001e2a:	0550      	lsls	r0, r2, #21
 8001e2c:	d54b      	bpl.n	8001ec6 <HAL_I2C_EV_IRQHandler+0x4ae>
 8001e2e:	2900      	cmp	r1, #0
 8001e30:	d14c      	bne.n	8001ecc <HAL_I2C_EV_IRQHandler+0x4b4>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e32:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001e36:	2a22      	cmp	r2, #34	; 0x22
 8001e38:	f47f ae0a 	bne.w	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
    tmp = hi2c->XferCount;
 8001e3c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001e3e:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8001e40:	2a03      	cmp	r2, #3
 8001e42:	d919      	bls.n	8001e78 <HAL_I2C_EV_IRQHandler+0x460>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e44:	691a      	ldr	r2, [r3, #16]
 8001e46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e48:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001e4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001e50:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e52:	3b01      	subs	r3, #1
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8001e58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	f47f adf7 	bne.w	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e62:	6822      	ldr	r2, [r4, #0]
 8001e64:	6853      	ldr	r3, [r2, #4]
 8001e66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e6a:	6053      	str	r3, [r2, #4]
 8001e6c:	e5f0      	b.n	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
 8001e6e:	bf00      	nop
 8001e70:	00010014 	.word	0x00010014
 8001e74:	80008081 	.word	0x80008081
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001e78:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001e7a:	2802      	cmp	r0, #2
 8001e7c:	f43f ade8 	beq.w	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
 8001e80:	2a01      	cmp	r2, #1
 8001e82:	f63f ade5 	bhi.w	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e8c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e94:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e96:	691a      	ldr	r2, [r3, #16]
 8001e98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e9a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001e9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001ea2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8001eaa:	2320      	movs	r3, #32
 8001eac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001eb0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb4:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001eb8:	2b40      	cmp	r3, #64	; 0x40
 8001eba:	d168      	bne.n	8001f8e <HAL_I2C_EV_IRQHandler+0x576>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001ebc:	6321      	str	r1, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	f7ff fc2b 	bl	800171a <HAL_I2C_MemRxCpltCallback>
 8001ec4:	e5c4      	b.n	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ec6:	2900      	cmp	r1, #0
 8001ec8:	f43f adc2 	beq.w	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
 8001ecc:	0592      	lsls	r2, r2, #22
 8001ece:	f57f adbf 	bpl.w	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ed2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8001ed4:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8001ed6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001ed8:	b280      	uxth	r0, r0
 8001eda:	2804      	cmp	r0, #4
 8001edc:	d109      	bne.n	8001ef2 <HAL_I2C_EV_IRQHandler+0x4da>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ee4:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8001eea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001eec:	3301      	adds	r3, #1
 8001eee:	6263      	str	r3, [r4, #36]	; 0x24
 8001ef0:	e758      	b.n	8001da4 <HAL_I2C_EV_IRQHandler+0x38c>
  else if (hi2c->XferCount == 3U)
 8001ef2:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8001ef4:	b280      	uxth	r0, r0
 8001ef6:	2803      	cmp	r0, #3
 8001ef8:	d10c      	bne.n	8001f14 <HAL_I2C_EV_IRQHandler+0x4fc>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001efa:	6858      	ldr	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001efc:	2a04      	cmp	r2, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001efe:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 8001f02:	6058      	str	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001f04:	d0ef      	beq.n	8001ee6 <HAL_I2C_EV_IRQHandler+0x4ce>
 8001f06:	2a02      	cmp	r2, #2
 8001f08:	d0ed      	beq.n	8001ee6 <HAL_I2C_EV_IRQHandler+0x4ce>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	e7e8      	b.n	8001ee6 <HAL_I2C_EV_IRQHandler+0x4ce>
  else if (hi2c->XferCount == 2U)
 8001f14:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8001f16:	b280      	uxth	r0, r0
 8001f18:	2802      	cmp	r0, #2
 8001f1a:	d1e4      	bne.n	8001ee6 <HAL_I2C_EV_IRQHandler+0x4ce>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001f1c:	2a01      	cmp	r2, #1
 8001f1e:	d001      	beq.n	8001f24 <HAL_I2C_EV_IRQHandler+0x50c>
 8001f20:	2a10      	cmp	r2, #16
 8001f22:	d128      	bne.n	8001f76 <HAL_I2C_EV_IRQHandler+0x55e>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f2a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8001f30:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f32:	1c53      	adds	r3, r2, #1
 8001f34:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8001f36:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f3e:	6823      	ldr	r3, [r4, #0]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 8001f44:	6a63      	ldr	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001f46:	6822      	ldr	r2, [r4, #0]
    hi2c->pBuffPtr++;
 8001f48:	3301      	adds	r3, #1
 8001f4a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8001f4c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001f54:	6853      	ldr	r3, [r2, #4]
 8001f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f5a:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001f5c:	2320      	movs	r3, #32
 8001f5e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f62:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8001f66:	2b40      	cmp	r3, #64	; 0x40
 8001f68:	f04f 0300 	mov.w	r3, #0
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f6c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f70:	d10d      	bne.n	8001f8e <HAL_I2C_EV_IRQHandler+0x576>
      hi2c->PreviousState = I2C_STATE_NONE;
 8001f72:	6323      	str	r3, [r4, #48]	; 0x30
 8001f74:	e7a3      	b.n	8001ebe <HAL_I2C_EV_IRQHandler+0x4a6>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001f76:	2a04      	cmp	r2, #4
 8001f78:	d001      	beq.n	8001f7e <HAL_I2C_EV_IRQHandler+0x566>
 8001f7a:	2a02      	cmp	r2, #2
 8001f7c:	d103      	bne.n	8001f86 <HAL_I2C_EV_IRQHandler+0x56e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f84:	e7d1      	b.n	8001f2a <HAL_I2C_EV_IRQHandler+0x512>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f8c:	e7cd      	b.n	8001f2a <HAL_I2C_EV_IRQHandler+0x512>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001f8e:	2312      	movs	r3, #18
 8001f90:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001f92:	4620      	mov	r0, r4
 8001f94:	f7ff fbbb 	bl	800170e <HAL_I2C_MasterRxCpltCallback>
 8001f98:	e55a      	b.n	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f9a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001f9c:	b321      	cbz	r1, 8001fe8 <HAL_I2C_EV_IRQHandler+0x5d0>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f9e:	6959      	ldr	r1, [r3, #20]
  uint32_t sr2itflags               = 0U;
 8001fa0:	2500      	movs	r5, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fa2:	f011 0f02 	tst.w	r1, #2
 8001fa6:	d029      	beq.n	8001ffc <HAL_I2C_EV_IRQHandler+0x5e4>
 8001fa8:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001fac:	d026      	beq.n	8001ffc <HAL_I2C_EV_IRQHandler+0x5e4>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001fae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001fb0:	b102      	cbz	r2, 8001fb4 <HAL_I2C_EV_IRQHandler+0x59c>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001fb2:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001fb4:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001fb8:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8001fbc:	2a28      	cmp	r2, #40	; 0x28
 8001fbe:	d116      	bne.n	8001fee <HAL_I2C_EV_IRQHandler+0x5d6>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fc6:	605a      	str	r2, [r3, #4]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8001fc8:	ea6f 0195 	mvn.w	r1, r5, lsr #2
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8001fcc:	062b      	lsls	r3, r5, #24
    __HAL_UNLOCK(hi2c);
 8001fce:	f04f 0300 	mov.w	r3, #0
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8001fd2:	f001 0101 	and.w	r1, r1, #1
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8001fd6:	bf54      	ite	pl
 8001fd8:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8001fda:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 8001fdc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8001fe0:	4620      	mov	r0, r4
 8001fe2:	f7ff fb97 	bl	8001714 <HAL_I2C_AddrCallback>
 8001fe6:	e533      	b.n	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001fe8:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001fea:	6959      	ldr	r1, [r3, #20]
 8001fec:	e7d9      	b.n	8001fa2 <HAL_I2C_EV_IRQHandler+0x58a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001fee:	f06f 0202 	mvn.w	r2, #2
 8001ff2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001ffa:	e529      	b.n	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ffc:	06cd      	lsls	r5, r1, #27
 8001ffe:	f140 80b1 	bpl.w	8002164 <HAL_I2C_EV_IRQHandler+0x74c>
 8002002:	0595      	lsls	r5, r2, #22
 8002004:	f140 80ae 	bpl.w	8002164 <HAL_I2C_EV_IRQHandler+0x74c>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002008:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002012:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002014:	2200      	movs	r2, #0
 8002016:	920b      	str	r2, [sp, #44]	; 0x2c
 8002018:	695a      	ldr	r2, [r3, #20]
 800201a:	920b      	str	r2, [sp, #44]	; 0x2c
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	f042 0201 	orr.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800202c:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	0511      	lsls	r1, r2, #20
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002032:	b2ed      	uxtb	r5, r5
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002034:	d520      	bpl.n	8002078 <HAL_I2C_EV_IRQHandler+0x660>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002036:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 800203a:	2a22      	cmp	r2, #34	; 0x22
 800203c:	d14a      	bne.n	80020d4 <HAL_I2C_EV_IRQHandler+0x6bc>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800203e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002040:	6802      	ldr	r2, [r0, #0]
 8002042:	6852      	ldr	r2, [r2, #4]
 8002044:	b292      	uxth	r2, r2
 8002046:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8002048:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800204a:	b292      	uxth	r2, r2
 800204c:	b11a      	cbz	r2, 8002056 <HAL_I2C_EV_IRQHandler+0x63e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800204e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002050:	f042 0204 	orr.w	r2, r2, #4
 8002054:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800205c:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800205e:	f7ff f911 	bl	8001284 <HAL_DMA_GetState>
 8002062:	2801      	cmp	r0, #1
 8002064:	d008      	beq.n	8002078 <HAL_I2C_EV_IRQHandler+0x660>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002066:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002068:	4b79      	ldr	r3, [pc, #484]	; (8002250 <HAL_I2C_EV_IRQHandler+0x838>)
 800206a:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800206c:	f7ff f83a 	bl	80010e4 <HAL_DMA_Abort_IT>
 8002070:	b110      	cbz	r0, 8002078 <HAL_I2C_EV_IRQHandler+0x660>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002072:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002074:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002076:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8002078:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800207a:	b29b      	uxth	r3, r3
 800207c:	b313      	cbz	r3, 80020c4 <HAL_I2C_EV_IRQHandler+0x6ac>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800207e:	6823      	ldr	r3, [r4, #0]
 8002080:	695a      	ldr	r2, [r3, #20]
 8002082:	0752      	lsls	r2, r2, #29
 8002084:	d509      	bpl.n	800209a <HAL_I2C_EV_IRQHandler+0x682>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800208a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800208c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800208e:	3301      	adds	r3, #1
 8002090:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002092:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002094:	3b01      	subs	r3, #1
 8002096:	b29b      	uxth	r3, r3
 8002098:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800209a:	6823      	ldr	r3, [r4, #0]
 800209c:	695a      	ldr	r2, [r3, #20]
 800209e:	0650      	lsls	r0, r2, #25
 80020a0:	d509      	bpl.n	80020b6 <HAL_I2C_EV_IRQHandler+0x69e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020a6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80020a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020aa:	3301      	adds	r3, #1
 80020ac:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80020ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020b0:	3b01      	subs	r3, #1
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 80020b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	b11b      	cbz	r3, 80020c4 <HAL_I2C_EV_IRQHandler+0x6ac>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020be:	f043 0304 	orr.w	r3, r3, #4
 80020c2:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80020c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020c6:	b313      	cbz	r3, 800210e <HAL_I2C_EV_IRQHandler+0x6f6>
    I2C_ITError(hi2c);
 80020c8:	4620      	mov	r0, r4
}
 80020ca:	b00d      	add	sp, #52	; 0x34
 80020cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    I2C_ITError(hi2c);
 80020d0:	f7ff bc00 	b.w	80018d4 <I2C_ITError>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80020d4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80020d6:	6802      	ldr	r2, [r0, #0]
 80020d8:	6852      	ldr	r2, [r2, #4]
 80020da:	b292      	uxth	r2, r2
 80020dc:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 80020de:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80020e0:	b292      	uxth	r2, r2
 80020e2:	b11a      	cbz	r2, 80020ec <HAL_I2C_EV_IRQHandler+0x6d4>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80020e6:	f042 0204 	orr.w	r2, r2, #4
 80020ea:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020f2:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80020f4:	f7ff f8c6 	bl	8001284 <HAL_DMA_GetState>
 80020f8:	2801      	cmp	r0, #1
 80020fa:	d0bd      	beq.n	8002078 <HAL_I2C_EV_IRQHandler+0x660>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80020fc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80020fe:	4b54      	ldr	r3, [pc, #336]	; (8002250 <HAL_I2C_EV_IRQHandler+0x838>)
 8002100:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002102:	f7fe ffef 	bl	80010e4 <HAL_DMA_Abort_IT>
 8002106:	2800      	cmp	r0, #0
 8002108:	d0b6      	beq.n	8002078 <HAL_I2C_EV_IRQHandler+0x660>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800210a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800210c:	e7b2      	b.n	8002074 <HAL_I2C_EV_IRQHandler+0x65c>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800210e:	2d2a      	cmp	r5, #42	; 0x2a
 8002110:	d106      	bne.n	8002120 <HAL_I2C_EV_IRQHandler+0x708>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002112:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002114:	2328      	movs	r3, #40	; 0x28
 8002116:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800211a:	4620      	mov	r0, r4
 800211c:	f7ff faf9 	bl	8001712 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002120:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002124:	2b28      	cmp	r3, #40	; 0x28
 8002126:	d10c      	bne.n	8002142 <HAL_I2C_EV_IRQHandler+0x72a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002128:	4b4a      	ldr	r3, [pc, #296]	; (8002254 <HAL_I2C_EV_IRQHandler+0x83c>)
 800212a:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 800212c:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 800212e:	2300      	movs	r3, #0
 8002130:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_ListenCpltCallback(hi2c);
 8002132:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 8002134:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002138:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800213c:	f7ff faeb 	bl	8001716 <HAL_I2C_ListenCpltCallback>
 8002140:	e486      	b.n	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002142:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002144:	2b22      	cmp	r3, #34	; 0x22
 8002146:	d002      	beq.n	800214e <HAL_I2C_EV_IRQHandler+0x736>
 8002148:	2d22      	cmp	r5, #34	; 0x22
 800214a:	f47f ac81 	bne.w	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->PreviousState = I2C_STATE_NONE;
 800214e:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002150:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8002152:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002154:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002158:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800215c:	4620      	mov	r0, r4
 800215e:	f7ff fad8 	bl	8001712 <HAL_I2C_SlaveRxCpltCallback>
 8002162:	e475      	b.n	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002164:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
 8002168:	2821      	cmp	r0, #33	; 0x21
 800216a:	f3c1 0580 	ubfx	r5, r1, #2, #1
 800216e:	d135      	bne.n	80021dc <HAL_I2C_EV_IRQHandler+0x7c4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002170:	0609      	lsls	r1, r1, #24
 8002172:	d527      	bpl.n	80021c4 <HAL_I2C_EV_IRQHandler+0x7ac>
 8002174:	0551      	lsls	r1, r2, #21
 8002176:	d525      	bpl.n	80021c4 <HAL_I2C_EV_IRQHandler+0x7ac>
 8002178:	bb3d      	cbnz	r5, 80021ca <HAL_I2C_EV_IRQHandler+0x7b2>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800217a:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 800217e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002180:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002182:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 8002184:	2a00      	cmp	r2, #0
 8002186:	f43f ac63 	beq.w	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800218a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800218c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8002190:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 8002192:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8002194:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002196:	3a01      	subs	r2, #1
 8002198:	b292      	uxth	r2, r2
 800219a:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800219c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800219e:	b292      	uxth	r2, r2
 80021a0:	2a00      	cmp	r2, #0
 80021a2:	f47f ac55 	bne.w	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
 80021a6:	2929      	cmp	r1, #41	; 0x29
 80021a8:	f47f ac52 	bne.w	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021b2:	605a      	str	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80021b4:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80021b6:	6320      	str	r0, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80021b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80021bc:	4620      	mov	r0, r4
 80021be:	f7ff faa7 	bl	8001710 <HAL_I2C_SlaveTxCpltCallback>
 80021c2:	e445      	b.n	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021c4:	2d00      	cmp	r5, #0
 80021c6:	f43f ac43 	beq.w	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
 80021ca:	0595      	lsls	r5, r2, #22
 80021cc:	f57f ac40 	bpl.w	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 80021d0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80021d2:	b292      	uxth	r2, r2
 80021d4:	2a00      	cmp	r2, #0
 80021d6:	f47f ade0 	bne.w	8001d9a <HAL_I2C_EV_IRQHandler+0x382>
 80021da:	e439      	b.n	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021dc:	0648      	lsls	r0, r1, #25
 80021de:	d527      	bpl.n	8002230 <HAL_I2C_EV_IRQHandler+0x818>
 80021e0:	0551      	lsls	r1, r2, #21
 80021e2:	d525      	bpl.n	8002230 <HAL_I2C_EV_IRQHandler+0x818>
 80021e4:	bb3d      	cbnz	r5, 8002236 <HAL_I2C_EV_IRQHandler+0x81e>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80021e6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 80021ea:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80021ec:	b289      	uxth	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80021ee:	b2d2      	uxtb	r2, r2
  if (hi2c->XferCount != 0U)
 80021f0:	2900      	cmp	r1, #0
 80021f2:	f43f ac2d 	beq.w	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021f6:	6919      	ldr	r1, [r3, #16]
 80021f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021fa:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 80021fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021fe:	3301      	adds	r3, #1
 8002200:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8002202:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002204:	3b01      	subs	r3, #1
 8002206:	b29b      	uxth	r3, r3
 8002208:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800220a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800220c:	b29b      	uxth	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	f47f ac1e 	bne.w	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
 8002214:	2a2a      	cmp	r2, #42	; 0x2a
 8002216:	f47f ac1b 	bne.w	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800221a:	6822      	ldr	r2, [r4, #0]
 800221c:	6853      	ldr	r3, [r2, #4]
 800221e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002222:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002224:	2322      	movs	r3, #34	; 0x22
 8002226:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002228:	2328      	movs	r3, #40	; 0x28
 800222a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 800222e:	e795      	b.n	800215c <HAL_I2C_EV_IRQHandler+0x744>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002230:	2d00      	cmp	r5, #0
 8002232:	f43f ac0d 	beq.w	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
 8002236:	0592      	lsls	r2, r2, #22
 8002238:	f57f ac0a 	bpl.w	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 800223c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800223e:	b292      	uxth	r2, r2
 8002240:	2a00      	cmp	r2, #0
 8002242:	f43f ac05 	beq.w	8001a50 <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800224a:	701a      	strb	r2, [r3, #0]
 800224c:	e64d      	b.n	8001eea <HAL_I2C_EV_IRQHandler+0x4d2>
 800224e:	bf00      	nop
 8002250:	0800185f 	.word	0x0800185f
 8002254:	ffff0000 	.word	0xffff0000

08002258 <HAL_I2C_ER_IRQHandler>:
{
 8002258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800225a:	6803      	ldr	r3, [r0, #0]
 800225c:	695f      	ldr	r7, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800225e:	685e      	ldr	r6, [r3, #4]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002260:	f3c7 2500 	ubfx	r5, r7, #8, #1
{
 8002264:	4604      	mov	r4, r0
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002266:	b135      	cbz	r5, 8002276 <HAL_I2C_ER_IRQHandler+0x1e>
 8002268:	f3c6 2500 	ubfx	r5, r6, #8, #1
 800226c:	b11d      	cbz	r5, 8002276 <HAL_I2C_ER_IRQHandler+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800226e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002272:	615a      	str	r2, [r3, #20]
    error |= HAL_I2C_ERROR_BERR;
 8002274:	2501      	movs	r5, #1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002276:	05b9      	lsls	r1, r7, #22
 8002278:	d506      	bpl.n	8002288 <HAL_I2C_ER_IRQHandler+0x30>
 800227a:	05f2      	lsls	r2, r6, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800227c:	bf42      	ittt	mi
 800227e:	f46f 7200 	mvnmi.w	r2, #512	; 0x200
    error |= HAL_I2C_ERROR_ARLO;
 8002282:	f045 0502 	orrmi.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002286:	615a      	strmi	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002288:	0578      	lsls	r0, r7, #21
 800228a:	d537      	bpl.n	80022fc <HAL_I2C_ER_IRQHandler+0xa4>
 800228c:	05f1      	lsls	r1, r6, #23
 800228e:	d535      	bpl.n	80022fc <HAL_I2C_ER_IRQHandler+0xa4>
    tmp1 = hi2c->Mode;
 8002290:	f894 c03e 	ldrb.w	ip, [r4, #62]	; 0x3e
    tmp2 = hi2c->XferCount;
 8002294:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 8002296:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    tmp4 = hi2c->PreviousState;
 800229a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800229c:	f1bc 0f20 	cmp.w	ip, #32
    tmp2 = hi2c->XferCount;
 80022a0:	b289      	uxth	r1, r1
    tmp3 = hi2c->State;
 80022a2:	b2d2      	uxtb	r2, r2
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80022a4:	d15a      	bne.n	800235c <HAL_I2C_ER_IRQHandler+0x104>
 80022a6:	2900      	cmp	r1, #0
 80022a8:	d158      	bne.n	800235c <HAL_I2C_ER_IRQHandler+0x104>
 80022aa:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
 80022ae:	2921      	cmp	r1, #33	; 0x21
 80022b0:	d003      	beq.n	80022ba <HAL_I2C_ER_IRQHandler+0x62>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80022b2:	2a28      	cmp	r2, #40	; 0x28
 80022b4:	d152      	bne.n	800235c <HAL_I2C_ER_IRQHandler+0x104>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80022b6:	2821      	cmp	r0, #33	; 0x21
 80022b8:	d150      	bne.n	800235c <HAL_I2C_ER_IRQHandler+0x104>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022ba:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80022be:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80022c0:	2908      	cmp	r1, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022c2:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80022c4:	d001      	beq.n	80022ca <HAL_I2C_ER_IRQHandler+0x72>
 80022c6:	2920      	cmp	r1, #32
 80022c8:	d12a      	bne.n	8002320 <HAL_I2C_ER_IRQHandler+0xc8>
 80022ca:	2a28      	cmp	r2, #40	; 0x28
 80022cc:	d128      	bne.n	8002320 <HAL_I2C_ER_IRQHandler+0xc8>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022ce:	4a2c      	ldr	r2, [pc, #176]	; (8002380 <HAL_I2C_ER_IRQHandler+0x128>)
 80022d0:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80022d8:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022de:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022e6:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 80022e8:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 80022ea:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80022ec:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 80022ee:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 80022f0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80022f4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80022f8:	f7ff fa0d 	bl	8001716 <HAL_I2C_ListenCpltCallback>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80022fc:	053a      	lsls	r2, r7, #20
 80022fe:	d53c      	bpl.n	800237a <HAL_I2C_ER_IRQHandler+0x122>
 8002300:	05f3      	lsls	r3, r6, #23
 8002302:	d53a      	bpl.n	800237a <HAL_I2C_ER_IRQHandler+0x122>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002304:	6823      	ldr	r3, [r4, #0]
 8002306:	f46f 6200 	mvn.w	r2, #2048	; 0x800
    error |= HAL_I2C_ERROR_OVR;
 800230a:	f045 0508 	orr.w	r5, r5, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800230e:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 8002310:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002312:	431d      	orrs	r5, r3
 8002314:	6425      	str	r5, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 8002316:	4620      	mov	r0, r4
}
 8002318:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 800231c:	f7ff bada 	b.w	80018d4 <I2C_ITError>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002320:	2a21      	cmp	r2, #33	; 0x21
 8002322:	d117      	bne.n	8002354 <HAL_I2C_ER_IRQHandler+0xfc>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002324:	4916      	ldr	r1, [pc, #88]	; (8002380 <HAL_I2C_ER_IRQHandler+0x128>)
 8002326:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002328:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800232a:	2220      	movs	r2, #32
 800232c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002330:	2200      	movs	r2, #0
 8002332:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800233c:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800233e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002342:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800234a:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800234c:	4620      	mov	r0, r4
 800234e:	f7ff f9df 	bl	8001710 <HAL_I2C_SlaveTxCpltCallback>
 8002352:	e7d3      	b.n	80022fc <HAL_I2C_ER_IRQHandler+0xa4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002354:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002358:	615a      	str	r2, [r3, #20]
 800235a:	e7cf      	b.n	80022fc <HAL_I2C_ER_IRQHandler+0xa4>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800235c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002360:	615a      	str	r2, [r3, #20]
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8002362:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8002366:	2a10      	cmp	r2, #16
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002368:	bf04      	itt	eq
 800236a:	681a      	ldreq	r2, [r3, #0]
 800236c:	f442 7200 	orreq.w	r2, r2, #512	; 0x200
      error |= HAL_I2C_ERROR_AF;
 8002370:	f045 0504 	orr.w	r5, r5, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002374:	bf08      	it	eq
 8002376:	601a      	streq	r2, [r3, #0]
 8002378:	e7c0      	b.n	80022fc <HAL_I2C_ER_IRQHandler+0xa4>
  if (error != HAL_I2C_ERROR_NONE)
 800237a:	2d00      	cmp	r5, #0
 800237c:	d1c8      	bne.n	8002310 <HAL_I2C_ER_IRQHandler+0xb8>
}
 800237e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002380:	ffff0000 	.word	0xffff0000

08002384 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002384:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002388:	4604      	mov	r4, r0
 800238a:	b918      	cbnz	r0, 8002394 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800238c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800238e:	b002      	add	sp, #8
 8002390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002394:	6803      	ldr	r3, [r0, #0]
 8002396:	07dd      	lsls	r5, r3, #31
 8002398:	d410      	bmi.n	80023bc <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800239a:	6823      	ldr	r3, [r4, #0]
 800239c:	0798      	lsls	r0, r3, #30
 800239e:	d458      	bmi.n	8002452 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023a0:	6823      	ldr	r3, [r4, #0]
 80023a2:	071a      	lsls	r2, r3, #28
 80023a4:	f100 809a 	bmi.w	80024dc <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023a8:	6823      	ldr	r3, [r4, #0]
 80023aa:	075b      	lsls	r3, r3, #29
 80023ac:	f100 80b8 	bmi.w	8002520 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023b0:	69a2      	ldr	r2, [r4, #24]
 80023b2:	2a00      	cmp	r2, #0
 80023b4:	f040 8119 	bne.w	80025ea <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80023b8:	2000      	movs	r0, #0
 80023ba:	e7e8      	b.n	800238e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023bc:	4ba6      	ldr	r3, [pc, #664]	; (8002658 <HAL_RCC_OscConfig+0x2d4>)
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	f002 020c 	and.w	r2, r2, #12
 80023c4:	2a04      	cmp	r2, #4
 80023c6:	d007      	beq.n	80023d8 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023ce:	2a08      	cmp	r2, #8
 80023d0:	d10a      	bne.n	80023e8 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	0259      	lsls	r1, r3, #9
 80023d6:	d507      	bpl.n	80023e8 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d8:	4b9f      	ldr	r3, [pc, #636]	; (8002658 <HAL_RCC_OscConfig+0x2d4>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	039a      	lsls	r2, r3, #14
 80023de:	d5dc      	bpl.n	800239a <HAL_RCC_OscConfig+0x16>
 80023e0:	6863      	ldr	r3, [r4, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1d9      	bne.n	800239a <HAL_RCC_OscConfig+0x16>
 80023e6:	e7d1      	b.n	800238c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023e8:	6863      	ldr	r3, [r4, #4]
 80023ea:	4d9b      	ldr	r5, [pc, #620]	; (8002658 <HAL_RCC_OscConfig+0x2d4>)
 80023ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f0:	d111      	bne.n	8002416 <HAL_RCC_OscConfig+0x92>
 80023f2:	682b      	ldr	r3, [r5, #0]
 80023f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80023fa:	f7fe fd31 	bl	8000e60 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fe:	4d96      	ldr	r5, [pc, #600]	; (8002658 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002400:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002402:	682b      	ldr	r3, [r5, #0]
 8002404:	039b      	lsls	r3, r3, #14
 8002406:	d4c8      	bmi.n	800239a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002408:	f7fe fd2a 	bl	8000e60 <HAL_GetTick>
 800240c:	1b80      	subs	r0, r0, r6
 800240e:	2864      	cmp	r0, #100	; 0x64
 8002410:	d9f7      	bls.n	8002402 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8002412:	2003      	movs	r0, #3
 8002414:	e7bb      	b.n	800238e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002416:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800241a:	d104      	bne.n	8002426 <HAL_RCC_OscConfig+0xa2>
 800241c:	682b      	ldr	r3, [r5, #0]
 800241e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002422:	602b      	str	r3, [r5, #0]
 8002424:	e7e5      	b.n	80023f2 <HAL_RCC_OscConfig+0x6e>
 8002426:	682a      	ldr	r2, [r5, #0]
 8002428:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800242c:	602a      	str	r2, [r5, #0]
 800242e:	682a      	ldr	r2, [r5, #0]
 8002430:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002434:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1df      	bne.n	80023fa <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800243a:	f7fe fd11 	bl	8000e60 <HAL_GetTick>
 800243e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002440:	682b      	ldr	r3, [r5, #0]
 8002442:	039f      	lsls	r7, r3, #14
 8002444:	d5a9      	bpl.n	800239a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002446:	f7fe fd0b 	bl	8000e60 <HAL_GetTick>
 800244a:	1b80      	subs	r0, r0, r6
 800244c:	2864      	cmp	r0, #100	; 0x64
 800244e:	d9f7      	bls.n	8002440 <HAL_RCC_OscConfig+0xbc>
 8002450:	e7df      	b.n	8002412 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002452:	4b81      	ldr	r3, [pc, #516]	; (8002658 <HAL_RCC_OscConfig+0x2d4>)
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	f012 0f0c 	tst.w	r2, #12
 800245a:	d007      	beq.n	800246c <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002462:	2a08      	cmp	r2, #8
 8002464:	d111      	bne.n	800248a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	025e      	lsls	r6, r3, #9
 800246a:	d40e      	bmi.n	800248a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800246c:	4b7a      	ldr	r3, [pc, #488]	; (8002658 <HAL_RCC_OscConfig+0x2d4>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	0795      	lsls	r5, r2, #30
 8002472:	d502      	bpl.n	800247a <HAL_RCC_OscConfig+0xf6>
 8002474:	68e2      	ldr	r2, [r4, #12]
 8002476:	2a01      	cmp	r2, #1
 8002478:	d188      	bne.n	800238c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	6921      	ldr	r1, [r4, #16]
 800247e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002482:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002486:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002488:	e78a      	b.n	80023a0 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800248a:	68e2      	ldr	r2, [r4, #12]
 800248c:	4b73      	ldr	r3, [pc, #460]	; (800265c <HAL_RCC_OscConfig+0x2d8>)
 800248e:	b1b2      	cbz	r2, 80024be <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8002490:	2201      	movs	r2, #1
 8002492:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002494:	f7fe fce4 	bl	8000e60 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002498:	4d6f      	ldr	r5, [pc, #444]	; (8002658 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800249a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249c:	682b      	ldr	r3, [r5, #0]
 800249e:	0798      	lsls	r0, r3, #30
 80024a0:	d507      	bpl.n	80024b2 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a2:	682b      	ldr	r3, [r5, #0]
 80024a4:	6922      	ldr	r2, [r4, #16]
 80024a6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80024aa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80024ae:	602b      	str	r3, [r5, #0]
 80024b0:	e776      	b.n	80023a0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b2:	f7fe fcd5 	bl	8000e60 <HAL_GetTick>
 80024b6:	1b80      	subs	r0, r0, r6
 80024b8:	2802      	cmp	r0, #2
 80024ba:	d9ef      	bls.n	800249c <HAL_RCC_OscConfig+0x118>
 80024bc:	e7a9      	b.n	8002412 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80024be:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80024c0:	f7fe fcce 	bl	8000e60 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024c4:	4d64      	ldr	r5, [pc, #400]	; (8002658 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80024c6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024c8:	682b      	ldr	r3, [r5, #0]
 80024ca:	0799      	lsls	r1, r3, #30
 80024cc:	f57f af68 	bpl.w	80023a0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024d0:	f7fe fcc6 	bl	8000e60 <HAL_GetTick>
 80024d4:	1b80      	subs	r0, r0, r6
 80024d6:	2802      	cmp	r0, #2
 80024d8:	d9f6      	bls.n	80024c8 <HAL_RCC_OscConfig+0x144>
 80024da:	e79a      	b.n	8002412 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024dc:	6962      	ldr	r2, [r4, #20]
 80024de:	4b60      	ldr	r3, [pc, #384]	; (8002660 <HAL_RCC_OscConfig+0x2dc>)
 80024e0:	b17a      	cbz	r2, 8002502 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80024e2:	2201      	movs	r2, #1
 80024e4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80024e6:	f7fe fcbb 	bl	8000e60 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ea:	4d5b      	ldr	r5, [pc, #364]	; (8002658 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80024ec:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ee:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80024f0:	079f      	lsls	r7, r3, #30
 80024f2:	f53f af59 	bmi.w	80023a8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024f6:	f7fe fcb3 	bl	8000e60 <HAL_GetTick>
 80024fa:	1b80      	subs	r0, r0, r6
 80024fc:	2802      	cmp	r0, #2
 80024fe:	d9f6      	bls.n	80024ee <HAL_RCC_OscConfig+0x16a>
 8002500:	e787      	b.n	8002412 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8002502:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002504:	f7fe fcac 	bl	8000e60 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002508:	4d53      	ldr	r5, [pc, #332]	; (8002658 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800250a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800250c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800250e:	0798      	lsls	r0, r3, #30
 8002510:	f57f af4a 	bpl.w	80023a8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002514:	f7fe fca4 	bl	8000e60 <HAL_GetTick>
 8002518:	1b80      	subs	r0, r0, r6
 800251a:	2802      	cmp	r0, #2
 800251c:	d9f6      	bls.n	800250c <HAL_RCC_OscConfig+0x188>
 800251e:	e778      	b.n	8002412 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002520:	4b4d      	ldr	r3, [pc, #308]	; (8002658 <HAL_RCC_OscConfig+0x2d4>)
 8002522:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002524:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002528:	d128      	bne.n	800257c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800252a:	9201      	str	r2, [sp, #4]
 800252c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800252e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002532:	641a      	str	r2, [r3, #64]	; 0x40
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253a:	9301      	str	r3, [sp, #4]
 800253c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800253e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002540:	4d48      	ldr	r5, [pc, #288]	; (8002664 <HAL_RCC_OscConfig+0x2e0>)
 8002542:	682b      	ldr	r3, [r5, #0]
 8002544:	05d9      	lsls	r1, r3, #23
 8002546:	d51b      	bpl.n	8002580 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002548:	68a3      	ldr	r3, [r4, #8]
 800254a:	4d43      	ldr	r5, [pc, #268]	; (8002658 <HAL_RCC_OscConfig+0x2d4>)
 800254c:	2b01      	cmp	r3, #1
 800254e:	d127      	bne.n	80025a0 <HAL_RCC_OscConfig+0x21c>
 8002550:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002558:	f7fe fc82 	bl	8000e60 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800255c:	4d3e      	ldr	r5, [pc, #248]	; (8002658 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800255e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002560:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002564:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002566:	079b      	lsls	r3, r3, #30
 8002568:	d539      	bpl.n	80025de <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800256a:	2e00      	cmp	r6, #0
 800256c:	f43f af20 	beq.w	80023b0 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002570:	4a39      	ldr	r2, [pc, #228]	; (8002658 <HAL_RCC_OscConfig+0x2d4>)
 8002572:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002578:	6413      	str	r3, [r2, #64]	; 0x40
 800257a:	e719      	b.n	80023b0 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 800257c:	2600      	movs	r6, #0
 800257e:	e7df      	b.n	8002540 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002580:	682b      	ldr	r3, [r5, #0]
 8002582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002586:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002588:	f7fe fc6a 	bl	8000e60 <HAL_GetTick>
 800258c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258e:	682b      	ldr	r3, [r5, #0]
 8002590:	05da      	lsls	r2, r3, #23
 8002592:	d4d9      	bmi.n	8002548 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002594:	f7fe fc64 	bl	8000e60 <HAL_GetTick>
 8002598:	1bc0      	subs	r0, r0, r7
 800259a:	2802      	cmp	r0, #2
 800259c:	d9f7      	bls.n	800258e <HAL_RCC_OscConfig+0x20a>
 800259e:	e738      	b.n	8002412 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025a0:	2b05      	cmp	r3, #5
 80025a2:	d104      	bne.n	80025ae <HAL_RCC_OscConfig+0x22a>
 80025a4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80025a6:	f043 0304 	orr.w	r3, r3, #4
 80025aa:	672b      	str	r3, [r5, #112]	; 0x70
 80025ac:	e7d0      	b.n	8002550 <HAL_RCC_OscConfig+0x1cc>
 80025ae:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80025b0:	f022 0201 	bic.w	r2, r2, #1
 80025b4:	672a      	str	r2, [r5, #112]	; 0x70
 80025b6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80025b8:	f022 0204 	bic.w	r2, r2, #4
 80025bc:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1ca      	bne.n	8002558 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80025c2:	f7fe fc4d 	bl	8000e60 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025c6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80025ca:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025cc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80025ce:	0798      	lsls	r0, r3, #30
 80025d0:	d5cb      	bpl.n	800256a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025d2:	f7fe fc45 	bl	8000e60 <HAL_GetTick>
 80025d6:	1bc0      	subs	r0, r0, r7
 80025d8:	4540      	cmp	r0, r8
 80025da:	d9f7      	bls.n	80025cc <HAL_RCC_OscConfig+0x248>
 80025dc:	e719      	b.n	8002412 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025de:	f7fe fc3f 	bl	8000e60 <HAL_GetTick>
 80025e2:	1bc0      	subs	r0, r0, r7
 80025e4:	4540      	cmp	r0, r8
 80025e6:	d9bd      	bls.n	8002564 <HAL_RCC_OscConfig+0x1e0>
 80025e8:	e713      	b.n	8002412 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025ea:	4d1b      	ldr	r5, [pc, #108]	; (8002658 <HAL_RCC_OscConfig+0x2d4>)
 80025ec:	68ab      	ldr	r3, [r5, #8]
 80025ee:	f003 030c 	and.w	r3, r3, #12
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	f43f aeca 	beq.w	800238c <HAL_RCC_OscConfig+0x8>
 80025f8:	4e1b      	ldr	r6, [pc, #108]	; (8002668 <HAL_RCC_OscConfig+0x2e4>)
 80025fa:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025fc:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80025fe:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002600:	d134      	bne.n	800266c <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8002602:	f7fe fc2d 	bl	8000e60 <HAL_GetTick>
 8002606:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002608:	682b      	ldr	r3, [r5, #0]
 800260a:	0199      	lsls	r1, r3, #6
 800260c:	d41e      	bmi.n	800264c <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800260e:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8002612:	4313      	orrs	r3, r2
 8002614:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002616:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800261a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800261c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002620:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002622:	4c0d      	ldr	r4, [pc, #52]	; (8002658 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002624:	0852      	lsrs	r2, r2, #1
 8002626:	3a01      	subs	r2, #1
 8002628:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800262c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800262e:	2301      	movs	r3, #1
 8002630:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002632:	f7fe fc15 	bl	8000e60 <HAL_GetTick>
 8002636:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002638:	6823      	ldr	r3, [r4, #0]
 800263a:	019a      	lsls	r2, r3, #6
 800263c:	f53f aebc 	bmi.w	80023b8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002640:	f7fe fc0e 	bl	8000e60 <HAL_GetTick>
 8002644:	1b40      	subs	r0, r0, r5
 8002646:	2802      	cmp	r0, #2
 8002648:	d9f6      	bls.n	8002638 <HAL_RCC_OscConfig+0x2b4>
 800264a:	e6e2      	b.n	8002412 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800264c:	f7fe fc08 	bl	8000e60 <HAL_GetTick>
 8002650:	1bc0      	subs	r0, r0, r7
 8002652:	2802      	cmp	r0, #2
 8002654:	d9d8      	bls.n	8002608 <HAL_RCC_OscConfig+0x284>
 8002656:	e6dc      	b.n	8002412 <HAL_RCC_OscConfig+0x8e>
 8002658:	40023800 	.word	0x40023800
 800265c:	42470000 	.word	0x42470000
 8002660:	42470e80 	.word	0x42470e80
 8002664:	40007000 	.word	0x40007000
 8002668:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 800266c:	f7fe fbf8 	bl	8000e60 <HAL_GetTick>
 8002670:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002672:	682b      	ldr	r3, [r5, #0]
 8002674:	019b      	lsls	r3, r3, #6
 8002676:	f57f ae9f 	bpl.w	80023b8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800267a:	f7fe fbf1 	bl	8000e60 <HAL_GetTick>
 800267e:	1b00      	subs	r0, r0, r4
 8002680:	2802      	cmp	r0, #2
 8002682:	d9f6      	bls.n	8002672 <HAL_RCC_OscConfig+0x2ee>
 8002684:	e6c5      	b.n	8002412 <HAL_RCC_OscConfig+0x8e>
 8002686:	bf00      	nop

08002688 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002688:	4913      	ldr	r1, [pc, #76]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800268a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800268c:	688b      	ldr	r3, [r1, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
 8002692:	2b04      	cmp	r3, #4
 8002694:	d003      	beq.n	800269e <HAL_RCC_GetSysClockFreq+0x16>
 8002696:	2b08      	cmp	r3, #8
 8002698:	d003      	beq.n	80026a2 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800269a:	4810      	ldr	r0, [pc, #64]	; (80026dc <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 800269c:	e000      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 800269e:	4810      	ldr	r0, [pc, #64]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x58>)
}
 80026a0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026a2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026a4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026a6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026a8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ac:	bf14      	ite	ne
 80026ae:	480c      	ldrne	r0, [pc, #48]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026b0:	480a      	ldreq	r0, [pc, #40]	; (80026dc <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026b2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80026b6:	bf18      	it	ne
 80026b8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026ba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026be:	fba1 0100 	umull	r0, r1, r1, r0
 80026c2:	f7fe fa03 	bl	8000acc <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026c6:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x50>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80026ce:	3301      	adds	r3, #1
 80026d0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80026d2:	fbb0 f0f3 	udiv	r0, r0, r3
 80026d6:	e7e3      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x18>
 80026d8:	40023800 	.word	0x40023800
 80026dc:	00f42400 	.word	0x00f42400
 80026e0:	017d7840 	.word	0x017d7840

080026e4 <HAL_RCC_ClockConfig>:
{
 80026e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026e8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80026ea:	4604      	mov	r4, r0
 80026ec:	b910      	cbnz	r0, 80026f4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80026ee:	2001      	movs	r0, #1
}
 80026f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026f4:	4b43      	ldr	r3, [pc, #268]	; (8002804 <HAL_RCC_ClockConfig+0x120>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	f002 020f 	and.w	r2, r2, #15
 80026fc:	428a      	cmp	r2, r1
 80026fe:	d327      	bcc.n	8002750 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002700:	6821      	ldr	r1, [r4, #0]
 8002702:	078f      	lsls	r7, r1, #30
 8002704:	d42c      	bmi.n	8002760 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002706:	07c8      	lsls	r0, r1, #31
 8002708:	d43f      	bmi.n	800278a <HAL_RCC_ClockConfig+0xa6>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800270a:	4b3e      	ldr	r3, [pc, #248]	; (8002804 <HAL_RCC_ClockConfig+0x120>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	f002 020f 	and.w	r2, r2, #15
 8002712:	42aa      	cmp	r2, r5
 8002714:	d864      	bhi.n	80027e0 <HAL_RCC_ClockConfig+0xfc>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002716:	6822      	ldr	r2, [r4, #0]
 8002718:	0751      	lsls	r1, r2, #29
 800271a:	d46a      	bmi.n	80027f2 <HAL_RCC_ClockConfig+0x10e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271c:	0713      	lsls	r3, r2, #28
 800271e:	d507      	bpl.n	8002730 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002720:	4a39      	ldr	r2, [pc, #228]	; (8002808 <HAL_RCC_ClockConfig+0x124>)
 8002722:	6921      	ldr	r1, [r4, #16]
 8002724:	6893      	ldr	r3, [r2, #8]
 8002726:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800272a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800272e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002730:	f7ff ffaa 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 8002734:	4b34      	ldr	r3, [pc, #208]	; (8002808 <HAL_RCC_ClockConfig+0x124>)
 8002736:	4a35      	ldr	r2, [pc, #212]	; (800280c <HAL_RCC_ClockConfig+0x128>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800273e:	5cd3      	ldrb	r3, [r2, r3]
 8002740:	40d8      	lsrs	r0, r3
 8002742:	4b33      	ldr	r3, [pc, #204]	; (8002810 <HAL_RCC_ClockConfig+0x12c>)
 8002744:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002746:	200f      	movs	r0, #15
 8002748:	f7fe fb40 	bl	8000dcc <HAL_InitTick>
  return HAL_OK;
 800274c:	2000      	movs	r0, #0
 800274e:	e7cf      	b.n	80026f0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002750:	b2ca      	uxtb	r2, r1
 8002752:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	428b      	cmp	r3, r1
 800275c:	d1c7      	bne.n	80026ee <HAL_RCC_ClockConfig+0xa>
 800275e:	e7cf      	b.n	8002700 <HAL_RCC_ClockConfig+0x1c>
 8002760:	4b29      	ldr	r3, [pc, #164]	; (8002808 <HAL_RCC_ClockConfig+0x124>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002762:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002766:	bf1e      	ittt	ne
 8002768:	689a      	ldrne	r2, [r3, #8]
 800276a:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 800276e:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002770:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002772:	bf42      	ittt	mi
 8002774:	689a      	ldrmi	r2, [r3, #8]
 8002776:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 800277a:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	68a0      	ldr	r0, [r4, #8]
 8002780:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002784:	4302      	orrs	r2, r0
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	e7bd      	b.n	8002706 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800278a:	6862      	ldr	r2, [r4, #4]
 800278c:	4b1e      	ldr	r3, [pc, #120]	; (8002808 <HAL_RCC_ClockConfig+0x124>)
 800278e:	2a01      	cmp	r2, #1
 8002790:	d11c      	bne.n	80027cc <HAL_RCC_ClockConfig+0xe8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002798:	d0a9      	beq.n	80026ee <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800279a:	4e1b      	ldr	r6, [pc, #108]	; (8002808 <HAL_RCC_ClockConfig+0x124>)
 800279c:	68b3      	ldr	r3, [r6, #8]
 800279e:	f023 0303 	bic.w	r3, r3, #3
 80027a2:	4313      	orrs	r3, r2
 80027a4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80027a6:	f7fe fb5b 	bl	8000e60 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027aa:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80027ae:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b0:	68b3      	ldr	r3, [r6, #8]
 80027b2:	6862      	ldr	r2, [r4, #4]
 80027b4:	f003 030c 	and.w	r3, r3, #12
 80027b8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80027bc:	d0a5      	beq.n	800270a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027be:	f7fe fb4f 	bl	8000e60 <HAL_GetTick>
 80027c2:	1bc0      	subs	r0, r0, r7
 80027c4:	4540      	cmp	r0, r8
 80027c6:	d9f3      	bls.n	80027b0 <HAL_RCC_ClockConfig+0xcc>
        return HAL_TIMEOUT;
 80027c8:	2003      	movs	r0, #3
 80027ca:	e791      	b.n	80026f0 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027cc:	1e91      	subs	r1, r2, #2
 80027ce:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d0:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027d2:	d802      	bhi.n	80027da <HAL_RCC_ClockConfig+0xf6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80027d8:	e7de      	b.n	8002798 <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027da:	f013 0f02 	tst.w	r3, #2
 80027de:	e7db      	b.n	8002798 <HAL_RCC_ClockConfig+0xb4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e0:	b2ea      	uxtb	r2, r5
 80027e2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	42ab      	cmp	r3, r5
 80027ec:	f47f af7f 	bne.w	80026ee <HAL_RCC_ClockConfig+0xa>
 80027f0:	e791      	b.n	8002716 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027f2:	4905      	ldr	r1, [pc, #20]	; (8002808 <HAL_RCC_ClockConfig+0x124>)
 80027f4:	68e0      	ldr	r0, [r4, #12]
 80027f6:	688b      	ldr	r3, [r1, #8]
 80027f8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80027fc:	4303      	orrs	r3, r0
 80027fe:	608b      	str	r3, [r1, #8]
 8002800:	e78c      	b.n	800271c <HAL_RCC_ClockConfig+0x38>
 8002802:	bf00      	nop
 8002804:	40023c00 	.word	0x40023c00
 8002808:	40023800 	.word	0x40023800
 800280c:	080107ff 	.word	0x080107ff
 8002810:	20000028 	.word	0x20000028

08002814 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002814:	4b04      	ldr	r3, [pc, #16]	; (8002828 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002816:	4a05      	ldr	r2, [pc, #20]	; (800282c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800281e:	5cd3      	ldrb	r3, [r2, r3]
 8002820:	4a03      	ldr	r2, [pc, #12]	; (8002830 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002822:	6810      	ldr	r0, [r2, #0]
}
 8002824:	40d8      	lsrs	r0, r3
 8002826:	4770      	bx	lr
 8002828:	40023800 	.word	0x40023800
 800282c:	0801080f 	.word	0x0801080f
 8002830:	20000028 	.word	0x20000028

08002834 <SPI_WaitFlagStateUntilTimeout.constprop.7>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002836:	4604      	mov	r4, r0
 8002838:	460e      	mov	r6, r1
 800283a:	4615      	mov	r5, r2
 800283c:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800283e:	6821      	ldr	r1, [r4, #0]
 8002840:	688a      	ldr	r2, [r1, #8]
 8002842:	ea36 0302 	bics.w	r3, r6, r2
 8002846:	d001      	beq.n	800284c <SPI_WaitFlagStateUntilTimeout.constprop.7+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002848:	2000      	movs	r0, #0
 800284a:	e02d      	b.n	80028a8 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x74>
    if (Timeout != HAL_MAX_DELAY)
 800284c:	1c6b      	adds	r3, r5, #1
 800284e:	d0f7      	beq.n	8002840 <SPI_WaitFlagStateUntilTimeout.constprop.7+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002850:	f7fe fb06 	bl	8000e60 <HAL_GetTick>
 8002854:	1bc0      	subs	r0, r0, r7
 8002856:	4285      	cmp	r5, r0
 8002858:	d8f1      	bhi.n	800283e <SPI_WaitFlagStateUntilTimeout.constprop.7+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800285a:	6823      	ldr	r3, [r4, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002862:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002864:	6862      	ldr	r2, [r4, #4]
 8002866:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800286a:	d10a      	bne.n	8002882 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4e>
 800286c:	68a2      	ldr	r2, [r4, #8]
 800286e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002872:	d002      	beq.n	800287a <SPI_WaitFlagStateUntilTimeout.constprop.7+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002874:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002878:	d103      	bne.n	8002882 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4e>
          __HAL_SPI_DISABLE(hspi);
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002880:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002882:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002884:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002888:	d107      	bne.n	800289a <SPI_WaitFlagStateUntilTimeout.constprop.7+0x66>
          SPI_RESET_CRC(hspi);
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002898:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800289a:	2301      	movs	r3, #1
 800289c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80028a0:	2300      	movs	r3, #0
 80028a2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80028a6:	2003      	movs	r0, #3
}
 80028a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080028aa <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80028aa:	b538      	push	{r3, r4, r5, lr}
 80028ac:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028ae:	6842      	ldr	r2, [r0, #4]
 80028b0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 80028b4:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028b6:	d11f      	bne.n	80028f8 <SPI_EndRxTransaction+0x4e>
 80028b8:	6882      	ldr	r2, [r0, #8]
 80028ba:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80028be:	d002      	beq.n	80028c6 <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028c0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80028c4:	d107      	bne.n	80028d6 <SPI_EndRxTransaction+0x2c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80028c6:	6825      	ldr	r5, [r4, #0]
 80028c8:	6828      	ldr	r0, [r5, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80028ca:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 80028ce:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80028d2:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80028d4:	d007      	beq.n	80028e6 <SPI_EndRxTransaction+0x3c>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028d6:	460a      	mov	r2, r1
 80028d8:	2180      	movs	r1, #128	; 0x80
 80028da:	4620      	mov	r0, r4
 80028dc:	f7ff ffaa 	bl	8002834 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 80028e0:	b920      	cbnz	r0, 80028ec <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80028e2:	2000      	movs	r0, #0
}
 80028e4:	bd38      	pop	{r3, r4, r5, pc}
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80028e6:	460a      	mov	r2, r1
 80028e8:	2101      	movs	r1, #1
 80028ea:	e7f6      	b.n	80028da <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80028ee:	f043 0320 	orr.w	r3, r3, #32
 80028f2:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80028f4:	2003      	movs	r0, #3
 80028f6:	e7f5      	b.n	80028e4 <SPI_EndRxTransaction+0x3a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80028f8:	460a      	mov	r2, r1
 80028fa:	2101      	movs	r1, #1
 80028fc:	e7ee      	b.n	80028dc <SPI_EndRxTransaction+0x32>
	...

08002900 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002900:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002902:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002904:	4a12      	ldr	r2, [pc, #72]	; (8002950 <SPI_EndRxTxTransaction+0x50>)
 8002906:	4e13      	ldr	r6, [pc, #76]	; (8002954 <SPI_EndRxTxTransaction+0x54>)
 8002908:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800290a:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800290c:	fbb5 f6f6 	udiv	r6, r5, r6
 8002910:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8002914:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002916:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 800291a:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800291c:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800291e:	d10b      	bne.n	8002938 <SPI_EndRxTxTransaction+0x38>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002920:	460a      	mov	r2, r1
 8002922:	2180      	movs	r1, #128	; 0x80
 8002924:	f7ff ff86 	bl	8002834 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 8002928:	b178      	cbz	r0, 800294a <SPI_EndRxTxTransaction+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800292a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800292c:	f043 0320 	orr.w	r3, r3, #32
 8002930:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8002932:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 8002934:	b002      	add	sp, #8
 8002936:	bd70      	pop	{r4, r5, r6, pc}
      if (count == 0U)
 8002938:	9b01      	ldr	r3, [sp, #4]
 800293a:	b133      	cbz	r3, 800294a <SPI_EndRxTxTransaction+0x4a>
      count--;
 800293c:	9b01      	ldr	r3, [sp, #4]
 800293e:	3b01      	subs	r3, #1
 8002940:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002942:	6823      	ldr	r3, [r4, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	061b      	lsls	r3, r3, #24
 8002948:	d4f6      	bmi.n	8002938 <SPI_EndRxTxTransaction+0x38>
  return HAL_OK;
 800294a:	2000      	movs	r0, #0
 800294c:	e7f2      	b.n	8002934 <SPI_EndRxTxTransaction+0x34>
 800294e:	bf00      	nop
 8002950:	20000028 	.word	0x20000028
 8002954:	016e3600 	.word	0x016e3600

08002958 <HAL_SPI_Init>:
{
 8002958:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800295a:	4604      	mov	r4, r0
 800295c:	2800      	cmp	r0, #0
 800295e:	d036      	beq.n	80029ce <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002960:	2300      	movs	r3, #0
 8002962:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002964:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002968:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800296c:	b91b      	cbnz	r3, 8002976 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 800296e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002972:	f003 fdb1 	bl	80064d8 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8002976:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002978:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 800297a:	2302      	movs	r3, #2
 800297c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002980:	680b      	ldr	r3, [r1, #0]
 8002982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002986:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002988:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 800298c:	4303      	orrs	r3, r0
 800298e:	68e0      	ldr	r0, [r4, #12]
 8002990:	4303      	orrs	r3, r0
 8002992:	6920      	ldr	r0, [r4, #16]
 8002994:	4303      	orrs	r3, r0
 8002996:	6960      	ldr	r0, [r4, #20]
 8002998:	4303      	orrs	r3, r0
 800299a:	69e0      	ldr	r0, [r4, #28]
 800299c:	4303      	orrs	r3, r0
 800299e:	6a20      	ldr	r0, [r4, #32]
 80029a0:	4303      	orrs	r3, r0
 80029a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80029a4:	4303      	orrs	r3, r0
 80029a6:	f402 7000 	and.w	r0, r2, #512	; 0x200
 80029aa:	4303      	orrs	r3, r0
 80029ac:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80029ae:	0c12      	lsrs	r2, r2, #16
 80029b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029b2:	f002 0204 	and.w	r2, r2, #4
 80029b6:	431a      	orrs	r2, r3
 80029b8:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029ba:	69cb      	ldr	r3, [r1, #28]
 80029bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029c0:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029c2:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80029c4:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029c6:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80029c8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80029cc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80029ce:	2001      	movs	r0, #1
 80029d0:	e7fc      	b.n	80029cc <HAL_SPI_Init+0x74>

080029d2 <HAL_SPI_Transmit>:
{
 80029d2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80029d6:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80029d8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80029dc:	2b01      	cmp	r3, #1
{
 80029de:	4604      	mov	r4, r0
 80029e0:	460d      	mov	r5, r1
 80029e2:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80029e4:	f000 809b 	beq.w	8002b1e <HAL_SPI_Transmit+0x14c>
 80029e8:	2301      	movs	r3, #1
 80029ea:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80029ee:	f7fe fa37 	bl	8000e60 <HAL_GetTick>
 80029f2:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80029f4:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80029f8:	b2c0      	uxtb	r0, r0
 80029fa:	2801      	cmp	r0, #1
 80029fc:	f040 808d 	bne.w	8002b1a <HAL_SPI_Transmit+0x148>
  if ((pData == NULL) || (Size == 0U))
 8002a00:	2d00      	cmp	r5, #0
 8002a02:	d05d      	beq.n	8002ac0 <HAL_SPI_Transmit+0xee>
 8002a04:	f1b8 0f00 	cmp.w	r8, #0
 8002a08:	d05a      	beq.n	8002ac0 <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a10:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a12:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a14:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a16:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002a18:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8002a1c:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002a1e:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002a20:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
 8002a24:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a26:	6325      	str	r5, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8002a2c:	bf08      	it	eq
 8002a2e:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8002a30:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8002a34:	bf04      	itt	eq
 8002a36:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8002a3a:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a3c:	6803      	ldr	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a3e:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a40:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8002a42:	bf5e      	ittt	pl
 8002a44:	6803      	ldrpl	r3, [r0, #0]
 8002a46:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8002a4a:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a4c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002a50:	6863      	ldr	r3, [r4, #4]
 8002a52:	d13e      	bne.n	8002ad2 <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a54:	b113      	cbz	r3, 8002a5c <HAL_SPI_Transmit+0x8a>
 8002a56:	f1b8 0f01 	cmp.w	r8, #1
 8002a5a:	d107      	bne.n	8002a6c <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a5c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002a60:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a62:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002a64:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002a6c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	b9a3      	cbnz	r3, 8002a9c <HAL_SPI_Transmit+0xca>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a72:	463a      	mov	r2, r7
 8002a74:	4631      	mov	r1, r6
 8002a76:	4620      	mov	r0, r4
 8002a78:	f7ff ff42 	bl	8002900 <SPI_EndRxTxTransaction>
 8002a7c:	2800      	cmp	r0, #0
 8002a7e:	d149      	bne.n	8002b14 <HAL_SPI_Transmit+0x142>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a80:	68a3      	ldr	r3, [r4, #8]
 8002a82:	b933      	cbnz	r3, 8002a92 <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a84:	9301      	str	r3, [sp, #4]
 8002a86:	6823      	ldr	r3, [r4, #0]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	9201      	str	r2, [sp, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	9301      	str	r3, [sp, #4]
 8002a90:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a92:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8002a94:	3000      	adds	r0, #0
 8002a96:	bf18      	it	ne
 8002a98:	2001      	movne	r0, #1
error:
 8002a9a:	e011      	b.n	8002ac0 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a9c:	6822      	ldr	r2, [r4, #0]
 8002a9e:	6893      	ldr	r3, [r2, #8]
 8002aa0:	0798      	lsls	r0, r3, #30
 8002aa2:	d505      	bpl.n	8002ab0 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002aa4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002aa6:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002aaa:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aac:	6323      	str	r3, [r4, #48]	; 0x30
 8002aae:	e7d9      	b.n	8002a64 <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ab0:	f7fe f9d6 	bl	8000e60 <HAL_GetTick>
 8002ab4:	1bc0      	subs	r0, r0, r7
 8002ab6:	42b0      	cmp	r0, r6
 8002ab8:	d3d8      	bcc.n	8002a6c <HAL_SPI_Transmit+0x9a>
 8002aba:	1c71      	adds	r1, r6, #1
 8002abc:	d0d6      	beq.n	8002a6c <HAL_SPI_Transmit+0x9a>
          errorcode = HAL_TIMEOUT;
 8002abe:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002acc:	b002      	add	sp, #8
 8002ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ad2:	b113      	cbz	r3, 8002ada <HAL_SPI_Transmit+0x108>
 8002ad4:	f1b8 0f01 	cmp.w	r8, #1
 8002ad8:	d108      	bne.n	8002aec <HAL_SPI_Transmit+0x11a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ada:	782b      	ldrb	r3, [r5, #0]
 8002adc:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ade:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002ae4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002aec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0be      	beq.n	8002a72 <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002af4:	6823      	ldr	r3, [r4, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	0792      	lsls	r2, r2, #30
 8002afa:	d503      	bpl.n	8002b04 <HAL_SPI_Transmit+0x132>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002afc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002afe:	7812      	ldrb	r2, [r2, #0]
 8002b00:	731a      	strb	r2, [r3, #12]
 8002b02:	e7ec      	b.n	8002ade <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b04:	f7fe f9ac 	bl	8000e60 <HAL_GetTick>
 8002b08:	1bc0      	subs	r0, r0, r7
 8002b0a:	42b0      	cmp	r0, r6
 8002b0c:	d3ee      	bcc.n	8002aec <HAL_SPI_Transmit+0x11a>
 8002b0e:	1c73      	adds	r3, r6, #1
 8002b10:	d0ec      	beq.n	8002aec <HAL_SPI_Transmit+0x11a>
 8002b12:	e7d4      	b.n	8002abe <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b14:	2320      	movs	r3, #32
 8002b16:	6563      	str	r3, [r4, #84]	; 0x54
 8002b18:	e7b2      	b.n	8002a80 <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 8002b1a:	2002      	movs	r0, #2
 8002b1c:	e7d0      	b.n	8002ac0 <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 8002b1e:	2002      	movs	r0, #2
 8002b20:	e7d4      	b.n	8002acc <HAL_SPI_Transmit+0xfa>

08002b22 <HAL_SPI_TransmitReceive>:
{
 8002b22:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002b26:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8002b28:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8002b2c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8002b2e:	2b01      	cmp	r3, #1
{
 8002b30:	4604      	mov	r4, r0
 8002b32:	460d      	mov	r5, r1
 8002b34:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8002b36:	f000 80e2 	beq.w	8002cfe <HAL_SPI_TransmitReceive+0x1dc>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002b40:	f7fe f98e 	bl	8000e60 <HAL_GetTick>
  tmp_state           = hspi->State;
 8002b44:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8002b48:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8002b4a:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b4c:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8002b4e:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b50:	d00a      	beq.n	8002b68 <HAL_SPI_TransmitReceive+0x46>
 8002b52:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8002b56:	f040 80d0 	bne.w	8002cfa <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002b5a:	68a0      	ldr	r0, [r4, #8]
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	f040 80cc 	bne.w	8002cfa <HAL_SPI_TransmitReceive+0x1d8>
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	f040 80c9 	bne.w	8002cfa <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002b68:	2d00      	cmp	r5, #0
 8002b6a:	f000 80c4 	beq.w	8002cf6 <HAL_SPI_TransmitReceive+0x1d4>
 8002b6e:	f1b9 0f00 	cmp.w	r9, #0
 8002b72:	f000 80c0 	beq.w	8002cf6 <HAL_SPI_TransmitReceive+0x1d4>
 8002b76:	2e00      	cmp	r6, #0
 8002b78:	f000 80bd 	beq.w	8002cf6 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002b7c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002b80:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002b84:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002b86:	bf1c      	itt	ne
 8002b88:	2305      	movne	r3, #5
 8002b8a:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8002b92:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b96:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8002b98:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8002b9a:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b9c:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8002b9e:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ba0:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8002ba2:	bf58      	it	pl
 8002ba4:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ba6:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8002ba8:	bf58      	it	pl
 8002baa:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8002bae:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8002bb0:	bf58      	it	pl
 8002bb2:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002bb4:	68e2      	ldr	r2, [r4, #12]
 8002bb6:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002bba:	d158      	bne.n	8002c6e <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bbc:	b109      	cbz	r1, 8002bc2 <HAL_SPI_TransmitReceive+0xa0>
 8002bbe:	2e01      	cmp	r6, #1
 8002bc0:	d107      	bne.n	8002bd2 <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bc2:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002bc6:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8002bc8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bca:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002bd2:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bd4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	b9ab      	cbnz	r3, 8002c06 <HAL_SPI_TransmitReceive+0xe4>
 8002bda:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	b993      	cbnz	r3, 8002c06 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002be0:	4642      	mov	r2, r8
 8002be2:	4639      	mov	r1, r7
 8002be4:	4620      	mov	r0, r4
 8002be6:	f7ff fe8b 	bl	8002900 <SPI_EndRxTxTransaction>
 8002bea:	2800      	cmp	r0, #0
 8002bec:	f040 8081 	bne.w	8002cf2 <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002bf0:	68a3      	ldr	r3, [r4, #8]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d132      	bne.n	8002c5c <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bf6:	6823      	ldr	r3, [r4, #0]
 8002bf8:	9001      	str	r0, [sp, #4]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	9201      	str	r2, [sp, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	9301      	str	r3, [sp, #4]
 8002c02:	9b01      	ldr	r3, [sp, #4]
 8002c04:	e02a      	b.n	8002c5c <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c06:	6822      	ldr	r2, [r4, #0]
 8002c08:	6893      	ldr	r3, [r2, #8]
 8002c0a:	0799      	lsls	r1, r3, #30
 8002c0c:	d50d      	bpl.n	8002c2a <HAL_SPI_TransmitReceive+0x108>
 8002c0e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	b153      	cbz	r3, 8002c2a <HAL_SPI_TransmitReceive+0x108>
 8002c14:	b14d      	cbz	r5, 8002c2a <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002c18:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002c1c:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c1e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002c20:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8002c28:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c2a:	6893      	ldr	r3, [r2, #8]
 8002c2c:	07db      	lsls	r3, r3, #31
 8002c2e:	d50c      	bpl.n	8002c4a <HAL_SPI_TransmitReceive+0x128>
 8002c30:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	b14b      	cbz	r3, 8002c4a <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c38:	68d2      	ldr	r2, [r2, #12]
 8002c3a:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c3e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002c40:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002c48:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c4a:	f7fe f909 	bl	8000e60 <HAL_GetTick>
 8002c4e:	eba0 0008 	sub.w	r0, r0, r8
 8002c52:	4287      	cmp	r7, r0
 8002c54:	d8be      	bhi.n	8002bd4 <HAL_SPI_TransmitReceive+0xb2>
 8002c56:	1c7e      	adds	r6, r7, #1
 8002c58:	d0bc      	beq.n	8002bd4 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8002c5a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002c62:	2300      	movs	r3, #0
 8002c64:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002c68:	b003      	add	sp, #12
 8002c6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c6e:	b109      	cbz	r1, 8002c74 <HAL_SPI_TransmitReceive+0x152>
 8002c70:	2e01      	cmp	r6, #1
 8002c72:	d108      	bne.n	8002c86 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c74:	782a      	ldrb	r2, [r5, #0]
 8002c76:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c78:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002c7e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002c86:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c88:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	b91b      	cbnz	r3, 8002c96 <HAL_SPI_TransmitReceive+0x174>
 8002c8e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0a4      	beq.n	8002be0 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c96:	6822      	ldr	r2, [r4, #0]
 8002c98:	6893      	ldr	r3, [r2, #8]
 8002c9a:	0798      	lsls	r0, r3, #30
 8002c9c:	d50e      	bpl.n	8002cbc <HAL_SPI_TransmitReceive+0x19a>
 8002c9e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	b15b      	cbz	r3, 8002cbc <HAL_SPI_TransmitReceive+0x19a>
 8002ca4:	b155      	cbz	r5, 8002cbc <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ca6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8002cac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002cae:	3301      	adds	r3, #1
 8002cb0:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002cb2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8002cba:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cbc:	6822      	ldr	r2, [r4, #0]
 8002cbe:	6893      	ldr	r3, [r2, #8]
 8002cc0:	07d9      	lsls	r1, r3, #31
 8002cc2:	d50d      	bpl.n	8002ce0 <HAL_SPI_TransmitReceive+0x1be>
 8002cc4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	b153      	cbz	r3, 8002ce0 <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002cca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ccc:	68d2      	ldr	r2, [r2, #12]
 8002cce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002cd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002cd6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002cde:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ce0:	f7fe f8be 	bl	8000e60 <HAL_GetTick>
 8002ce4:	eba0 0008 	sub.w	r0, r0, r8
 8002ce8:	4287      	cmp	r7, r0
 8002cea:	d8cd      	bhi.n	8002c88 <HAL_SPI_TransmitReceive+0x166>
 8002cec:	1c7b      	adds	r3, r7, #1
 8002cee:	d0cb      	beq.n	8002c88 <HAL_SPI_TransmitReceive+0x166>
 8002cf0:	e7b3      	b.n	8002c5a <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cf2:	2320      	movs	r3, #32
 8002cf4:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002cf6:	2001      	movs	r0, #1
 8002cf8:	e7b0      	b.n	8002c5c <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 8002cfa:	2002      	movs	r0, #2
 8002cfc:	e7ae      	b.n	8002c5c <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 8002cfe:	2002      	movs	r0, #2
 8002d00:	e7b2      	b.n	8002c68 <HAL_SPI_TransmitReceive+0x146>
	...

08002d04 <HAL_SPI_TransmitReceive_DMA>:
{
 8002d04:	b538      	push	{r3, r4, r5, lr}
 8002d06:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8002d08:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 8002d0c:	2801      	cmp	r0, #1
 8002d0e:	d070      	beq.n	8002df2 <HAL_SPI_TransmitReceive_DMA+0xee>
 8002d10:	2001      	movs	r0, #1
 8002d12:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  tmp_state           = hspi->State;
 8002d16:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002d1a:	b2c0      	uxtb	r0, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002d1c:	2801      	cmp	r0, #1
 8002d1e:	d008      	beq.n	8002d32 <HAL_SPI_TransmitReceive_DMA+0x2e>
 8002d20:	6865      	ldr	r5, [r4, #4]
 8002d22:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 8002d26:	d160      	bne.n	8002dea <HAL_SPI_TransmitReceive_DMA+0xe6>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d28:	68a5      	ldr	r5, [r4, #8]
 8002d2a:	2d00      	cmp	r5, #0
 8002d2c:	d15d      	bne.n	8002dea <HAL_SPI_TransmitReceive_DMA+0xe6>
 8002d2e:	2804      	cmp	r0, #4
 8002d30:	d15b      	bne.n	8002dea <HAL_SPI_TransmitReceive_DMA+0xe6>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d32:	2900      	cmp	r1, #0
 8002d34:	d05b      	beq.n	8002dee <HAL_SPI_TransmitReceive_DMA+0xea>
 8002d36:	2a00      	cmp	r2, #0
 8002d38:	d059      	beq.n	8002dee <HAL_SPI_TransmitReceive_DMA+0xea>
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d057      	beq.n	8002dee <HAL_SPI_TransmitReceive_DMA+0xea>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d3e:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  hspi->TxXferSize  = Size;
 8002d42:	86a3      	strh	r3, [r4, #52]	; 0x34
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d44:	2804      	cmp	r0, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d46:	bf1c      	itt	ne
 8002d48:	2005      	movne	r0, #5
 8002d4a:	f884 0051 	strbne.w	r0, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d4e:	2000      	movs	r0, #0
 8002d50:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->TxXferCount = Size;
 8002d52:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxXferCount = Size;
 8002d54:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002d56:	87a3      	strh	r3, [r4, #60]	; 0x3c
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002d58:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d5c:	6321      	str	r1, [r4, #48]	; 0x30
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002d5e:	2b04      	cmp	r3, #4
  hspi->TxISR       = NULL;
 8002d60:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
 8002d64:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002d66:	bf0c      	ite	eq
 8002d68:	4b23      	ldreq	r3, [pc, #140]	; (8002df8 <HAL_SPI_TransmitReceive_DMA+0xf4>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002d6a:	4b24      	ldrne	r3, [pc, #144]	; (8002dfc <HAL_SPI_TransmitReceive_DMA+0xf8>)
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d6c:	63a2      	str	r2, [r4, #56]	; 0x38
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002d6e:	bf0b      	itete	eq
 8002d70:	6403      	streq	r3, [r0, #64]	; 0x40
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002d72:	6403      	strne	r3, [r0, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002d74:	4b22      	ldreq	r3, [pc, #136]	; (8002e00 <HAL_SPI_TransmitReceive_DMA+0xfc>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8002d76:	4b23      	ldrne	r3, [pc, #140]	; (8002e04 <HAL_SPI_TransmitReceive_DMA+0x100>)
 8002d78:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8002d7a:	6821      	ldr	r1, [r4, #0]
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002d7c:	4b22      	ldr	r3, [pc, #136]	; (8002e08 <HAL_SPI_TransmitReceive_DMA+0x104>)
 8002d7e:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	6503      	str	r3, [r0, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8002d84:	310c      	adds	r1, #12
 8002d86:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002d88:	f7fe f96e 	bl	8001068 <HAL_DMA_Start_IT>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	b150      	cbz	r0, 8002da6 <HAL_SPI_TransmitReceive_DMA+0xa2>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002d90:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8002d92:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002d94:	f043 0310 	orr.w	r3, r3, #16
 8002d98:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8002d9a:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002d9e:	2300      	movs	r3, #0
 8002da0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002da4:	bd38      	pop	{r3, r4, r5, pc}
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002da6:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002da8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002daa:	6851      	ldr	r1, [r2, #4]
 8002dac:	f041 0101 	orr.w	r1, r1, #1
 8002db0:	6051      	str	r1, [r2, #4]
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002db2:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002db6:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8002dba:	320c      	adds	r2, #12
 8002dbc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002dbe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002dc0:	f7fe f952 	bl	8001068 <HAL_DMA_Start_IT>
 8002dc4:	2800      	cmp	r0, #0
 8002dc6:	d1e3      	bne.n	8002d90 <HAL_SPI_TransmitReceive_DMA+0x8c>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dc8:	6823      	ldr	r3, [r4, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8002dce:	bf5e      	ittt	pl
 8002dd0:	681a      	ldrpl	r2, [r3, #0]
 8002dd2:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8002dd6:	601a      	strpl	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	f042 0220 	orr.w	r2, r2, #32
 8002dde:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	f042 0202 	orr.w	r2, r2, #2
 8002de6:	605a      	str	r2, [r3, #4]
 8002de8:	e7d9      	b.n	8002d9e <HAL_SPI_TransmitReceive_DMA+0x9a>
    errorcode = HAL_BUSY;
 8002dea:	2002      	movs	r0, #2
 8002dec:	e7d7      	b.n	8002d9e <HAL_SPI_TransmitReceive_DMA+0x9a>
    errorcode = HAL_ERROR;
 8002dee:	2001      	movs	r0, #1
 8002df0:	e7d5      	b.n	8002d9e <HAL_SPI_TransmitReceive_DMA+0x9a>
  __HAL_LOCK(hspi);
 8002df2:	2002      	movs	r0, #2
 8002df4:	e7d6      	b.n	8002da4 <HAL_SPI_TransmitReceive_DMA+0xa0>
 8002df6:	bf00      	nop
 8002df8:	08002e13 	.word	0x08002e13
 8002dfc:	08002e1f 	.word	0x08002e1f
 8002e00:	08002e4d 	.word	0x08002e4d
 8002e04:	08002e9f 	.word	0x08002e9f
 8002e08:	08002e2b 	.word	0x08002e2b

08002e0c <HAL_SPI_RxCpltCallback>:
 8002e0c:	4770      	bx	lr

08002e0e <HAL_SPI_TxRxCpltCallback>:
 8002e0e:	4770      	bx	lr

08002e10 <HAL_SPI_RxHalfCpltCallback>:
 8002e10:	4770      	bx	lr

08002e12 <SPI_DMAHalfReceiveCplt>:
{
 8002e12:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8002e14:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002e16:	f7ff fffb 	bl	8002e10 <HAL_SPI_RxHalfCpltCallback>
}
 8002e1a:	bd08      	pop	{r3, pc}

08002e1c <HAL_SPI_TxRxHalfCpltCallback>:
 8002e1c:	4770      	bx	lr

08002e1e <SPI_DMAHalfTransmitReceiveCplt>:
{
 8002e1e:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8002e20:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002e22:	f7ff fffb 	bl	8002e1c <HAL_SPI_TxRxHalfCpltCallback>
}
 8002e26:	bd08      	pop	{r3, pc}

08002e28 <HAL_SPI_ErrorCallback>:
 8002e28:	4770      	bx	lr

08002e2a <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e2a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002e2c:	6802      	ldr	r2, [r0, #0]
{
 8002e2e:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002e30:	6853      	ldr	r3, [r2, #4]
 8002e32:	f023 0303 	bic.w	r3, r3, #3
 8002e36:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002e38:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002e3a:	f043 0310 	orr.w	r3, r3, #16
 8002e3e:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002e40:	2301      	movs	r3, #1
 8002e42:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 8002e46:	f7ff ffef 	bl	8002e28 <HAL_SPI_ErrorCallback>
}
 8002e4a:	bd08      	pop	{r3, pc}

08002e4c <SPI_DMAReceiveCplt>:
{
 8002e4c:	b538      	push	{r3, r4, r5, lr}
 8002e4e:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e50:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 8002e52:	f7fe f805 	bl	8000e60 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002e56:	682b      	ldr	r3, [r5, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	05db      	lsls	r3, r3, #23
  tickstart = HAL_GetTick();
 8002e5c:	4602      	mov	r2, r0
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002e5e:	d41a      	bmi.n	8002e96 <SPI_DMAReceiveCplt+0x4a>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002e60:	6823      	ldr	r3, [r4, #0]
 8002e62:	6859      	ldr	r1, [r3, #4]
 8002e64:	f021 0120 	bic.w	r1, r1, #32
 8002e68:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002e6a:	6859      	ldr	r1, [r3, #4]
 8002e6c:	f021 0103 	bic.w	r1, r1, #3
 8002e70:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002e72:	4620      	mov	r0, r4
 8002e74:	2164      	movs	r1, #100	; 0x64
 8002e76:	f7ff fd18 	bl	80028aa <SPI_EndRxTransaction>
 8002e7a:	b108      	cbz	r0, 8002e80 <SPI_DMAReceiveCplt+0x34>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e7c:	2320      	movs	r3, #32
 8002e7e:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->RxXferCount = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002e84:	2301      	movs	r3, #1
 8002e86:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e8a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e8c:	b11b      	cbz	r3, 8002e96 <SPI_DMAReceiveCplt+0x4a>
      HAL_SPI_ErrorCallback(hspi);
 8002e8e:	4620      	mov	r0, r4
 8002e90:	f7ff ffca 	bl	8002e28 <HAL_SPI_ErrorCallback>
}
 8002e94:	bd38      	pop	{r3, r4, r5, pc}
  HAL_SPI_RxCpltCallback(hspi);
 8002e96:	4620      	mov	r0, r4
 8002e98:	f7ff ffb8 	bl	8002e0c <HAL_SPI_RxCpltCallback>
 8002e9c:	e7fa      	b.n	8002e94 <SPI_DMAReceiveCplt+0x48>

08002e9e <SPI_DMATransmitReceiveCplt>:
{
 8002e9e:	b538      	push	{r3, r4, r5, lr}
 8002ea0:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002ea2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 8002ea4:	f7fd ffdc 	bl	8000e60 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002ea8:	682b      	ldr	r3, [r5, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	05db      	lsls	r3, r3, #23
  tickstart = HAL_GetTick();
 8002eae:	4602      	mov	r2, r0
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002eb0:	d41e      	bmi.n	8002ef0 <SPI_DMATransmitReceiveCplt+0x52>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002eb2:	6821      	ldr	r1, [r4, #0]
 8002eb4:	684b      	ldr	r3, [r1, #4]
 8002eb6:	f023 0320 	bic.w	r3, r3, #32
 8002eba:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002ebc:	4620      	mov	r0, r4
 8002ebe:	2164      	movs	r1, #100	; 0x64
 8002ec0:	f7ff fd1e 	bl	8002900 <SPI_EndRxTxTransaction>
 8002ec4:	b118      	cbz	r0, 8002ece <SPI_DMATransmitReceiveCplt+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ec6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ec8:	f043 0320 	orr.w	r3, r3, #32
 8002ecc:	6563      	str	r3, [r4, #84]	; 0x54
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002ece:	6822      	ldr	r2, [r4, #0]
 8002ed0:	6853      	ldr	r3, [r2, #4]
 8002ed2:	f023 0303 	bic.w	r3, r3, #3
 8002ed6:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8002edc:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ee4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ee6:	b11b      	cbz	r3, 8002ef0 <SPI_DMATransmitReceiveCplt+0x52>
      HAL_SPI_ErrorCallback(hspi);
 8002ee8:	4620      	mov	r0, r4
 8002eea:	f7ff ff9d 	bl	8002e28 <HAL_SPI_ErrorCallback>
}
 8002eee:	bd38      	pop	{r3, r4, r5, pc}
  HAL_SPI_TxRxCpltCallback(hspi);
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	f7ff ff8c 	bl	8002e0e <HAL_SPI_TxRxCpltCallback>
 8002ef6:	e7fa      	b.n	8002eee <SPI_DMATransmitReceiveCplt+0x50>

08002ef8 <arm_sqrt_f32>:
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if(in >= 0.0f)
 8002ef8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  {
 8002f00:	b510      	push	{r4, lr}
 8002f02:	4604      	mov	r4, r0
    if(in >= 0.0f)
 8002f04:	db05      	blt.n	8002f12 <arm_sqrt_f32+0x1a>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8002f06:	f003 fc1d 	bl	8006744 <sqrtf>
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8002f0a:	2000      	movs	r0, #0
      *pOut = __builtin_sqrtf(in);
 8002f0c:	ed84 0a00 	vstr	s0, [r4]
    else
    {
      *pOut = 0.0f;
      return (ARM_MATH_ARGUMENT_ERROR);
    }
  }
 8002f10:	bd10      	pop	{r4, pc}
      *pOut = 0.0f;
 8002f12:	2300      	movs	r3, #0
 8002f14:	6003      	str	r3, [r0, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8002f16:	f04f 30ff 	mov.w	r0, #4294967295
 8002f1a:	e7f9      	b.n	8002f10 <arm_sqrt_f32+0x18>

08002f1c <arm_cmplx_mag_f32>:

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 8002f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  uint32_t blkCnt;                               /* loop counter */

  /*loop Unrolling */
  blkCnt = numSamples >> 2u;
 8002f20:	ea4f 0992 	mov.w	r9, r2, lsr #2
{
 8002f24:	4606      	mov	r6, r0
 8002f26:	460d      	mov	r5, r1
 8002f28:	4617      	mov	r7, r2
 8002f2a:	4604      	mov	r4, r0
  blkCnt = numSamples >> 2u;
 8002f2c:	46ca      	mov	sl, r9

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8002f2e:	4688      	mov	r8, r1
 8002f30:	3420      	adds	r4, #32
 8002f32:	f1ba 0f00 	cmp.w	sl, #0
 8002f36:	d10d      	bne.n	8002f54 <arm_cmplx_mag_f32+0x38>
 8002f38:	eb05 1009 	add.w	r0, r5, r9, lsl #4
    blkCnt--;
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4u;
 8002f3c:	f007 0703 	and.w	r7, r7, #3
 8002f40:	eb06 1649 	add.w	r6, r6, r9, lsl #5
 8002f44:	eb00 0787 	add.w	r7, r0, r7, lsl #2

  while(blkCnt > 0u)
 8002f48:	42b8      	cmp	r0, r7
 8002f4a:	f106 0608 	add.w	r6, r6, #8
 8002f4e:	d135      	bne.n	8002fbc <arm_cmplx_mag_f32+0xa0>
    numSamples--;
  }

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 8002f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    imagIn = *pSrc++;
 8002f54:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
    realIn = *pSrc++;
 8002f58:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8002f5c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8002f60:	4640      	mov	r0, r8
 8002f62:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8002f66:	f7ff ffc7 	bl	8002ef8 <arm_sqrt_f32>
    imagIn = *pSrc++;
 8002f6a:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
    realIn = *pSrc++;
 8002f6e:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8002f72:	ee20 0a00 	vmul.f32	s0, s0, s0
 8002f76:	f108 0004 	add.w	r0, r8, #4
 8002f7a:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8002f7e:	f7ff ffbb 	bl	8002ef8 <arm_sqrt_f32>
    imagIn = *pSrc++;
 8002f82:	ed14 0a03 	vldr	s0, [r4, #-12]
    realIn = *pSrc++;
 8002f86:	ed54 7a04 	vldr	s15, [r4, #-16]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8002f8a:	ee20 0a00 	vmul.f32	s0, s0, s0
 8002f8e:	f108 0008 	add.w	r0, r8, #8
 8002f92:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8002f96:	f7ff ffaf 	bl	8002ef8 <arm_sqrt_f32>
    imagIn = *pSrc++;
 8002f9a:	ed14 0a01 	vldr	s0, [r4, #-4]
    realIn = *pSrc++;
 8002f9e:	ed54 7a02 	vldr	s15, [r4, #-8]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8002fa2:	ee20 0a00 	vmul.f32	s0, s0, s0
 8002fa6:	f108 000c 	add.w	r0, r8, #12
 8002faa:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8002fae:	f7ff ffa3 	bl	8002ef8 <arm_sqrt_f32>
    blkCnt--;
 8002fb2:	f10a 3aff 	add.w	sl, sl, #4294967295
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8002fb6:	f108 0810 	add.w	r8, r8, #16
 8002fba:	e7b9      	b.n	8002f30 <arm_cmplx_mag_f32+0x14>
    imagIn = *pSrc++;
 8002fbc:	ed16 0a01 	vldr	s0, [r6, #-4]
    realIn = *pSrc++;
 8002fc0:	ed56 7a02 	vldr	s15, [r6, #-8]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8002fc4:	ee20 0a00 	vmul.f32	s0, s0, s0
 8002fc8:	1d05      	adds	r5, r0, #4
 8002fca:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8002fce:	f7ff ff93 	bl	8002ef8 <arm_sqrt_f32>
 8002fd2:	4628      	mov	r0, r5
 8002fd4:	e7b8      	b.n	8002f48 <arm_cmplx_mag_f32+0x2c>

08002fd6 <arm_max_f32>:
void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 8002fd6:	b5f0      	push	{r4, r5, r6, r7, lr}
  outIndex = 0u;
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 8002fd8:	1e4c      	subs	r4, r1, #1
  out = *pSrc++;
 8002fda:	4606      	mov	r6, r0
  blkCnt = (blockSize - 1u) >> 2u;
 8002fdc:	ea4f 0c94 	mov.w	ip, r4, lsr #2
  count = 0u;
 8002fe0:	2500      	movs	r5, #0
  out = *pSrc++;
 8002fe2:	edd0 7a00 	vldr	s15, [r0]
 8002fe6:	3614      	adds	r6, #20
 8002fe8:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
  outIndex = 0u;
 8002fec:	462f      	mov	r7, r5

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  while(blkCnt > 0u)
 8002fee:	4575      	cmp	r5, lr
 8002ff0:	d10b      	bne.n	800300a <arm_max_f32+0x34>
 8002ff2:	eb00 100c 	add.w	r0, r0, ip, lsl #4
    /* Decrement the loop counter */
    blkCnt--;
  }

  /* if (blockSize - 1u) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 8002ff6:	f004 0403 	and.w	r4, r4, #3
 8002ffa:	3004      	adds	r0, #4
 8002ffc:	1b0c      	subs	r4, r1, r4

  blkCnt = (blockSize - 1u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8002ffe:	42a1      	cmp	r1, r4
 8003000:	d134      	bne.n	800306c <arm_max_f32+0x96>
    blkCnt--;

  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 8003002:	edc2 7a00 	vstr	s15, [r2]
  *pIndex = outIndex;
 8003006:	601f      	str	r7, [r3, #0]
}
 8003008:	bdf0      	pop	{r4, r5, r6, r7, pc}
    maxVal1 = *pSrc++;
 800300a:	ed56 6a04 	vldr	s13, [r6, #-16]
    maxVal2 = *pSrc++;
 800300e:	ed16 7a03 	vldr	s14, [r6, #-12]
    if(out < maxVal1)
 8003012:	eef4 7ae6 	vcmpe.f32	s15, s13
 8003016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      out = maxVal1;
 800301a:	bf48      	it	mi
 800301c:	eef0 7a66 	vmovmi.f32	s15, s13
    if(out < maxVal2)
 8003020:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003024:	bf48      	it	mi
 8003026:	1c6f      	addmi	r7, r5, #1
    maxVal1 = *pSrc++;
 8003028:	ed56 6a02 	vldr	s13, [r6, #-8]
    if(out < maxVal2)
 800302c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      out = maxVal2;
 8003030:	bf48      	it	mi
 8003032:	eef0 7a47 	vmovmi.f32	s15, s14
    if(out < maxVal1)
 8003036:	eef4 7ae6 	vcmpe.f32	s15, s13
 800303a:	bf48      	it	mi
 800303c:	1caf      	addmi	r7, r5, #2
    maxVal2 = *pSrc++;
 800303e:	ed16 7a01 	vldr	s14, [r6, #-4]
    if(out < maxVal1)
 8003042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      out = maxVal1;
 8003046:	bf48      	it	mi
 8003048:	eef0 7a66 	vmovmi.f32	s15, s13
    if(out < maxVal2)
 800304c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003050:	bf48      	it	mi
 8003052:	1cef      	addmi	r7, r5, #3
 8003054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003058:	f105 0504 	add.w	r5, r5, #4
 800305c:	bf54      	ite	pl
 800305e:	eeb0 7a67 	vmovpl.f32	s14, s15
      outIndex = count + 4u;
 8003062:	462f      	movmi	r7, r5
 8003064:	3610      	adds	r6, #16
    count += 4u;
 8003066:	eef0 7a47 	vmov.f32	s15, s14
 800306a:	e7c0      	b.n	8002fee <arm_max_f32+0x18>
    maxVal1 = *pSrc++;
 800306c:	ecb0 7a01 	vldmia	r0!, {s14}
    if(out < maxVal1)
 8003070:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003078:	bf54      	ite	pl
 800307a:	eeb0 7a67 	vmovpl.f32	s14, s15
 800307e:	4627      	movmi	r7, r4
 8003080:	eef0 7a47 	vmov.f32	s15, s14
 8003084:	3401      	adds	r4, #1
 8003086:	e7ba      	b.n	8002ffe <arm_max_f32+0x28>

08003088 <arm_mean_f32>:

void arm_mean_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 8003088:	b530      	push	{r4, r5, lr}
  float32_t sum = 0.0f;                          /* Temporary result storage */
 800308a:	eddf 7a17 	vldr	s15, [pc, #92]	; 80030e8 <arm_mean_f32+0x60>

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t in1, in2, in3, in4;

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 800308e:	088d      	lsrs	r5, r1, #2
 8003090:	4603      	mov	r3, r0
 8003092:	462c      	mov	r4, r5
 8003094:	3310      	adds	r3, #16

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8003096:	b984      	cbnz	r4, 80030ba <arm_mean_f32+0x32>
 8003098:	eb00 1005 	add.w	r0, r0, r5, lsl #4
    blkCnt--;
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 800309c:	f001 0303 	and.w	r3, r1, #3
 80030a0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 80030a4:	4298      	cmp	r0, r3
 80030a6:	d11a      	bne.n	80030de <arm_mean_f32+0x56>
    blkCnt--;
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store the result to the destination */
  *pResult = sum / (float32_t) blockSize;
 80030a8:	ee07 1a10 	vmov	s14, r1
 80030ac:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80030b0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80030b4:	edc2 6a00 	vstr	s13, [r2]
}
 80030b8:	bd30      	pop	{r4, r5, pc}
    sum += in1;
 80030ba:	ed13 7a04 	vldr	s14, [r3, #-16]
 80030be:	ee77 7a87 	vadd.f32	s15, s15, s14
    sum += in2;
 80030c2:	ed13 7a03 	vldr	s14, [r3, #-12]
 80030c6:	ee77 7a87 	vadd.f32	s15, s15, s14
    sum += in3;
 80030ca:	ed13 7a02 	vldr	s14, [r3, #-8]
 80030ce:	ee77 7a87 	vadd.f32	s15, s15, s14
    sum += in4;
 80030d2:	ed13 7a01 	vldr	s14, [r3, #-4]
    blkCnt--;
 80030d6:	3c01      	subs	r4, #1
    sum += in4;
 80030d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80030dc:	e7da      	b.n	8003094 <arm_mean_f32+0xc>
    sum += *pSrc++;
 80030de:	ecb0 7a01 	vldmia	r0!, {s14}
 80030e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80030e6:	e7dd      	b.n	80030a4 <arm_mean_f32+0x1c>
 80030e8:	00000000 	.word	0x00000000

080030ec <arm_min_f32>:
void arm_min_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 80030ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  outIndex = 0u;
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 80030ee:	1e4c      	subs	r4, r1, #1
  out = *pSrc++;
 80030f0:	4606      	mov	r6, r0
  blkCnt = (blockSize - 1u) >> 2u;
 80030f2:	ea4f 0c94 	mov.w	ip, r4, lsr #2
  count = 0u;
 80030f6:	2500      	movs	r5, #0
  out = *pSrc++;
 80030f8:	edd0 7a00 	vldr	s15, [r0]
 80030fc:	3614      	adds	r6, #20
 80030fe:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
  outIndex = 0u;
 8003102:	462f      	mov	r7, r5

  while(blkCnt > 0)
 8003104:	4575      	cmp	r5, lr
 8003106:	d10b      	bne.n	8003120 <arm_min_f32+0x34>
 8003108:	eb00 100c 	add.w	r0, r0, ip, lsl #4

    blkCnt--;
  }

  /* if (blockSize - 1u ) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 800310c:	f004 0403 	and.w	r4, r4, #3
 8003110:	3004      	adds	r0, #4
 8003112:	1b0c      	subs	r4, r1, r4

  blkCnt = (blockSize - 1u);

#endif //      #ifndef ARM_MATH_CM0_FAMILY

  while(blkCnt > 0)
 8003114:	42a1      	cmp	r1, r4
 8003116:	d134      	bne.n	8003182 <arm_min_f32+0x96>
    blkCnt--;

  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
 8003118:	edc2 7a00 	vstr	s15, [r2]
  *pIndex = outIndex;
 800311c:	601f      	str	r7, [r3, #0]
}
 800311e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    minVal1 = *pSrc++;
 8003120:	ed56 6a04 	vldr	s13, [r6, #-16]
    minVal2 = *pSrc++;
 8003124:	ed16 7a03 	vldr	s14, [r6, #-12]
    if(out > minVal1)
 8003128:	eef4 7ae6 	vcmpe.f32	s15, s13
 800312c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      out = minVal1;
 8003130:	bfc8      	it	gt
 8003132:	eef0 7a66 	vmovgt.f32	s15, s13
    if(out > minVal2)
 8003136:	eef4 7ac7 	vcmpe.f32	s15, s14
 800313a:	bfc8      	it	gt
 800313c:	1c6f      	addgt	r7, r5, #1
    minVal1 = *pSrc++;
 800313e:	ed56 6a02 	vldr	s13, [r6, #-8]
    if(out > minVal2)
 8003142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      out = minVal2;
 8003146:	bfc8      	it	gt
 8003148:	eef0 7a47 	vmovgt.f32	s15, s14
    if(out > minVal1)
 800314c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8003150:	bfc8      	it	gt
 8003152:	1caf      	addgt	r7, r5, #2
    minVal2 = *pSrc++;
 8003154:	ed16 7a01 	vldr	s14, [r6, #-4]
    if(out > minVal1)
 8003158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      out = minVal1;
 800315c:	bfc8      	it	gt
 800315e:	eef0 7a66 	vmovgt.f32	s15, s13
    if(out > minVal2)
 8003162:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003166:	bfc8      	it	gt
 8003168:	1cef      	addgt	r7, r5, #3
 800316a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800316e:	f105 0504 	add.w	r5, r5, #4
 8003172:	bfd4      	ite	le
 8003174:	eeb0 7a67 	vmovle.f32	s14, s15
      outIndex = count + 4u;
 8003178:	462f      	movgt	r7, r5
 800317a:	3610      	adds	r6, #16
    count += 4u;
 800317c:	eef0 7a47 	vmov.f32	s15, s14
 8003180:	e7c0      	b.n	8003104 <arm_min_f32+0x18>
    minVal1 = *pSrc++;
 8003182:	ecb0 7a01 	vldmia	r0!, {s14}
    if(out > minVal1)
 8003186:	eef4 7ac7 	vcmpe.f32	s15, s14
 800318a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800318e:	bfd4      	ite	le
 8003190:	eeb0 7a67 	vmovle.f32	s14, s15
 8003194:	4627      	movgt	r7, r4
 8003196:	eef0 7a47 	vmov.f32	s15, s14
 800319a:	3401      	adds	r4, #1
 800319c:	e7ba      	b.n	8003114 <arm_min_f32+0x28>
	...

080031a0 <arm_rms_f32>:
void arm_rms_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
  float32_t sum = 0.0f;                          /* Accumulator */
 80031a0:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800321c <arm_rms_f32+0x7c>
{
 80031a4:	b538      	push	{r3, r4, r5, lr}
 80031a6:	4615      	mov	r5, r2
#ifndef ARM_MATH_CM0_FAMILY

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /* loop Unrolling */
  blkCnt = blockSize >> 2u;
 80031a8:	088a      	lsrs	r2, r1, #2
 80031aa:	4603      	mov	r3, r0
 80031ac:	4614      	mov	r4, r2
 80031ae:	eef0 6a67 	vmov.f32	s13, s15
 80031b2:	3310      	adds	r3, #16

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 80031b4:	b9bc      	cbnz	r4, 80031e6 <arm_rms_f32+0x46>
 80031b6:	eb00 1002 	add.w	r0, r0, r2, lsl #4
    blkCnt--;
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 80031ba:	f001 0303 	and.w	r3, r1, #3
 80031be:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 80031c2:	4298      	cmp	r0, r3
 80031c4:	d121      	bne.n	800320a <arm_rms_f32+0x6a>
    /* Decrement the loop counter */
    blkCnt--;
  }

  /* Compute Rms and store the result in the destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 80031c6:	ee07 1a10 	vmov	s14, r1
 80031ca:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80031ce:	ee87 0a87 	vdiv.f32	s0, s15, s14
    if(in >= 0.0f)
 80031d2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80031d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031da:	db1b      	blt.n	8003214 <arm_rms_f32+0x74>
      *pOut = __builtin_sqrtf(in);
 80031dc:	f003 fab2 	bl	8006744 <sqrtf>
 80031e0:	ed85 0a00 	vstr	s0, [r5]
}
 80031e4:	bd38      	pop	{r3, r4, r5, pc}
    in = *pSrc++;
 80031e6:	ed13 7a04 	vldr	s14, [r3, #-16]
    sum += in * in;
 80031ea:	eee7 7a07 	vfma.f32	s15, s14, s14
    blkCnt--;
 80031ee:	3c01      	subs	r4, #1
    in = *pSrc++;
 80031f0:	ed13 7a03 	vldr	s14, [r3, #-12]
    sum += in * in;
 80031f4:	eee7 7a07 	vfma.f32	s15, s14, s14
    in = *pSrc++;
 80031f8:	ed13 7a02 	vldr	s14, [r3, #-8]
    sum += in * in;
 80031fc:	eee7 7a07 	vfma.f32	s15, s14, s14
    in = *pSrc++;
 8003200:	ed13 7a01 	vldr	s14, [r3, #-4]
    sum += in * in;
 8003204:	eee7 7a07 	vfma.f32	s15, s14, s14
 8003208:	e7d3      	b.n	80031b2 <arm_rms_f32+0x12>
    in = *pSrc++;
 800320a:	ecb0 7a01 	vldmia	r0!, {s14}
    sum += in * in;
 800320e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8003212:	e7d6      	b.n	80031c2 <arm_rms_f32+0x22>
      *pOut = 0.0f;
 8003214:	edc5 6a00 	vstr	s13, [r5]
}
 8003218:	e7e4      	b.n	80031e4 <arm_rms_f32+0x44>
 800321a:	bf00      	nop
 800321c:	00000000 	.word	0x00000000

08003220 <arm_std_f32>:

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t meanOfSquares, mean, squareOfMean;

	if(blockSize == 1)
 8003220:	2901      	cmp	r1, #1
{
 8003222:	b538      	push	{r3, r4, r5, lr}
 8003224:	ed9f 5a2a 	vldr	s10, [pc, #168]	; 80032d0 <arm_std_f32+0xb0>
 8003228:	4615      	mov	r5, r2
	if(blockSize == 1)
 800322a:	d102      	bne.n	8003232 <arm_std_f32+0x12>
	{
		*pResult = 0;
 800322c:	ed85 5a00 	vstr	s10, [r5]
  /* Compute standard deviation and then store the result to the destination */
  arm_sqrt_f32(var, pResult);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 8003230:	bd38      	pop	{r3, r4, r5, pc}
  blkCnt = blockSize >> 2u;
 8003232:	088a      	lsrs	r2, r1, #2
 8003234:	4603      	mov	r3, r0
 8003236:	4614      	mov	r4, r2
  float32_t sumOfSquares = 0.0f;                 /* Sum of squares */
 8003238:	eef0 7a45 	vmov.f32	s15, s10
  float32_t sum = 0.0f;                          /* Temporary result storage */
 800323c:	eeb0 7a45 	vmov.f32	s14, s10
 8003240:	3310      	adds	r3, #16
  while(blkCnt > 0u)
 8003242:	bb1c      	cbnz	r4, 800328c <arm_std_f32+0x6c>
 8003244:	eb00 1002 	add.w	r0, r0, r2, lsl #4
  blkCnt = blockSize % 0x4u;
 8003248:	f001 0303 	and.w	r3, r1, #3
 800324c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  while(blkCnt > 0u)
 8003250:	4298      	cmp	r0, r3
 8003252:	d135      	bne.n	80032c0 <arm_std_f32+0xa0>
  meanOfSquares = sumOfSquares / ((float32_t) blockSize - 1.0f);
 8003254:	ee06 1a90 	vmov	s13, r1
 8003258:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800325c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8003260:	ee76 5ae5 	vsub.f32	s11, s13, s11
  mean = sum / (float32_t) blockSize;
 8003264:	ee87 6a26 	vdiv.f32	s12, s14, s13
  meanOfSquares = sumOfSquares / ((float32_t) blockSize - 1.0f);
 8003268:	ee87 0aa5 	vdiv.f32	s0, s15, s11
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 800326c:	eec6 7aa5 	vdiv.f32	s15, s13, s11
  arm_sqrt_f32((meanOfSquares - squareOfMean), pResult);
 8003270:	ee26 6a46 	vnmul.f32	s12, s12, s12
 8003274:	eea6 0a27 	vfma.f32	s0, s12, s15
    if(in >= 0.0f)
 8003278:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800327c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003280:	dbd4      	blt.n	800322c <arm_std_f32+0xc>
      *pOut = __builtin_sqrtf(in);
 8003282:	f003 fa5f 	bl	8006744 <sqrtf>
 8003286:	ed85 0a00 	vstr	s0, [r5]
 800328a:	e7d1      	b.n	8003230 <arm_std_f32+0x10>
    in = *pSrc++;
 800328c:	ed53 6a04 	vldr	s13, [r3, #-16]
    sumOfSquares += in * in;
 8003290:	eee6 7aa6 	vfma.f32	s15, s13, s13
    blkCnt--;
 8003294:	3c01      	subs	r4, #1
    sum += in;
 8003296:	ee37 7a26 	vadd.f32	s14, s14, s13
    in = *pSrc++;
 800329a:	ed53 6a03 	vldr	s13, [r3, #-12]
    sumOfSquares += in * in;
 800329e:	eee6 7aa6 	vfma.f32	s15, s13, s13
    sum += in;
 80032a2:	ee37 7a26 	vadd.f32	s14, s14, s13
    in = *pSrc++;
 80032a6:	ed53 6a02 	vldr	s13, [r3, #-8]
    sumOfSquares += in * in;
 80032aa:	eee6 7aa6 	vfma.f32	s15, s13, s13
    sum += in;
 80032ae:	ee37 7a26 	vadd.f32	s14, s14, s13
    in = *pSrc++;
 80032b2:	ed53 6a01 	vldr	s13, [r3, #-4]
    sum += in;
 80032b6:	ee37 7a26 	vadd.f32	s14, s14, s13
    sumOfSquares += in * in;
 80032ba:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80032be:	e7bf      	b.n	8003240 <arm_std_f32+0x20>
    in = *pSrc++;
 80032c0:	ecf0 6a01 	vldmia	r0!, {s13}
    sum += in;
 80032c4:	ee37 7a26 	vadd.f32	s14, s14, s13
    sumOfSquares += in * in;
 80032c8:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80032cc:	e7c0      	b.n	8003250 <arm_std_f32+0x30>
 80032ce:	bf00      	nop
 80032d0:	00000000 	.word	0x00000000

080032d4 <arm_var_f32>:
   
  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t meanOfSquares, mean, squareOfMean;   /* Temporary variables */

	if(blockSize == 1)
 80032d4:	2901      	cmp	r1, #1
{
 80032d6:	b530      	push	{r4, r5, lr}
 80032d8:	eddf 7a25 	vldr	s15, [pc, #148]	; 8003370 <arm_var_f32+0x9c>
	if(blockSize == 1)
 80032dc:	d102      	bne.n	80032e4 <arm_var_f32+0x10>
  /* Compute square of mean */
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
                                  ((float32_t) blockSize - 1.0f));

  /* Compute variance and then store the result to the destination */
  *pResult = meanOfSquares - squareOfMean;
 80032de:	edc2 7a00 	vstr	s15, [r2]
  /* Compute the variance */
  *pResult = ((sumOfSquares - squareOfSum) / (float32_t) (blockSize - 1.0f));

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 80032e2:	bd30      	pop	{r4, r5, pc}
  blkCnt = blockSize >> 2u;
 80032e4:	088d      	lsrs	r5, r1, #2
 80032e6:	4603      	mov	r3, r0
 80032e8:	462c      	mov	r4, r5
  float32_t sum = 0.0f;                          /* Temporary result storage */
 80032ea:	eeb0 7a67 	vmov.f32	s14, s15
 80032ee:	3310      	adds	r3, #16
  while(blkCnt > 0u)
 80032f0:	b9e4      	cbnz	r4, 800332c <arm_var_f32+0x58>
 80032f2:	eb00 1005 	add.w	r0, r0, r5, lsl #4
  blkCnt = blockSize % 0x4u;
 80032f6:	f001 0303 	and.w	r3, r1, #3
 80032fa:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  while(blkCnt > 0u)
 80032fe:	4298      	cmp	r0, r3
 8003300:	d12e      	bne.n	8003360 <arm_var_f32+0x8c>
  meanOfSquares = sumOfSquares / ((float32_t) blockSize - 1.0f);
 8003302:	ee06 1a90 	vmov	s13, r1
 8003306:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800330a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800330e:	ee76 5ae5 	vsub.f32	s11, s13, s11
  mean = sum / (float32_t) blockSize;
 8003312:	ee87 6a26 	vdiv.f32	s12, s14, s13
  meanOfSquares = sumOfSquares / ((float32_t) blockSize - 1.0f);
 8003316:	ee87 7aa5 	vdiv.f32	s14, s15, s11
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 800331a:	eec6 7aa5 	vdiv.f32	s15, s13, s11
  *pResult = meanOfSquares - squareOfMean;
 800331e:	ee26 6a46 	vnmul.f32	s12, s12, s12
 8003322:	eea6 7a27 	vfma.f32	s14, s12, s15
 8003326:	eef0 7a47 	vmov.f32	s15, s14
 800332a:	e7d8      	b.n	80032de <arm_var_f32+0xa>
    in = *pSrc++;
 800332c:	ed53 6a04 	vldr	s13, [r3, #-16]
    sumOfSquares += in * in;
 8003330:	eee6 7aa6 	vfma.f32	s15, s13, s13
    blkCnt--;
 8003334:	3c01      	subs	r4, #1
    sum += in;
 8003336:	ee37 7a26 	vadd.f32	s14, s14, s13
    in = *pSrc++;
 800333a:	ed53 6a03 	vldr	s13, [r3, #-12]
    sumOfSquares += in * in;
 800333e:	eee6 7aa6 	vfma.f32	s15, s13, s13
    sum += in;
 8003342:	ee37 7a26 	vadd.f32	s14, s14, s13
    in = *pSrc++;
 8003346:	ed53 6a02 	vldr	s13, [r3, #-8]
    sumOfSquares += in * in;
 800334a:	eee6 7aa6 	vfma.f32	s15, s13, s13
    sum += in;
 800334e:	ee37 7a26 	vadd.f32	s14, s14, s13
    in = *pSrc++;
 8003352:	ed53 6a01 	vldr	s13, [r3, #-4]
    sum += in;
 8003356:	ee37 7a26 	vadd.f32	s14, s14, s13
    sumOfSquares += in * in;
 800335a:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800335e:	e7c6      	b.n	80032ee <arm_var_f32+0x1a>
    in = *pSrc++;
 8003360:	ecf0 6a01 	vldmia	r0!, {s13}
    sum += in;
 8003364:	ee37 7a26 	vadd.f32	s14, s14, s13
    sumOfSquares += in * in;
 8003368:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800336c:	e7c7      	b.n	80032fe <arm_var_f32+0x2a>
 800336e:	bf00      	nop
 8003370:	00000000 	.word	0x00000000

08003374 <arm_cfft_radix8by2_f32>:
* \endcode
* 
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 8003374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003378:	4681      	mov	r9, r0
 800337a:	ed2d 8b02 	vpush	{d8}
    uint32_t    L  = S->fftLen;
 800337e:	f8b9 7000 	ldrh.w	r7, [r9]
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
    const float32_t * tw = (float32_t *) S->pTwiddle;
 8003382:	f8d9 2004 	ldr.w	r2, [r9, #4]
    float32_t * p2 = p1 + L;
 8003386:	eb01 0887 	add.w	r8, r1, r7, lsl #2
{
 800338a:	4608      	mov	r0, r1

    pCol1 = p1;
    pCol2 = p2;

    //    Define new length
    L >>= 1;
 800338c:	0879      	lsrs	r1, r7, #1
    //    Initialize mid pointers
    pMid1 = p1 + L;
 800338e:	008b      	lsls	r3, r1, #2
    pMid2 = p2 + L;

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- ) 
 8003390:	08ff      	lsrs	r7, r7, #3
    pMid1 = p1 + L;
 8003392:	18c5      	adds	r5, r0, r3
 8003394:	4606      	mov	r6, r0
    pMid2 = p2 + L;
 8003396:	4443      	add	r3, r8
 8003398:	4644      	mov	r4, r8
 800339a:	eb02 1707 	add.w	r7, r2, r7, lsl #4
    const float32_t * tw = (float32_t *) S->pTwiddle;
 800339e:	4694      	mov	ip, r2
    for ( l = L >> 2; l > 0; l-- ) 
 80033a0:	45bc      	cmp	ip, r7
 80033a2:	f106 0610 	add.w	r6, r6, #16
 80033a6:	f105 0510 	add.w	r5, r5, #16
 80033aa:	f103 0310 	add.w	r3, r3, #16
 80033ae:	f104 0410 	add.w	r4, r4, #16
 80033b2:	d10f      	bne.n	80033d4 <arm_cfft_radix8by2_f32+0x60>
        *pMid2++ = m0 - m1;
        *pMid2++ = m2 + m3;
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2u);
 80033b4:	b28c      	uxth	r4, r1
 80033b6:	4621      	mov	r1, r4
 80033b8:	2302      	movs	r3, #2
 80033ba:	f000 fafb 	bl	80039b4 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
}
 80033be:	ecbd 8b02 	vpop	{d8}
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
 80033c2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80033c6:	4621      	mov	r1, r4
 80033c8:	4640      	mov	r0, r8
 80033ca:	2302      	movs	r3, #2
}
 80033cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
 80033d0:	f000 baf0 	b.w	80039b4 <arm_radix8_butterfly_f32>
        t2[0] = p2[0];
 80033d4:	ed14 0a04 	vldr	s0, [r4, #-16]
        t1[0] = p1[0];
 80033d8:	ed16 6a04 	vldr	s12, [r6, #-16]
        t2[1] = p2[1];
 80033dc:	ed54 0a03 	vldr	s1, [r4, #-12]
        t1[1] = p1[1];
 80033e0:	ed16 4a03 	vldr	s8, [r6, #-12]
        t4[0] = pMid2[0];
 80033e4:	ed53 6a04 	vldr	s13, [r3, #-16]
        t4[1] = pMid2[1];
 80033e8:	ed53 4a03 	vldr	s9, [r3, #-12]
        t2[2] = p2[2];
 80033ec:	ed14 7a02 	vldr	s14, [r4, #-8]
        t2[3] = p2[3];
 80033f0:	ed14 5a01 	vldr	s10, [r4, #-4]
        t3[1] = pMid1[1];
 80033f4:	ed55 2a03 	vldr	s5, [r5, #-12]
        t3[2] = pMid1[2];
 80033f8:	ed15 3a02 	vldr	s6, [r5, #-8]
        t3[3] = pMid1[3];
 80033fc:	ed55 3a01 	vldr	s7, [r5, #-4]
        t4[2] = pMid2[2];
 8003400:	ed53 7a02 	vldr	s15, [r3, #-8]
        t4[3] = pMid2[3];
 8003404:	ed53 5a01 	vldr	s11, [r3, #-4]
        t1[2] = p1[2];
 8003408:	ed16 1a02 	vldr	s2, [r6, #-8]
        t3[0] = pMid1[0];
 800340c:	ed15 2a04 	vldr	s4, [r5, #-16]
        t1[3] = p1[3];
 8003410:	ed56 1a01 	vldr	s3, [r6, #-4]
        *p1++ = t1[0] + t2[0];
 8003414:	ee36 8a00 	vadd.f32	s16, s12, s0
        t2[0] = t1[0] - t2[0];
 8003418:	ee36 6a40 	vsub.f32	s12, s12, s0
        *p1++ = t1[0] + t2[0];
 800341c:	ed06 8a04 	vstr	s16, [r6, #-16]
        *p1++ = t1[1] + t2[1];
 8003420:	ee34 8a20 	vadd.f32	s16, s8, s1
        t2[1] = t1[1] - t2[1];
 8003424:	ee34 4a60 	vsub.f32	s8, s8, s1
        *p1++ = t1[1] + t2[1];
 8003428:	ed06 8a03 	vstr	s16, [r6, #-12]
        *p1++ = t1[2] + t2[2];
 800342c:	ee31 8a07 	vadd.f32	s16, s2, s14
 8003430:	f10c 0c10 	add.w	ip, ip, #16
 8003434:	ed06 8a02 	vstr	s16, [r6, #-8]
        *p1++ = t1[3] + t2[3];    // col 1
 8003438:	ee31 8a85 	vadd.f32	s16, s3, s10
        t2[3] = t1[3] - t2[3];    // for col 2
 800343c:	ee31 5ac5 	vsub.f32	s10, s3, s10
        *pMid1++ = t3[0] + t4[0];
 8003440:	ee72 1a26 	vadd.f32	s3, s4, s13
        *p1++ = t1[3] + t2[3];    // col 1
 8003444:	ed06 8a01 	vstr	s16, [r6, #-4]
        *pMid1++ = t3[0] + t4[0];
 8003448:	ed45 1a04 	vstr	s3, [r5, #-16]
        *pMid1++ = t3[1] + t4[1];
 800344c:	ee72 1aa4 	vadd.f32	s3, s5, s9
        t4[1] = t4[1] - t3[1];
 8003450:	ee74 4ae2 	vsub.f32	s9, s9, s5
        *pMid1++ = t3[1] + t4[1];
 8003454:	ed45 1a03 	vstr	s3, [r5, #-12]
        *pMid1++ = t3[2] + t4[2];
 8003458:	ee73 1a27 	vadd.f32	s3, s6, s15
        t4[2] = t4[2] - t3[2];
 800345c:	ee77 7ac3 	vsub.f32	s15, s15, s6
        *pMid1++ = t3[2] + t4[2];
 8003460:	ed45 1a02 	vstr	s3, [r5, #-8]
        *pMid1++ = t3[3] + t4[3]; // col 1
 8003464:	ee73 1aa5 	vadd.f32	s3, s7, s11
        t4[3] = t4[3] - t3[3];    // for col 2
 8003468:	ee75 5ae3 	vsub.f32	s11, s11, s7
        *pMid1++ = t3[3] + t4[3]; // col 1
 800346c:	ed45 1a01 	vstr	s3, [r5, #-4]
        twI = *tw++;
 8003470:	ed5c 3a03 	vldr	s7, [ip, #-12]
        twR = *tw++;
 8003474:	ed1c 3a04 	vldr	s6, [ip, #-16]
        m1 = t2[1] * twI;
 8003478:	ee64 2a23 	vmul.f32	s5, s8, s7
        t4[0] = t4[0] - t3[0];
 800347c:	ee76 6ac2 	vsub.f32	s13, s13, s4
        *p2++ = m0 + m1;
 8003480:	eee6 2a03 	vfma.f32	s5, s12, s6
        *p2++ = m2 - m3;
 8003484:	ee23 6ac6 	vnmul.f32	s12, s7, s12
        *p2++ = m0 + m1;
 8003488:	ed44 2a04 	vstr	s5, [r4, #-16]
        *p2++ = m2 - m3;
 800348c:	eea4 6a03 	vfma.f32	s12, s8, s6
        t2[2] = t1[2] - t2[2];
 8003490:	ee31 7a47 	vsub.f32	s14, s2, s14
        *p2++ = m2 - m3;
 8003494:	ed04 6a03 	vstr	s12, [r4, #-12]
        *pMid2++ = m0 - m1;
 8003498:	ee23 6a64 	vnmul.f32	s12, s6, s9
 800349c:	eea6 6aa3 	vfma.f32	s12, s13, s7
        m3 = t4[0] * twR;
 80034a0:	ee66 6a83 	vmul.f32	s13, s13, s6
        *pMid2++ = m0 - m1;
 80034a4:	ed03 6a04 	vstr	s12, [r3, #-16]
        *pMid2++ = m2 + m3;
 80034a8:	eee4 6aa3 	vfma.f32	s13, s9, s7
 80034ac:	ed43 6a03 	vstr	s13, [r3, #-12]
        twR = *tw++;
 80034b0:	ed1c 6a02 	vldr	s12, [ip, #-8]
        twI = *tw++;
 80034b4:	ed5c 6a01 	vldr	s13, [ip, #-4]
        m1 = t2[3] * twI;
 80034b8:	ee65 4a26 	vmul.f32	s9, s10, s13
        *p2++ = m0 + m1;
 80034bc:	eee7 4a06 	vfma.f32	s9, s14, s12
        *p2++ = m2 - m3;
 80034c0:	ee26 7ac7 	vnmul.f32	s14, s13, s14
        *p2++ = m0 + m1;
 80034c4:	ed44 4a02 	vstr	s9, [r4, #-8]
        *p2++ = m2 - m3;
 80034c8:	eea5 7a06 	vfma.f32	s14, s10, s12
 80034cc:	ed04 7a01 	vstr	s14, [r4, #-4]
        *pMid2++ = m0 - m1;
 80034d0:	ee26 7a65 	vnmul.f32	s14, s12, s11
 80034d4:	eea7 7aa6 	vfma.f32	s14, s15, s13
        m3 = t4[2] * twR;
 80034d8:	ee67 7a86 	vmul.f32	s15, s15, s12
        *pMid2++ = m0 - m1;
 80034dc:	ed03 7a02 	vstr	s14, [r3, #-8]
        *pMid2++ = m2 + m3;
 80034e0:	eee5 7aa6 	vfma.f32	s15, s11, s13
 80034e4:	ed43 7a01 	vstr	s15, [r3, #-4]
 80034e8:	e75a      	b.n	80033a0 <arm_cfft_radix8by2_f32+0x2c>

080034ea <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 80034ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034ee:	ed2d 8b04 	vpush	{d8-d9}
 80034f2:	b08f      	sub	sp, #60	; 0x3c
 80034f4:	9003      	str	r0, [sp, #12]
    uint32_t    L  = S->fftLen >> 1;
 80034f6:	9b03      	ldr	r3, [sp, #12]
    pEnd1 = p2 - 1;     // points to imaginary values by default
    pEnd2 = p3 - 1;
    pEnd3 = p4 - 1;
    pEnd4 = pEnd3 + L;

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 80034f8:	9a03      	ldr	r2, [sp, #12]
{
 80034fa:	4608      	mov	r0, r1
    uint32_t    L  = S->fftLen >> 1;
 80034fc:	8819      	ldrh	r1, [r3, #0]
    twMod2 = 2;
    twMod3 = 4;
    twMod4 = 6;

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 80034fe:	edd0 7a00 	vldr	s15, [r0]
    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8003502:	6852      	ldr	r2, [r2, #4]
 8003504:	9202      	str	r2, [sp, #8]
    uint32_t    L  = S->fftLen >> 1;
 8003506:	0849      	lsrs	r1, r1, #1
    float32_t * p2 = p1 + L;
 8003508:	008b      	lsls	r3, r1, #2
 800350a:	18c4      	adds	r4, r0, r3
    float32_t * p3 = p2 + L;
 800350c:	18e6      	adds	r6, r4, r3
    p1ap3_0 = p1[0] + p3[0];
 800350e:	ed96 7a00 	vldr	s14, [r6]
    p1sp3_0 = p1[0] - p3[0];
    p1ap3_1 = p1[1] + p3[1];
 8003512:	edd6 5a01 	vldr	s11, [r6, #4]
    p1sp3_1 = p1[1] - p3[1];

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8003516:	edd4 3a01 	vldr	s7, [r4, #4]
    p1ap3_0 = p1[0] + p3[0];
 800351a:	ee37 6a87 	vadd.f32	s12, s15, s14
    p1sp3_0 = p1[0] - p3[0];
 800351e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    p1ap3_1 = p1[1] + p3[1];
 8003522:	ed90 7a01 	vldr	s14, [r0, #4]
 8003526:	ee77 6a25 	vadd.f32	s13, s14, s11
    p1sp3_1 = p1[1] - p3[1];
 800352a:	ee77 5a65 	vsub.f32	s11, s14, s11
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800352e:	ed94 7a00 	vldr	s14, [r4]
    float32_t * p4 = p3 + L;
 8003532:	18f5      	adds	r5, r6, r3
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8003534:	edd5 4a00 	vldr	s9, [r5]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8003538:	ed95 4a01 	vldr	s8, [r5, #4]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800353c:	ee37 5a06 	vadd.f32	s10, s14, s12
    L >>= 1;
 8003540:	084a      	lsrs	r2, r1, #1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8003542:	ee35 5a24 	vadd.f32	s10, s10, s9
    L >>= 1;
 8003546:	9208      	str	r2, [sp, #32]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8003548:	ee15 1a10 	vmov	r1, s10
 800354c:	4602      	mov	r2, r0
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800354e:	ee36 6a47 	vsub.f32	s12, s12, s14
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8003552:	f842 1b08 	str.w	r1, [r2], #8
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8003556:	ed94 5a01 	vldr	s10, [r4, #4]
 800355a:	ed95 3a01 	vldr	s6, [r5, #4]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800355e:	920a      	str	r2, [sp, #40]	; 0x28
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8003560:	ee36 5a85 	vadd.f32	s10, s13, s10

    // Twiddle factors are ones
    *p2++ = t2[0];
 8003564:	4622      	mov	r2, r4
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8003566:	ee35 5a03 	vadd.f32	s10, s10, s6
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800356a:	ee36 6a64 	vsub.f32	s12, s12, s9
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800356e:	ed80 5a01 	vstr	s10, [r0, #4]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8003572:	ee33 5aa7 	vadd.f32	s10, s7, s15
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8003576:	ee77 7ae3 	vsub.f32	s15, s15, s7
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800357a:	ee35 5a44 	vsub.f32	s10, s10, s8
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800357e:	ee76 6ae3 	vsub.f32	s13, s13, s7
    *p2++ = t2[0];
 8003582:	ee15 1a10 	vmov	r1, s10
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8003586:	ee35 5ac7 	vsub.f32	s10, s11, s14
    *p2++ = t2[0];
 800358a:	f842 1b08 	str.w	r1, [r2], #8
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800358e:	ee35 5a24 	vadd.f32	s10, s10, s9
    *p2++ = t2[0];
 8003592:	920b      	str	r2, [sp, #44]	; 0x2c
    *p2++ = t2[1];
    *p3++ = t3[0];
 8003594:	ee16 1a10 	vmov	r1, s12
 8003598:	4632      	mov	r2, r6
    *p2++ = t2[1];
 800359a:	ed84 5a01 	vstr	s10, [r4, #4]
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800359e:	ee77 7a84 	vadd.f32	s15, s15, s8
    *p3++ = t3[0];
 80035a2:	f842 1b08 	str.w	r1, [r2], #8
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80035a6:	ee76 6ac4 	vsub.f32	s13, s13, s8
    *p3++ = t3[0];
 80035aa:	920c      	str	r2, [sp, #48]	; 0x30
    *p3++ = t3[1];
    *p4++ = t4[0];
 80035ac:	ee17 1a90 	vmov	r1, s15
 80035b0:	462a      	mov	r2, r5
    *p3++ = t3[1];
 80035b2:	edc6 6a01 	vstr	s13, [r6, #4]
    *p4++ = t4[0];
 80035b6:	f842 1b08 	str.w	r1, [r2], #8
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80035ba:	ee37 7a25 	vadd.f32	s14, s14, s11
    *p4++ = t4[0];
 80035be:	920d      	str	r2, [sp, #52]	; 0x34
    *p4++ = t4[1];

    tw2 += twMod2;
 80035c0:	9a02      	ldr	r2, [sp, #8]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80035c2:	ee37 7a64 	vsub.f32	s14, s14, s9
    tw2 += twMod2;
 80035c6:	3208      	adds	r2, #8
    *p4++ = t4[1];
 80035c8:	ed85 7a01 	vstr	s14, [r5, #4]
    tw2 += twMod2;
 80035cc:	9209      	str	r2, [sp, #36]	; 0x24
    tw3 += twMod3;
    tw4 += twMod4;

    for (l = (L - 2) >> 1; l > 0; l-- ) 
 80035ce:	9a08      	ldr	r2, [sp, #32]
 80035d0:	1e91      	subs	r1, r2, #2
 80035d2:	084a      	lsrs	r2, r1, #1
 80035d4:	9204      	str	r2, [sp, #16]
 80035d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035d8:	9205      	str	r2, [sp, #20]
 80035da:	f1a5 0c04 	sub.w	ip, r5, #4
 80035de:	9a04      	ldr	r2, [sp, #16]
 80035e0:	9207      	str	r2, [sp, #28]
    pEnd4 = pEnd3 + L;
 80035e2:	4463      	add	r3, ip
    for (l = (L - 2) >> 1; l > 0; l-- ) 
 80035e4:	2200      	movs	r2, #0
    pEnd1 = p2 - 1;     // points to imaginary values by default
 80035e6:	f1a4 0a04 	sub.w	sl, r4, #4
    pEnd2 = p3 - 1;
 80035ea:	f1a6 0e04 	sub.w	lr, r6, #4
    pEnd4 = pEnd3 + L;
 80035ee:	9301      	str	r3, [sp, #4]
 80035f0:	f100 0910 	add.w	r9, r0, #16
 80035f4:	f104 0710 	add.w	r7, r4, #16
 80035f8:	f106 0810 	add.w	r8, r6, #16
 80035fc:	f105 0110 	add.w	r1, r5, #16
    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8003600:	9206      	str	r2, [sp, #24]
 8003602:	9a06      	ldr	r2, [sp, #24]
 8003604:	ed18 7a02 	vldr	s14, [r8, #-8]
 8003608:	ed58 2a01 	vldr	s5, [r8, #-4]
 800360c:	ed19 5a02 	vldr	s10, [r9, #-8]
 8003610:	ed19 6a01 	vldr	s12, [r9, #-4]
 8003614:	ed57 5a02 	vldr	s11, [r7, #-8]
 8003618:	ed57 7a01 	vldr	s15, [r7, #-4]
 800361c:	9b01      	ldr	r3, [sp, #4]
 800361e:	ed11 4a02 	vldr	s8, [r1, #-8]
 8003622:	ed11 3a01 	vldr	s6, [r1, #-4]
 8003626:	3a08      	subs	r2, #8
 8003628:	9206      	str	r2, [sp, #24]
 800362a:	9a05      	ldr	r2, [sp, #20]
 800362c:	ee75 3a47 	vsub.f32	s7, s10, s14
 8003630:	ee76 4a62 	vsub.f32	s9, s12, s5
 8003634:	ee35 5a07 	vadd.f32	s10, s10, s14
 8003638:	ee36 6a22 	vadd.f32	s12, s12, s5
 800363c:	3208      	adds	r2, #8
 800363e:	ee34 2ae5 	vsub.f32	s4, s9, s11
 8003642:	ee77 6aa3 	vadd.f32	s13, s15, s7
 8003646:	ee35 7a65 	vsub.f32	s14, s10, s11
 800364a:	ee76 2a67 	vsub.f32	s5, s12, s15
 800364e:	ee75 4aa4 	vadd.f32	s9, s11, s9
 8003652:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8003656:	ee75 5a85 	vadd.f32	s11, s11, s10
 800365a:	9205      	str	r2, [sp, #20]
 800365c:	9a07      	ldr	r2, [sp, #28]
 800365e:	3b08      	subs	r3, #8
 8003660:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8003664:	ee32 2a04 	vadd.f32	s4, s4, s8
 8003668:	ee37 7a44 	vsub.f32	s14, s14, s8
 800366c:	ee72 2ac3 	vsub.f32	s5, s5, s6
 8003670:	ee77 7a83 	vadd.f32	s15, s15, s6
 8003674:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8003678:	ee75 5a84 	vadd.f32	s11, s11, s8
 800367c:	f1aa 0a08 	sub.w	sl, sl, #8
 8003680:	f1ae 0e08 	sub.w	lr, lr, #8
 8003684:	f1ac 0c08 	sub.w	ip, ip, #8
 8003688:	9301      	str	r3, [sp, #4]
 800368a:	f109 0908 	add.w	r9, r9, #8
 800368e:	3708      	adds	r7, #8
 8003690:	f108 0808 	add.w	r8, r8, #8
 8003694:	3108      	adds	r1, #8
 8003696:	2a00      	cmp	r2, #0
 8003698:	d174      	bne.n	8003784 <arm_cfft_radix8by4_f32+0x29a>
 800369a:	9b04      	ldr	r3, [sp, #16]
 800369c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800369e:	00df      	lsls	r7, r3, #3
 80036a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036a2:	443a      	add	r2, r7
 80036a4:	443b      	add	r3, r7
 80036a6:	469a      	mov	sl, r3
 80036a8:	4611      	mov	r1, r2
 80036aa:	9b02      	ldr	r3, [sp, #8]
 80036ac:	9a04      	ldr	r2, [sp, #16]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80036ae:	edca 5a00 	vstr	s11, [sl]
 80036b2:	f04f 0e18 	mov.w	lr, #24
 80036b6:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 80036ba:	fb0e 3e02 	mla	lr, lr, r2, r3
 80036be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80036c0:	443a      	add	r2, r7
 80036c2:	4690      	mov	r8, r2
 80036c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80036c6:	edd8 5a01 	vldr	s11, [r8, #4]
 80036ca:	443a      	add	r2, r7
 80036cc:	4691      	mov	r9, r2
 80036ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80036d0:	443a      	add	r2, r7
 80036d2:	ee36 6a25 	vadd.f32	s12, s12, s11
 80036d6:	edd2 5a01 	vldr	s11, [r2, #4]

    *p4++ = m0 + m1;
    *p4++ = m2 - m3;

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 80036da:	f8bd 7020 	ldrh.w	r7, [sp, #32]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80036de:	ee36 6a25 	vadd.f32	s12, s12, s11
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 80036e2:	2304      	movs	r3, #4
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80036e4:	ed8a 6a01 	vstr	s12, [sl, #4]
    twI = tw2[1];
 80036e8:	ed91 5a01 	vldr	s10, [r1, #4]
    twR = tw2[0];
 80036ec:	edd1 5a00 	vldr	s11, [r1]
    m1 = t2[1] * twI;
 80036f0:	ee25 6a02 	vmul.f32	s12, s10, s4
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 80036f4:	4639      	mov	r1, r7
    *p2++ = m0 + m1;
 80036f6:	eea5 6aa6 	vfma.f32	s12, s11, s13
    *p2++ = m2 - m3;
 80036fa:	ee66 6ac5 	vnmul.f32	s13, s13, s10
    *p2++ = m0 + m1;
 80036fe:	ed88 6a00 	vstr	s12, [r8]
    *p2++ = m2 - m3;
 8003702:	eee5 6a82 	vfma.f32	s13, s11, s4
 8003706:	edc8 6a01 	vstr	s13, [r8, #4]
    twI = tw3[1];
 800370a:	eddc 5a05 	vldr	s11, [ip, #20]
    twR = tw3[0];
 800370e:	ed9c 6a04 	vldr	s12, [ip, #16]
    m1 = t3[1] * twI;
 8003712:	ee65 6aa2 	vmul.f32	s13, s11, s5
    *p3++ = m0 + m1;
 8003716:	eee6 6a07 	vfma.f32	s13, s12, s14
    *p3++ = m2 - m3;
 800371a:	ee27 7a65 	vnmul.f32	s14, s14, s11
    *p3++ = m0 + m1;
 800371e:	edc9 6a00 	vstr	s13, [r9]
    *p3++ = m2 - m3;
 8003722:	eea6 7a22 	vfma.f32	s14, s12, s5
 8003726:	ed89 7a01 	vstr	s14, [r9, #4]
    twI = tw4[1];
 800372a:	ed9e 6a07 	vldr	s12, [lr, #28]
    twR = tw4[0];
 800372e:	edde 6a06 	vldr	s13, [lr, #24]
    m1 = t4[1] * twI;
 8003732:	ee26 7a24 	vmul.f32	s14, s12, s9
    *p4++ = m0 + m1;
 8003736:	eea6 7aa7 	vfma.f32	s14, s13, s15
    *p4++ = m2 - m3;
 800373a:	ee67 7ac6 	vnmul.f32	s15, s15, s12
    *p4++ = m0 + m1;
 800373e:	ed82 7a00 	vstr	s14, [r2]
    *p4++ = m2 - m3;
 8003742:	eee6 7aa4 	vfma.f32	s15, s13, s9
 8003746:	edc2 7a01 	vstr	s15, [r2, #4]
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 800374a:	9a02      	ldr	r2, [sp, #8]
 800374c:	f000 f932 	bl	80039b4 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4u);
 8003750:	9a03      	ldr	r2, [sp, #12]
 8003752:	4639      	mov	r1, r7
 8003754:	4620      	mov	r0, r4
 8003756:	2304      	movs	r3, #4
 8003758:	6852      	ldr	r2, [r2, #4]
 800375a:	f000 f92b 	bl	80039b4 <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4u);
 800375e:	9a03      	ldr	r2, [sp, #12]
 8003760:	4639      	mov	r1, r7
 8003762:	4630      	mov	r0, r6
 8003764:	2304      	movs	r3, #4
 8003766:	6852      	ldr	r2, [r2, #4]
 8003768:	f000 f924 	bl	80039b4 <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4u);
 800376c:	9a03      	ldr	r2, [sp, #12]
 800376e:	6852      	ldr	r2, [r2, #4]
 8003770:	2304      	movs	r3, #4
 8003772:	4639      	mov	r1, r7
 8003774:	4628      	mov	r0, r5
}
 8003776:	b00f      	add	sp, #60	; 0x3c
 8003778:	ecbd 8b04 	vpop	{d8-d9}
 800377c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4u);
 8003780:	f000 b918 	b.w	80039b4 <arm_radix8_butterfly_f32>
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 8003784:	ed49 5a04 	vstr	s11, [r9, #-16]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8003788:	ed57 5a03 	vldr	s11, [r7, #-12]
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 800378c:	9b01      	ldr	r3, [sp, #4]
        twR = *tw2++;
 800378e:	9a05      	ldr	r2, [sp, #20]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8003790:	ee36 6a25 	vadd.f32	s12, s12, s11
 8003794:	ed51 5a03 	vldr	s11, [r1, #-12]
 8003798:	ee36 6a25 	vadd.f32	s12, s12, s11
 800379c:	f06f 0b01 	mvn.w	fp, #1
 80037a0:	ed09 6a03 	vstr	s12, [r9, #-12]
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 80037a4:	ed9c 6a01 	vldr	s12, [ip, #4]
 80037a8:	edda 1a01 	vldr	s3, [sl, #4]
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 80037ac:	edda 3a02 	vldr	s7, [sl, #8]
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 80037b0:	edd3 0a02 	vldr	s1, [r3, #8]
 80037b4:	ed9e 5a02 	vldr	s10, [lr, #8]
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 80037b8:	ed93 3a01 	vldr	s6, [r3, #4]
 80037bc:	ed9e 8a01 	vldr	s16, [lr, #4]
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 80037c0:	ee31 4a86 	vadd.f32	s8, s3, s12
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 80037c4:	ee71 1ac6 	vsub.f32	s3, s3, s12
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 80037c8:	ed9c 6a02 	vldr	s12, [ip, #8]
 80037cc:	ee73 8a86 	vadd.f32	s17, s7, s12
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 80037d0:	ee35 9a60 	vsub.f32	s18, s10, s1
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 80037d4:	ee73 3ac6 	vsub.f32	s7, s7, s12
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 80037d8:	ee38 6ac5 	vsub.f32	s12, s17, s10
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 80037dc:	ee35 5a28 	vadd.f32	s10, s10, s17
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 80037e0:	ee34 1a48 	vsub.f32	s2, s8, s16
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 80037e4:	ee35 5a20 	vadd.f32	s10, s10, s1
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 80037e8:	ee73 5ac8 	vsub.f32	s11, s7, s16
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 80037ec:	ed8a 5a02 	vstr	s10, [sl, #8]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 80037f0:	ed9e 5a01 	vldr	s10, [lr, #4]
 80037f4:	ee34 4a05 	vadd.f32	s8, s8, s10
 80037f8:	ed93 5a01 	vldr	s10, [r3, #4]
 80037fc:	9b02      	ldr	r3, [sp, #8]
 80037fe:	ee34 4a05 	vadd.f32	s8, s8, s10
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8003802:	ee75 5a83 	vadd.f32	s11, s11, s6
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8003806:	ed8a 4a01 	vstr	s8, [sl, #4]
        twI = *tw2++;
 800380a:	ed12 5a01 	vldr	s10, [r2, #-4]
        twR = *tw2++;
 800380e:	ed12 4a02 	vldr	s8, [r2, #-8]
 8003812:	9a06      	ldr	r2, [sp, #24]
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8003814:	ee31 1a43 	vsub.f32	s2, s2, s6
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8003818:	ee33 3a48 	vsub.f32	s6, s6, s16
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 800381c:	ee39 0a21 	vadd.f32	s0, s18, s3
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8003820:	ee73 3a63 	vsub.f32	s7, s6, s7
        m1 = t2[1] * twI;
 8003824:	ee25 3a02 	vmul.f32	s6, s10, s4
 8003828:	fb0b 3b02 	mla	fp, fp, r2, r3
        *p2++ = m0 + m1;
 800382c:	eea4 3a26 	vfma.f32	s6, s8, s13
        *p2++ = m2 - m3;
 8003830:	ee66 6ac5 	vnmul.f32	s13, s13, s10
        *p2++ = m0 + m1;
 8003834:	ed07 3a04 	vstr	s6, [r7, #-16]
        *p2++ = m2 - m3;
 8003838:	eee4 6a02 	vfma.f32	s13, s8, s4
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 800383c:	ee36 6a60 	vsub.f32	s12, s12, s1
        *p2++ = m2 - m3;
 8003840:	ed47 6a03 	vstr	s13, [r7, #-12]
        *pEnd2-- = m0 - m1;
 8003844:	ee64 6a40 	vnmul.f32	s13, s8, s0
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 8003848:	ee79 1a61 	vsub.f32	s3, s18, s3
        *pEnd2-- = m0 - m1;
 800384c:	eee5 6a85 	vfma.f32	s13, s11, s10
        m3 = t2[3] * twR;
 8003850:	ee65 5a84 	vmul.f32	s11, s11, s8
        *pEnd2-- = m0 - m1;
 8003854:	edce 6a02 	vstr	s13, [lr, #8]
        *pEnd2-- = m2 + m3;
 8003858:	eee0 5a05 	vfma.f32	s11, s0, s10
 800385c:	edce 5a01 	vstr	s11, [lr, #4]
        twI = tw3[1];
 8003860:	eddb 5a01 	vldr	s11, [fp, #4]
        twR = tw3[0];
 8003864:	eddb 6a00 	vldr	s13, [fp]
        m1 = t3[1] * twI;
 8003868:	ee25 5aa2 	vmul.f32	s10, s11, s5
 800386c:	eba2 0b82 	sub.w	fp, r2, r2, lsl #2
        *p3++ = m0 + m1;
 8003870:	eea6 5a87 	vfma.f32	s10, s13, s14
 8003874:	449b      	add	fp, r3
        *p3++ = m2 - m3;
 8003876:	ee27 7a65 	vnmul.f32	s14, s14, s11
        *p3++ = m0 + m1;
 800387a:	ed08 5a04 	vstr	s10, [r8, #-16]
        *p3++ = m2 - m3;
 800387e:	eea6 7aa2 	vfma.f32	s14, s13, s5
 8003882:	ed08 7a03 	vstr	s14, [r8, #-12]
        *pEnd3-- = m0 - m1;
 8003886:	ee25 7ac1 	vnmul.f32	s14, s11, s2
 800388a:	eea6 7a66 	vfms.f32	s14, s12, s13
        m3 = t3[3] * twI;
 800388e:	ee26 6a25 	vmul.f32	s12, s12, s11
        *pEnd3-- = m0 - m1;
 8003892:	ed8c 7a02 	vstr	s14, [ip, #8]
        *pEnd3-- = m3 - m2;
 8003896:	eea1 6a66 	vfms.f32	s12, s2, s13
 800389a:	ed8c 6a01 	vstr	s12, [ip, #4]
        twR = tw4[0];
 800389e:	eddb 6a00 	vldr	s13, [fp]
        twI = tw4[1];
 80038a2:	ed9b 7a01 	vldr	s14, [fp, #4]
        *pEnd4-- = m0 - m1;
 80038a6:	9b01      	ldr	r3, [sp, #4]
    for (l = (L - 2) >> 1; l > 0; l-- ) 
 80038a8:	9a07      	ldr	r2, [sp, #28]
        m1 = t4[1] * twI;
 80038aa:	ee27 6a24 	vmul.f32	s12, s14, s9
    for (l = (L - 2) >> 1; l > 0; l-- ) 
 80038ae:	3a01      	subs	r2, #1
        *p4++ = m0 + m1;
 80038b0:	eea6 6aa7 	vfma.f32	s12, s13, s15
    for (l = (L - 2) >> 1; l > 0; l-- ) 
 80038b4:	9207      	str	r2, [sp, #28]
        *p4++ = m2 - m3;
 80038b6:	ee67 7ac7 	vnmul.f32	s15, s15, s14
        *p4++ = m0 + m1;
 80038ba:	ed01 6a04 	vstr	s12, [r1, #-16]
        *p4++ = m2 - m3;
 80038be:	eee6 7aa4 	vfma.f32	s15, s13, s9
 80038c2:	ed41 7a03 	vstr	s15, [r1, #-12]
        *pEnd4-- = m0 - m1;
 80038c6:	ee66 7ae1 	vnmul.f32	s15, s13, s3
 80038ca:	eee3 7a87 	vfma.f32	s15, s7, s14
 80038ce:	edc3 7a02 	vstr	s15, [r3, #8]
        m3 = t4[3] * twR;
 80038d2:	ee63 7aa6 	vmul.f32	s15, s7, s13
        *pEnd4-- = m2 + m3;
 80038d6:	eee1 7a87 	vfma.f32	s15, s3, s14
 80038da:	edc3 7a01 	vstr	s15, [r3, #4]
 80038de:	e690      	b.n	8003602 <arm_cfft_radix8by4_f32+0x118>

080038e0 <arm_cfft_f32>:
    uint8_t bitReverseFlag)
{
    uint32_t  L = S->fftLen, l;
    float32_t invL, * pSrc;

    if(ifftFlag == 1u)
 80038e0:	2a01      	cmp	r2, #1
{
 80038e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038e6:	4606      	mov	r6, r0
 80038e8:	460d      	mov	r5, r1
 80038ea:	4617      	mov	r7, r2
 80038ec:	4698      	mov	r8, r3
    uint32_t  L = S->fftLen, l;
 80038ee:	8804      	ldrh	r4, [r0, #0]
    if(ifftFlag == 1u)
 80038f0:	d039      	beq.n	8003966 <arm_cfft_f32+0x86>
            *pSrc = -*pSrc;
            pSrc += 2;
        }
    }

    switch (L) 
 80038f2:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 80038f6:	d049      	beq.n	800398c <arm_cfft_f32+0xac>
 80038f8:	d821      	bhi.n	800393e <arm_cfft_f32+0x5e>
 80038fa:	2c20      	cmp	r4, #32
 80038fc:	d046      	beq.n	800398c <arm_cfft_f32+0xac>
 80038fe:	d81a      	bhi.n	8003936 <arm_cfft_f32+0x56>
 8003900:	2c10      	cmp	r4, #16
 8003902:	d03e      	beq.n	8003982 <arm_cfft_f32+0xa2>
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
        break;
    }  

    if( bitReverseFlag )
 8003904:	f1b8 0f00 	cmp.w	r8, #0
 8003908:	d004      	beq.n	8003914 <arm_cfft_f32+0x34>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 800390a:	68b2      	ldr	r2, [r6, #8]
 800390c:	89b1      	ldrh	r1, [r6, #12]
 800390e:	4628      	mov	r0, r5
 8003910:	f7fc fc5e 	bl	80001d0 <arm_bitreversal_32>

    if(ifftFlag == 1u)
 8003914:	2f01      	cmp	r7, #1
 8003916:	d10c      	bne.n	8003932 <arm_cfft_f32+0x52>
    {
        invL = 1.0f/(float32_t)L;
 8003918:	ee07 4a90 	vmov	s15, r4
 800391c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003920:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003924:	ee86 7aa7 	vdiv.f32	s14, s13, s15
        /*  Conjugate and scale output data */
        pSrc = p1;
        for(l=0; l<L; l++) 
 8003928:	2300      	movs	r3, #0
 800392a:	42a3      	cmp	r3, r4
 800392c:	f105 0508 	add.w	r5, r5, #8
 8003930:	d331      	bcc.n	8003996 <arm_cfft_f32+0xb6>
            *pSrc++ *=   invL ;
            *pSrc  = -(*pSrc) * invL;
            pSrc++;
        }
    }
}
 8003932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (L) 
 8003936:	2c40      	cmp	r4, #64	; 0x40
 8003938:	d008      	beq.n	800394c <arm_cfft_f32+0x6c>
 800393a:	2c80      	cmp	r4, #128	; 0x80
 800393c:	e7e1      	b.n	8003902 <arm_cfft_f32+0x22>
 800393e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8003942:	d01e      	beq.n	8003982 <arm_cfft_f32+0xa2>
 8003944:	d809      	bhi.n	800395a <arm_cfft_f32+0x7a>
 8003946:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800394a:	d1db      	bne.n	8003904 <arm_cfft_f32+0x24>
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 800394c:	2301      	movs	r3, #1
 800394e:	6872      	ldr	r2, [r6, #4]
 8003950:	4621      	mov	r1, r4
 8003952:	4628      	mov	r0, r5
 8003954:	f000 f82e 	bl	80039b4 <arm_radix8_butterfly_f32>
        break;
 8003958:	e7d4      	b.n	8003904 <arm_cfft_f32+0x24>
    switch (L) 
 800395a:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 800395e:	d015      	beq.n	800398c <arm_cfft_f32+0xac>
 8003960:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8003964:	e7f1      	b.n	800394a <arm_cfft_f32+0x6a>
        pSrc = p1 + 1;
 8003966:	1d0b      	adds	r3, r1, #4
        for(l=0; l<L; l++) 
 8003968:	2200      	movs	r2, #0
 800396a:	42a2      	cmp	r2, r4
 800396c:	f103 0308 	add.w	r3, r3, #8
 8003970:	d2bf      	bcs.n	80038f2 <arm_cfft_f32+0x12>
            *pSrc = -*pSrc;
 8003972:	ed53 7a02 	vldr	s15, [r3, #-8]
 8003976:	eef1 7a67 	vneg.f32	s15, s15
 800397a:	ed43 7a02 	vstr	s15, [r3, #-8]
        for(l=0; l<L; l++) 
 800397e:	3201      	adds	r2, #1
 8003980:	e7f3      	b.n	800396a <arm_cfft_f32+0x8a>
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8003982:	4629      	mov	r1, r5
 8003984:	4630      	mov	r0, r6
 8003986:	f7ff fcf5 	bl	8003374 <arm_cfft_radix8by2_f32>
        break;
 800398a:	e7bb      	b.n	8003904 <arm_cfft_f32+0x24>
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 800398c:	4629      	mov	r1, r5
 800398e:	4630      	mov	r0, r6
 8003990:	f7ff fdab 	bl	80034ea <arm_cfft_radix8by4_f32>
        break;
 8003994:	e7b6      	b.n	8003904 <arm_cfft_f32+0x24>
            *pSrc++ *=   invL ;
 8003996:	ed55 7a02 	vldr	s15, [r5, #-8]
 800399a:	ee67 7a87 	vmul.f32	s15, s15, s14
        for(l=0; l<L; l++) 
 800399e:	3301      	adds	r3, #1
            *pSrc++ *=   invL ;
 80039a0:	ed45 7a02 	vstr	s15, [r5, #-8]
            *pSrc  = -(*pSrc) * invL;
 80039a4:	ed55 7a01 	vldr	s15, [r5, #-4]
 80039a8:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80039ac:	ed45 7a01 	vstr	s15, [r5, #-4]
 80039b0:	e7bb      	b.n	800392a <arm_cfft_f32+0x4a>
	...

080039b4 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 80039b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039b8:	ed2d 8b10 	vpush	{d8-d15}
         pSrc[2 * i7 + 1] = t2 + r3;
         r1 = (r6 - r8) * C81;
         r6 = (r6 + r8) * C81;
         r2 = (s6 - s8) * C81;
         s6 = (s6 + s8) * C81;
         t1 = r5 - r1;
 80039bc:	eddf 5ace 	vldr	s11, [pc, #824]	; 8003cf8 <arm_radix8_butterfly_f32+0x344>
{
 80039c0:	b09d      	sub	sp, #116	; 0x74
 80039c2:	469b      	mov	fp, r3
 80039c4:	9001      	str	r0, [sp, #4]
 80039c6:	910d      	str	r1, [sp, #52]	; 0x34
 80039c8:	9202      	str	r2, [sp, #8]
   n2 = fftLen;
 80039ca:	9103      	str	r1, [sp, #12]
 80039cc:	eeb0 5a65 	vmov.f32	s10, s11
      n2 = n2 >> 3;
 80039d0:	9b03      	ldr	r3, [sp, #12]
 80039d2:	9901      	ldr	r1, [sp, #4]
 80039d4:	08da      	lsrs	r2, r3, #3
 80039d6:	0154      	lsls	r4, r2, #5
 80039d8:	eb01 0e04 	add.w	lr, r1, r4
 80039dc:	2018      	movs	r0, #24
 80039de:	00d1      	lsls	r1, r2, #3
 80039e0:	fb00 f502 	mul.w	r5, r0, r2
 80039e4:	9117      	str	r1, [sp, #92]	; 0x5c
 80039e6:	2028      	movs	r0, #40	; 0x28
 80039e8:	f06f 0117 	mvn.w	r1, #23
 80039ec:	4351      	muls	r1, r2
 80039ee:	9518      	str	r5, [sp, #96]	; 0x60
 80039f0:	fb00 f502 	mul.w	r5, r0, r2
 80039f4:	eb0e 0c01 	add.w	ip, lr, r1
 80039f8:	2030      	movs	r0, #48	; 0x30
 80039fa:	9516      	str	r5, [sp, #88]	; 0x58
 80039fc:	0115      	lsls	r5, r2, #4
 80039fe:	eb0c 0704 	add.w	r7, ip, r4
 8003a02:	9515      	str	r5, [sp, #84]	; 0x54
 8003a04:	fb00 f502 	mul.w	r5, r0, r2
 8003a08:	2038      	movs	r0, #56	; 0x38
 8003a0a:	187e      	adds	r6, r7, r1
 8003a0c:	4350      	muls	r0, r2
 8003a0e:	950c      	str	r5, [sp, #48]	; 0x30
 8003a10:	9004      	str	r0, [sp, #16]
 8003a12:	1935      	adds	r5, r6, r4
 8003a14:	9801      	ldr	r0, [sp, #4]
 8003a16:	4429      	add	r1, r5
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	eb01 0904 	add.w	r9, r1, r4
 8003a1e:	f100 0804 	add.w	r8, r0, #4
      i1 = 0;
 8003a22:	f04f 0a00 	mov.w	sl, #0
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8003a26:	edde 7a00 	vldr	s15, [lr]
 8003a2a:	ed18 7a01 	vldr	s14, [r8, #-4]
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8003a2e:	eddc 3a00 	vldr	s7, [ip]
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8003a32:	edd6 4a00 	vldr	s9, [r6]
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8003a36:	ed99 3a00 	vldr	s6, [r9]
 8003a3a:	edd1 2a00 	vldr	s5, [r1]
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8003a3e:	ee77 6a27 	vadd.f32	s13, s14, s15
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8003a42:	ee37 7a67 	vsub.f32	s14, s14, s15
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8003a46:	edd7 7a00 	vldr	s15, [r7]
 8003a4a:	ee33 6aa7 	vadd.f32	s12, s7, s15
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8003a4e:	ee73 3ae7 	vsub.f32	s7, s7, s15
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8003a52:	edd5 7a00 	vldr	s15, [r5]
 8003a56:	ee34 4aa7 	vadd.f32	s8, s9, s15
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8003a5a:	ee74 7ae7 	vsub.f32	s15, s9, s15
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8003a5e:	ee72 4a83 	vadd.f32	s9, s5, s6
         t1 = r1 - r3;
 8003a62:	ee36 8ac4 	vsub.f32	s16, s13, s8
         r3 = r2 - r4;
 8003a66:	ee36 0a64 	vsub.f32	s0, s12, s9
         r1 = r1 + r3;
 8003a6a:	ee76 6a84 	vadd.f32	s13, s13, s8
         r2 = r2 + r4;
 8003a6e:	ee36 6a24 	vadd.f32	s12, s12, s9
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8003a72:	ee72 2ac3 	vsub.f32	s5, s5, s6
         pSrc[2 * i1] = r1 + r2;   
 8003a76:	ee76 4a86 	vadd.f32	s9, s13, s12
         pSrc[2 * i5] = r1 - r2;
 8003a7a:	ee76 6ac6 	vsub.f32	s13, s13, s12
         pSrc[2 * i1] = r1 + r2;   
 8003a7e:	ed48 4a01 	vstr	s9, [r8, #-4]
         pSrc[2 * i5] = r1 - r2;
 8003a82:	edce 6a00 	vstr	s13, [lr]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8003a86:	edd8 4a00 	vldr	s9, [r8]
 8003a8a:	ed9e 6a01 	vldr	s12, [lr, #4]
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8003a8e:	ed9c 4a01 	vldr	s8, [ip, #4]
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8003a92:	ed96 3a01 	vldr	s6, [r6, #4]
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8003a96:	edd9 1a01 	vldr	s3, [r9, #4]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8003a9a:	ee74 6a86 	vadd.f32	s13, s9, s12
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8003a9e:	ee34 6ac6 	vsub.f32	s12, s9, s12
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8003aa2:	edd7 4a01 	vldr	s9, [r7, #4]
 8003aa6:	ee34 2a24 	vadd.f32	s4, s8, s9
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8003aaa:	ee34 4a64 	vsub.f32	s8, s8, s9
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8003aae:	edd5 4a01 	vldr	s9, [r5, #4]
 8003ab2:	ee33 1a24 	vadd.f32	s2, s6, s9
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8003ab6:	ee73 4a64 	vsub.f32	s9, s6, s9
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8003aba:	ed91 3a01 	vldr	s6, [r1, #4]
 8003abe:	ee73 0a21 	vadd.f32	s1, s6, s3
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8003ac2:	ee33 3a61 	vsub.f32	s6, s6, s3
         t2 = r1 - s3;
 8003ac6:	ee76 1ac1 	vsub.f32	s3, s13, s2
         r1 = r1 + s3;
 8003aca:	ee76 6a81 	vadd.f32	s13, s13, s2
         s3 = r2 - r4;
 8003ace:	ee32 1a60 	vsub.f32	s2, s4, s1
         r2 = r2 + r4;
 8003ad2:	ee32 2a20 	vadd.f32	s4, s4, s1
         pSrc[2 * i1 + 1] = r1 + r2;
 8003ad6:	ee76 0a82 	vadd.f32	s1, s13, s4
         pSrc[2 * i5 + 1] = r1 - r2;
 8003ada:	ee76 6ac2 	vsub.f32	s13, s13, s4
         pSrc[2 * i1 + 1] = r1 + r2;
 8003ade:	edc8 0a00 	vstr	s1, [r8]
         pSrc[2 * i5 + 1] = r1 - r2;
 8003ae2:	edce 6a01 	vstr	s13, [lr, #4]
         pSrc[2 * i3]     = t1 + s3;
 8003ae6:	ee78 6a01 	vadd.f32	s13, s16, s2
         pSrc[2 * i7]     = t1 - s3;
 8003aea:	ee38 2a41 	vsub.f32	s4, s16, s2
         pSrc[2 * i3]     = t1 + s3;
 8003aee:	edc6 6a00 	vstr	s13, [r6]
         pSrc[2 * i3 + 1] = t2 - r3;
 8003af2:	ee71 6ac0 	vsub.f32	s13, s3, s0
         pSrc[2 * i7]     = t1 - s3;
 8003af6:	ed85 2a00 	vstr	s4, [r5]
         pSrc[2 * i3 + 1] = t2 - r3;
 8003afa:	edc6 6a01 	vstr	s13, [r6, #4]
         pSrc[2 * i7 + 1] = t2 + r3;
 8003afe:	ee70 6a21 	vadd.f32	s13, s0, s3
         r2 = (s6 - s8) * C81;
 8003b02:	ee34 2a43 	vsub.f32	s4, s8, s6
         pSrc[2 * i7 + 1] = t2 + r3;
 8003b06:	edc5 6a01 	vstr	s13, [r5, #4]
         r6 = (r6 + r8) * C81;
 8003b0a:	ee73 6aa2 	vadd.f32	s13, s7, s5
         r1 = (r6 - r8) * C81;
 8003b0e:	ee73 1ae2 	vsub.f32	s3, s7, s5
         s6 = (s6 + s8) * C81;
 8003b12:	ee34 4a03 	vadd.f32	s8, s8, s6
         r5 = r5 + r1;
         r8 = r7 - r6;
 8003b16:	eef0 3a67 	vmov.f32	s7, s15
 8003b1a:	eee6 3ae5 	vfms.f32	s7, s13, s11
 8003b1e:	449e      	add	lr, r3
 8003b20:	441e      	add	r6, r3
         r7 = r7 + r6;
 8003b22:	eee6 7aa5 	vfma.f32	s15, s13, s11
 8003b26:	441d      	add	r5, r3
 8003b28:	4498      	add	r8, r3
         t2 = s5 - r2;
 8003b2a:	eef0 2a46 	vmov.f32	s5, s12
         s5 = s5 + r2;
 8003b2e:	eef0 6a46 	vmov.f32	s13, s12
         s8 = s7 - s6;
         s7 = s7 + s6;
 8003b32:	eeb0 6a64 	vmov.f32	s12, s9
         t1 = r5 - r1;
 8003b36:	eeb0 3a47 	vmov.f32	s6, s14
         s7 = s7 + s6;
 8003b3a:	eea4 6a25 	vfma.f32	s12, s8, s11
         r5 = r5 + r1;
 8003b3e:	eea1 7aa5 	vfma.f32	s14, s3, s11
         t2 = s5 - r2;
 8003b42:	eee2 2a65 	vfms.f32	s5, s4, s11
         s5 = s5 + r2;
 8003b46:	eee2 6a25 	vfma.f32	s13, s4, s11
         s8 = s7 - s6;
 8003b4a:	eeb0 2a64 	vmov.f32	s4, s9
         t1 = r5 - r1;
 8003b4e:	eea1 3ae5 	vfms.f32	s6, s3, s11
         s8 = s7 - s6;
 8003b52:	eea4 2a65 	vfms.f32	s4, s8, s11
         pSrc[2 * i2]     = r5 + s7;
 8003b56:	ee77 4a06 	vadd.f32	s9, s14, s12
         pSrc[2 * i8]     = r5 - s7;
 8003b5a:	ee37 7a46 	vsub.f32	s14, s14, s12
         pSrc[2 * i2]     = r5 + s7;
 8003b5e:	edcc 4a00 	vstr	s9, [ip]
         pSrc[2 * i8]     = r5 - s7;
 8003b62:	ed89 7a00 	vstr	s14, [r9]
         pSrc[2 * i6]     = t1 + s8;
 8003b66:	ee33 7a02 	vadd.f32	s14, s6, s4
         pSrc[2 * i4]     = t1 - s8;
 8003b6a:	ee33 3a42 	vsub.f32	s6, s6, s4
         pSrc[2 * i6]     = t1 + s8;
 8003b6e:	ed87 7a00 	vstr	s14, [r7]
         pSrc[2 * i2 + 1] = s5 - r7;
 8003b72:	ee36 7ae7 	vsub.f32	s14, s13, s15
         pSrc[2 * i8 + 1] = s5 + r7;
 8003b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
         pSrc[2 * i4]     = t1 - s8;
 8003b7a:	ed81 3a00 	vstr	s6, [r1]
         pSrc[2 * i2 + 1] = s5 - r7;
 8003b7e:	ed8c 7a01 	vstr	s14, [ip, #4]
         pSrc[2 * i8 + 1] = s5 + r7;
 8003b82:	edc9 7a01 	vstr	s15, [r9, #4]
         pSrc[2 * i6 + 1] = t2 - r8;
 8003b86:	ee72 7ae3 	vsub.f32	s15, s5, s7
         pSrc[2 * i4 + 1] = t2 + r8;
 8003b8a:	ee73 3aa2 	vadd.f32	s7, s7, s5
         pSrc[2 * i6 + 1] = t2 - r8;
 8003b8e:	edc7 7a01 	vstr	s15, [r7, #4]
         pSrc[2 * i4 + 1] = t2 + r8;
 8003b92:	edc1 3a01 	vstr	s7, [r1, #4]
         
         i1 += n1;
 8003b96:	9803      	ldr	r0, [sp, #12]
 8003b98:	4482      	add	sl, r0
      } while(i1 < fftLen);
 8003b9a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003b9c:	4550      	cmp	r0, sl
 8003b9e:	449c      	add	ip, r3
 8003ba0:	441f      	add	r7, r3
 8003ba2:	4419      	add	r1, r3
 8003ba4:	4499      	add	r9, r3
 8003ba6:	f63f af3e 	bhi.w	8003a26 <arm_radix8_butterfly_f32+0x72>
      
      if(n2 < 8)
 8003baa:	2a07      	cmp	r2, #7
 8003bac:	f240 81cf 	bls.w	8003f4e <arm_radix8_butterfly_f32+0x59a>
 8003bb0:	ea4f 01cb 	mov.w	r1, fp, lsl #3
 8003bb4:	9114      	str	r1, [sp, #80]	; 0x50
 8003bb6:	9814      	ldr	r0, [sp, #80]	; 0x50
 8003bb8:	9902      	ldr	r1, [sp, #8]
 8003bba:	4401      	add	r1, r0
 8003bbc:	910b      	str	r1, [sp, #44]	; 0x2c
 8003bbe:	ea4f 110b 	mov.w	r1, fp, lsl #4
 8003bc2:	9113      	str	r1, [sp, #76]	; 0x4c
 8003bc4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8003bc6:	9902      	ldr	r1, [sp, #8]
 8003bc8:	4401      	add	r1, r0
 8003bca:	910a      	str	r1, [sp, #40]	; 0x28
 8003bcc:	2118      	movs	r1, #24
 8003bce:	fb01 f10b 	mul.w	r1, r1, fp
 8003bd2:	9112      	str	r1, [sp, #72]	; 0x48
 8003bd4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8003bd6:	9902      	ldr	r1, [sp, #8]
 8003bd8:	4401      	add	r1, r0
 8003bda:	9109      	str	r1, [sp, #36]	; 0x24
 8003bdc:	ea4f 114b 	mov.w	r1, fp, lsl #5
 8003be0:	9111      	str	r1, [sp, #68]	; 0x44
 8003be2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8003be4:	9902      	ldr	r1, [sp, #8]
 8003be6:	4401      	add	r1, r0
 8003be8:	9108      	str	r1, [sp, #32]
 8003bea:	2128      	movs	r1, #40	; 0x28
 8003bec:	fb01 f10b 	mul.w	r1, r1, fp
 8003bf0:	9110      	str	r1, [sp, #64]	; 0x40
 8003bf2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003bf4:	9902      	ldr	r1, [sp, #8]
 8003bf6:	4401      	add	r1, r0
 8003bf8:	9107      	str	r1, [sp, #28]
 8003bfa:	2130      	movs	r1, #48	; 0x30
 8003bfc:	fb01 f10b 	mul.w	r1, r1, fp
 8003c00:	910f      	str	r1, [sp, #60]	; 0x3c
 8003c02:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003c04:	9902      	ldr	r1, [sp, #8]
 8003c06:	4401      	add	r1, r0
 8003c08:	9106      	str	r1, [sp, #24]
 8003c0a:	2138      	movs	r1, #56	; 0x38
 8003c0c:	fb01 f10b 	mul.w	r1, r1, fp
 8003c10:	910e      	str	r1, [sp, #56]	; 0x38
 8003c12:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003c14:	9902      	ldr	r1, [sp, #8]
 8003c16:	4401      	add	r1, r0
 8003c18:	9105      	str	r1, [sp, #20]
 8003c1a:	9901      	ldr	r1, [sp, #4]
 8003c1c:	9801      	ldr	r0, [sp, #4]
 8003c1e:	440c      	add	r4, r1
 8003c20:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8003c22:	4401      	add	r1, r0
 8003c24:	468e      	mov	lr, r1
 8003c26:	9916      	ldr	r1, [sp, #88]	; 0x58
 8003c28:	4401      	add	r1, r0
 8003c2a:	468c      	mov	ip, r1
 8003c2c:	9915      	ldr	r1, [sp, #84]	; 0x54
 8003c2e:	4401      	add	r1, r0
 8003c30:	460f      	mov	r7, r1
 8003c32:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003c34:	4401      	add	r1, r0
 8003c36:	460e      	mov	r6, r1
 8003c38:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003c3a:	4401      	add	r1, r0
 8003c3c:	460d      	mov	r5, r1
 8003c3e:	9904      	ldr	r1, [sp, #16]
 8003c40:	4401      	add	r1, r0
         break;
      
      ia1 = 0;
      j = 1;
 8003c42:	2001      	movs	r0, #1
 8003c44:	9004      	str	r0, [sp, #16]
 8003c46:	f104 000c 	add.w	r0, r4, #12
 8003c4a:	9015      	str	r0, [sp, #84]	; 0x54
 8003c4c:	f10e 000c 	add.w	r0, lr, #12
 8003c50:	9016      	str	r0, [sp, #88]	; 0x58
 8003c52:	f10c 000c 	add.w	r0, ip, #12
 8003c56:	9017      	str	r0, [sp, #92]	; 0x5c
 8003c58:	f107 000c 	add.w	r0, r7, #12
 8003c5c:	9018      	str	r0, [sp, #96]	; 0x60
 8003c5e:	f106 000c 	add.w	r0, r6, #12
 8003c62:	4688      	mov	r8, r1
 8003c64:	9019      	str	r0, [sp, #100]	; 0x64
 8003c66:	f105 000c 	add.w	r0, r5, #12
 8003c6a:	901a      	str	r0, [sp, #104]	; 0x68
 8003c6c:	f108 000c 	add.w	r0, r8, #12
      if(n2 < 8)
 8003c70:	2100      	movs	r1, #0
 8003c72:	901b      	str	r0, [sp, #108]	; 0x6c
         ia4 = ia3 + id;
         ia5 = ia4 + id;
         ia6 = ia5 + id;
         ia7 = ia6 + id;
                  
         co2 = pCoef[2 * ia1];
 8003c74:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003c76:	9c04      	ldr	r4, [sp, #16]
 8003c78:	edd0 1a00 	vldr	s3, [r0]
         co3 = pCoef[2 * ia2];
 8003c7c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003c7e:	ed90 8a00 	vldr	s16, [r0]
         co4 = pCoef[2 * ia3];
 8003c82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c84:	edd0 4a00 	vldr	s9, [r0]
         co5 = pCoef[2 * ia4];
 8003c88:	9808      	ldr	r0, [sp, #32]
 8003c8a:	ed90 9a00 	vldr	s18, [r0]
         co6 = pCoef[2 * ia5];
 8003c8e:	9807      	ldr	r0, [sp, #28]
 8003c90:	edd0 3a00 	vldr	s7, [r0]
         co7 = pCoef[2 * ia6];
 8003c94:	9806      	ldr	r0, [sp, #24]
 8003c96:	edd0 0a00 	vldr	s1, [r0]
         co8 = pCoef[2 * ia7];
 8003c9a:	9805      	ldr	r0, [sp, #20]
 8003c9c:	edd0 2a00 	vldr	s5, [r0]
         si2 = pCoef[2 * ia1 + 1];
 8003ca0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003ca2:	ed90 1a01 	vldr	s2, [r0, #4]
         si3 = pCoef[2 * ia2 + 1];
 8003ca6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003ca8:	edd0 8a01 	vldr	s17, [r0, #4]
         si4 = pCoef[2 * ia3 + 1];
 8003cac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cae:	ed90 4a01 	vldr	s8, [r0, #4]
         si5 = pCoef[2 * ia4 + 1];
 8003cb2:	9808      	ldr	r0, [sp, #32]
 8003cb4:	edd0 9a01 	vldr	s19, [r0, #4]
         si6 = pCoef[2 * ia5 + 1];
 8003cb8:	9807      	ldr	r0, [sp, #28]
 8003cba:	ed90 3a01 	vldr	s6, [r0, #4]
         si7 = pCoef[2 * ia6 + 1];
 8003cbe:	9806      	ldr	r0, [sp, #24]
 8003cc0:	ed90 0a01 	vldr	s0, [r0, #4]
         si8 = pCoef[2 * ia7 + 1];         
 8003cc4:	9805      	ldr	r0, [sp, #20]
 8003cc6:	ed90 2a01 	vldr	s4, [r0, #4]
 8003cca:	9801      	ldr	r0, [sp, #4]
 8003ccc:	eb00 09c4 	add.w	r9, r0, r4, lsl #3
 8003cd0:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003cd2:	eb00 0801 	add.w	r8, r0, r1
 8003cd6:	9816      	ldr	r0, [sp, #88]	; 0x58
 8003cd8:	eb00 0e01 	add.w	lr, r0, r1
 8003cdc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8003cde:	eb00 0c01 	add.w	ip, r0, r1
 8003ce2:	9818      	ldr	r0, [sp, #96]	; 0x60
 8003ce4:	1847      	adds	r7, r0, r1
 8003ce6:	9819      	ldr	r0, [sp, #100]	; 0x64
 8003ce8:	1846      	adds	r6, r0, r1
 8003cea:	981a      	ldr	r0, [sp, #104]	; 0x68
 8003cec:	1845      	adds	r5, r0, r1
 8003cee:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8003cf0:	1844      	adds	r4, r0, r1
         
         i1 = j;
 8003cf2:	9804      	ldr	r0, [sp, #16]
 8003cf4:	900c      	str	r0, [sp, #48]	; 0x30
 8003cf6:	e001      	b.n	8003cfc <arm_radix8_butterfly_f32+0x348>
 8003cf8:	3f3504f3 	.word	0x3f3504f3
            i4 = i3 + n2;
            i5 = i4 + n2;
            i6 = i5 + n2;
            i7 = i6 + n2;
            i8 = i7 + n2;
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8003cfc:	ed58 7a01 	vldr	s15, [r8, #-4]
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8003d00:	ed5e 6a01 	vldr	s13, [lr, #-4]
 8003d04:	ed1c 7a01 	vldr	s14, [ip, #-4]
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8003d08:	ed99 aa00 	vldr	s20, [r9]
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8003d0c:	ed17 ba01 	vldr	s22, [r7, #-4]
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8003d10:	ed15 ea01 	vldr	s28, [r5, #-4]
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8003d14:	ee3a 6a27 	vadd.f32	s12, s20, s15
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8003d18:	ee36 dac7 	vsub.f32	s26, s13, s14
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8003d1c:	ee3a aa67 	vsub.f32	s20, s20, s15
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8003d20:	ee76 7a87 	vadd.f32	s15, s13, s14
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8003d24:	ed56 6a01 	vldr	s13, [r6, #-4]
 8003d28:	ee3b 7a26 	vadd.f32	s14, s22, s13
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8003d2c:	ee3b ba66 	vsub.f32	s22, s22, s13
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8003d30:	ed54 6a01 	vldr	s13, [r4, #-4]
 8003d34:	ee7e aa26 	vadd.f32	s21, s28, s13
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
            t1 = r1 - r3;
 8003d38:	ee36 fa47 	vsub.f32	s30, s12, s14
            r1 = r1 + r3;
            r3 = r2 - r4;
 8003d3c:	ee77 eaea 	vsub.f32	s29, s15, s21
            r1 = r1 + r3;
 8003d40:	ee36 6a07 	vadd.f32	s12, s12, s14
            r2 = r2 + r4;
 8003d44:	ee77 7aaa 	vadd.f32	s15, s15, s21
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8003d48:	ee3e ea66 	vsub.f32	s28, s28, s13
            pSrc[2 * i1] = r1 + r2;
 8003d4c:	ee36 7a27 	vadd.f32	s14, s12, s15
            r2 = r1 - r2;
 8003d50:	ee76 aa67 	vsub.f32	s21, s12, s15
            pSrc[2 * i1] = r1 + r2;
 8003d54:	ed89 7a00 	vstr	s14, [r9]
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8003d58:	ed99 6a01 	vldr	s12, [r9, #4]
 8003d5c:	edd8 7a00 	vldr	s15, [r8]
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8003d60:	edde ca00 	vldr	s25, [lr]
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8003d64:	edd7 6a00 	vldr	s13, [r7]
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8003d68:	edd5 fa00 	vldr	s31, [r5]
 8003d6c:	edd4 da00 	vldr	s27, [r4]
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8003d70:	ee36 7a27 	vadd.f32	s14, s12, s15
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8003d74:	ee76 ba67 	vsub.f32	s23, s12, s15
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8003d78:	eddc 7a00 	vldr	s15, [ip]
 8003d7c:	ee3c 6aa7 	vadd.f32	s12, s25, s15
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8003d80:	ee7c cae7 	vsub.f32	s25, s25, s15
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8003d84:	edd6 7a00 	vldr	s15, [r6]
 8003d88:	ee36 caa7 	vadd.f32	s24, s13, s15
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8003d8c:	ee76 7ae7 	vsub.f32	s15, s13, s15
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8003d90:	ee7f 6aad 	vadd.f32	s13, s31, s27
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8003d94:	ee7f daed 	vsub.f32	s27, s31, s27
            t2 = s1 - s3;
 8003d98:	ee77 fa4c 	vsub.f32	s31, s14, s24
            s1 = s1 + s3;
 8003d9c:	ee37 ca0c 	vadd.f32	s24, s14, s24
            s3 = s2 - s4;
 8003da0:	ee36 7a66 	vsub.f32	s14, s12, s13
            s2 = s2 + s4;
 8003da4:	ee36 6a26 	vadd.f32	s12, s12, s13
            r1 = t1 + s3;
 8003da8:	ee7f 6a07 	vadd.f32	s13, s30, s14
            t1 = t1 - s3;
 8003dac:	ee3f 7a47 	vsub.f32	s14, s30, s14
            pSrc[2 * i1 + 1] = s1 + s2;
 8003db0:	ee3c fa06 	vadd.f32	s30, s24, s12
            s2 = s1 - s2;
 8003db4:	ee3c ca46 	vsub.f32	s24, s24, s12
            pSrc[2 * i1 + 1] = s1 + s2;
 8003db8:	ed89 fa01 	vstr	s30, [r9, #4]
            s1 = t2 - r3;
            t2 = t2 + r3;
            p1 = co5 * r2;
            p2 = si5 * s2;
 8003dbc:	ee29 6a8c 	vmul.f32	s12, s19, s24
            s1 = t2 - r3;
 8003dc0:	ee3f faee 	vsub.f32	s30, s31, s29
            p3 = co5 * s2;
            p4 = si5 * r2;
            pSrc[2 * i5]     = p1 + p2;
 8003dc4:	eea9 6a2a 	vfma.f32	s12, s18, s21
 8003dc8:	4499      	add	r9, r3
            t2 = t2 + r3;
 8003dca:	ee7e eaaf 	vadd.f32	s29, s29, s31
            pSrc[2 * i5]     = p1 + p2;
 8003dce:	ed08 6a01 	vstr	s12, [r8, #-4]
            pSrc[2 * i5 + 1] = p3 - p4;
 8003dd2:	ee2a 6ae9 	vnmul.f32	s12, s21, s19
            p2 = si7 * t2;
            p3 = co7 * t2;
            p4 = si7 * t1;
            pSrc[2 * i7]     = p1 + p2;
            pSrc[2 * i7 + 1] = p3 - p4;
            r1 = (r6 - r8) * C81;
 8003dd6:	ee7d aa4e 	vsub.f32	s21, s26, s28
            pSrc[2 * i5 + 1] = p3 - p4;
 8003dda:	eea9 6a0c 	vfma.f32	s12, s18, s24
            r6 = (r6 + r8) * C81;
            s1 = (s6 - s8) * C81;
            s6 = (s6 + s8) * C81;
            t1 = r5 - r1;
 8003dde:	eeb0 ca4a 	vmov.f32	s24, s20
            pSrc[2 * i5 + 1] = p3 - p4;
 8003de2:	ed88 6a00 	vstr	s12, [r8]
            p2 = si3 * s1;
 8003de6:	ee28 6a8f 	vmul.f32	s12, s17, s30
            t1 = r5 - r1;
 8003dea:	eeaa cac5 	vfms.f32	s24, s21, s10
 8003dee:	4498      	add	r8, r3
            pSrc[2 * i3]     = p1 + p2;
 8003df0:	eea8 6a26 	vfma.f32	s12, s16, s13
            pSrc[2 * i3 + 1] = p3 - p4;
 8003df4:	ee66 6ae8 	vnmul.f32	s13, s13, s17
            pSrc[2 * i3]     = p1 + p2;
 8003df8:	ed07 6a01 	vstr	s12, [r7, #-4]
            pSrc[2 * i3 + 1] = p3 - p4;
 8003dfc:	eee8 6a0f 	vfma.f32	s13, s16, s30
            s1 = (s6 - s8) * C81;
 8003e00:	ee3c 6aed 	vsub.f32	s12, s25, s27
            pSrc[2 * i3 + 1] = p3 - p4;
 8003e04:	edc7 6a00 	vstr	s13, [r7]
            p2 = si7 * t2;
 8003e08:	ee60 6a2e 	vmul.f32	s13, s0, s29
            r5 = r5 + r1;
 8003e0c:	eeaa aa85 	vfma.f32	s20, s21, s10
 8003e10:	441f      	add	r7, r3
            pSrc[2 * i7]     = p1 + p2;
 8003e12:	eee0 6a87 	vfma.f32	s13, s1, s14
            pSrc[2 * i7 + 1] = p3 - p4;
 8003e16:	ee27 7a40 	vnmul.f32	s14, s14, s0
            pSrc[2 * i7]     = p1 + p2;
 8003e1a:	ed46 6a01 	vstr	s13, [r6, #-4]
            pSrc[2 * i7 + 1] = p3 - p4;
 8003e1e:	eea0 7aae 	vfma.f32	s14, s1, s29
            r6 = (r6 + r8) * C81;
 8003e22:	ee7d 6a0e 	vadd.f32	s13, s26, s28
            pSrc[2 * i7 + 1] = p3 - p4;
 8003e26:	ed86 7a00 	vstr	s14, [r6]
            s6 = (s6 + s8) * C81;
 8003e2a:	ee3c 7aad 	vadd.f32	s14, s25, s27
            r8 = r7 - r6;
            r7 = r7 + r6;
            t2 = s5 - s1;
 8003e2e:	eef0 ca6b 	vmov.f32	s25, s23
            s5 = s5 + s1;
 8003e32:	eee6 ba05 	vfma.f32	s23, s12, s10
 8003e36:	441e      	add	r6, r3
            t2 = s5 - s1;
 8003e38:	eee6 ca45 	vfms.f32	s25, s12, s10
            s5 = s5 + s1;
 8003e3c:	eeb0 6a6b 	vmov.f32	s12, s23
            s8 = s7 - s6;
 8003e40:	eef0 ba67 	vmov.f32	s23, s15
 8003e44:	eee7 ba45 	vfms.f32	s23, s14, s10
            s7 = s7 + s6;
 8003e48:	eee7 7a05 	vfma.f32	s15, s14, s10
            r8 = r7 - r6;
 8003e4c:	eef0 aa4b 	vmov.f32	s21, s22
            r7 = r7 + r6;
 8003e50:	eea6 ba85 	vfma.f32	s22, s13, s10
            r1 = r5 + s7;
            r5 = r5 - s7;
            r6 = t1 + s8;
 8003e54:	ee3c 7a2b 	vadd.f32	s14, s24, s23
            r8 = r7 - r6;
 8003e58:	eee6 aac5 	vfms.f32	s21, s13, s10
            r1 = r5 + s7;
 8003e5c:	ee7a 6a27 	vadd.f32	s13, s20, s15
            r5 = r5 - s7;
 8003e60:	ee7a 7a67 	vsub.f32	s15, s20, s15
            t1 = t1 - s8;
 8003e64:	ee3c aa6b 	vsub.f32	s20, s24, s23
            s1 = s5 - r7;
 8003e68:	ee36 ca4b 	vsub.f32	s24, s12, s22
            s5 = s5 + r7;
 8003e6c:	ee3b 6a06 	vadd.f32	s12, s22, s12
            s6 = t2 - r8;
            t2 = t2 + r8;
            p1 = co2 * r1;
            p2 = si2 * s1;
 8003e70:	ee61 ba0c 	vmul.f32	s23, s2, s24
            s6 = t2 - r8;
 8003e74:	ee3c baea 	vsub.f32	s22, s25, s21
            p3 = co2 * s1;
            p4 = si2 * r1;
            pSrc[2 * i2]     = p1 + p2;
 8003e78:	eee1 baa6 	vfma.f32	s23, s3, s13
            pSrc[2 * i2 + 1] = p3 - p4;
 8003e7c:	ee66 6ac1 	vnmul.f32	s13, s13, s2
            pSrc[2 * i2]     = p1 + p2;
 8003e80:	ed4e ba01 	vstr	s23, [lr, #-4]
            pSrc[2 * i2 + 1] = p3 - p4;
 8003e84:	eee1 6a8c 	vfma.f32	s13, s3, s24
            t2 = t2 + r8;
 8003e88:	ee7a aaac 	vadd.f32	s21, s21, s25
            pSrc[2 * i2 + 1] = p3 - p4;
 8003e8c:	edce 6a00 	vstr	s13, [lr]
            p1 = co8 * r5;
            p2 = si8 * s5;
 8003e90:	ee62 6a06 	vmul.f32	s13, s4, s12
 8003e94:	449e      	add	lr, r3
            p3 = co8 * s5;
            p4 = si8 * r5;
            pSrc[2 * i8]     = p1 + p2;
 8003e96:	eee2 6aa7 	vfma.f32	s13, s5, s15
 8003e9a:	ed44 6a01 	vstr	s13, [r4, #-4]
            pSrc[2 * i8 + 1] = p3 - p4;
 8003e9e:	ee67 6ac2 	vnmul.f32	s13, s15, s4
            p1 = co6 * r6;
            p2 = si6 * s6;
 8003ea2:	ee63 7a0b 	vmul.f32	s15, s6, s22
            pSrc[2 * i8 + 1] = p3 - p4;
 8003ea6:	eee2 6a86 	vfma.f32	s13, s5, s12
            p3 = co6 * s6;
            p4 = si6 * r6;
            pSrc[2 * i6]     = p1 + p2;
 8003eaa:	eee3 7a87 	vfma.f32	s15, s7, s14
            pSrc[2 * i8 + 1] = p3 - p4;
 8003eae:	edc4 6a00 	vstr	s13, [r4]
            pSrc[2 * i6 + 1] = p3 - p4;
 8003eb2:	ee27 7a43 	vnmul.f32	s14, s14, s6
            pSrc[2 * i6]     = p1 + p2;
 8003eb6:	ed4c 7a01 	vstr	s15, [ip, #-4]
            p1 = co4 * t1;
            p2 = si4 * t2;
 8003eba:	ee64 7a2a 	vmul.f32	s15, s8, s21
            pSrc[2 * i6 + 1] = p3 - p4;
 8003ebe:	eea3 7a8b 	vfma.f32	s14, s7, s22
 8003ec2:	441c      	add	r4, r3
            p3 = co4 * t2;
            p4 = si4 * t1;
            pSrc[2 * i4]     = p1 + p2;
 8003ec4:	eee4 7a8a 	vfma.f32	s15, s9, s20
            pSrc[2 * i6 + 1] = p3 - p4;
 8003ec8:	ed8c 7a00 	vstr	s14, [ip]
            pSrc[2 * i4]     = p1 + p2;
 8003ecc:	ed45 7a01 	vstr	s15, [r5, #-4]
            pSrc[2 * i4 + 1] = p3 - p4;
 8003ed0:	ee6a 7a44 	vnmul.f32	s15, s20, s8
 8003ed4:	449c      	add	ip, r3
 8003ed6:	eee4 7aaa 	vfma.f32	s15, s9, s21
 8003eda:	edc5 7a00 	vstr	s15, [r5]
            
            i1 += n1;
 8003ede:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003ee0:	4682      	mov	sl, r0
 8003ee2:	9803      	ldr	r0, [sp, #12]
 8003ee4:	4482      	add	sl, r0
         } while(i1 < fftLen);
 8003ee6:	980d      	ldr	r0, [sp, #52]	; 0x34
            i1 += n1;
 8003ee8:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
         } while(i1 < fftLen);
 8003eec:	4682      	mov	sl, r0
 8003eee:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003ef0:	4582      	cmp	sl, r0
 8003ef2:	441d      	add	r5, r3
 8003ef4:	f63f af02 	bhi.w	8003cfc <arm_radix8_butterfly_f32+0x348>
         
         j++;
 8003ef8:	9804      	ldr	r0, [sp, #16]
 8003efa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8003efc:	3001      	adds	r0, #1
 8003efe:	9004      	str	r0, [sp, #16]
 8003f00:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003f02:	4420      	add	r0, r4
 8003f04:	900b      	str	r0, [sp, #44]	; 0x2c
 8003f06:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8003f08:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003f0a:	4420      	add	r0, r4
 8003f0c:	900a      	str	r0, [sp, #40]	; 0x28
 8003f0e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8003f10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f12:	4420      	add	r0, r4
 8003f14:	9009      	str	r0, [sp, #36]	; 0x24
 8003f16:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8003f18:	9808      	ldr	r0, [sp, #32]
 8003f1a:	4420      	add	r0, r4
 8003f1c:	9008      	str	r0, [sp, #32]
 8003f1e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8003f20:	9807      	ldr	r0, [sp, #28]
 8003f22:	4420      	add	r0, r4
 8003f24:	9007      	str	r0, [sp, #28]
 8003f26:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8003f28:	9806      	ldr	r0, [sp, #24]
 8003f2a:	4420      	add	r0, r4
 8003f2c:	9006      	str	r0, [sp, #24]
 8003f2e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8003f30:	9805      	ldr	r0, [sp, #20]
 8003f32:	4420      	add	r0, r4
 8003f34:	9005      	str	r0, [sp, #20]
      } while(j < n2);
 8003f36:	9804      	ldr	r0, [sp, #16]
 8003f38:	4282      	cmp	r2, r0
 8003f3a:	f101 0108 	add.w	r1, r1, #8
 8003f3e:	f47f ae99 	bne.w	8003c74 <arm_radix8_butterfly_f32+0x2c0>
      
      twidCoefModifier <<= 3;
 8003f42:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f46:	fa1f fb83 	uxth.w	fp, r3
         j++;
 8003f4a:	9203      	str	r2, [sp, #12]
 8003f4c:	e540      	b.n	80039d0 <arm_radix8_butterfly_f32+0x1c>
   } while(n2 > 7);   
}
 8003f4e:	b01d      	add	sp, #116	; 0x74
 8003f50:	ecbd 8b10 	vpop	{d8-d15}
 8003f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003f58 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003f58:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8003f5a:	f000 fe89 	bl	8004c70 <vTaskStartScheduler>
  
  return osOK;
}
 8003f5e:	2000      	movs	r0, #0
 8003f60:	bd08      	pop	{r3, pc}

08003f62 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003f62:	b570      	push	{r4, r5, r6, lr}
 8003f64:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003f66:	6946      	ldr	r6, [r0, #20]
 8003f68:	692a      	ldr	r2, [r5, #16]
 8003f6a:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 8003f6e:	460b      	mov	r3, r1
 8003f70:	b086      	sub	sp, #24
 8003f72:	e9d0 1000 	ldrd	r1, r0, [r0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003f76:	b176      	cbz	r6, 8003f96 <osThreadCreate+0x34>
 8003f78:	69ad      	ldr	r5, [r5, #24]
 8003f7a:	b165      	cbz	r5, 8003f96 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8003f7c:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8003f7e:	bf14      	ite	ne
 8003f80:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003f82:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f84:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8003f88:	9400      	str	r4, [sp, #0]
 8003f8a:	f000 fdcb 	bl	8004b24 <xTaskCreateStatic>
 8003f8e:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003f90:	9805      	ldr	r0, [sp, #20]
}
 8003f92:	b006      	add	sp, #24
 8003f94:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8003f96:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8003f98:	bf14      	ite	ne
 8003f9a:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003f9c:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f9e:	ad05      	add	r5, sp, #20
 8003fa0:	b292      	uxth	r2, r2
 8003fa2:	e9cd 4500 	strd	r4, r5, [sp]
 8003fa6:	f000 fdf4 	bl	8004b92 <xTaskCreate>
 8003faa:	2801      	cmp	r0, #1
 8003fac:	d0f0      	beq.n	8003f90 <osThreadCreate+0x2e>
      return NULL;
 8003fae:	2000      	movs	r0, #0
 8003fb0:	e7ef      	b.n	8003f92 <osThreadCreate+0x30>

08003fb2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8003fb2:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8003fb4:	6844      	ldr	r4, [r0, #4]
{ 
 8003fb6:	460d      	mov	r5, r1
  if (semaphore_def->controlblock != NULL){
 8003fb8:	b16c      	cbz	r4, 8003fd6 <osSemaphoreCreate+0x24>
    if (count == 1) {
 8003fba:	2901      	cmp	r1, #1
 8003fbc:	d11b      	bne.n	8003ff6 <osSemaphoreCreate+0x44>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	4628      	mov	r0, r5
 8003fc6:	4623      	mov	r3, r4
 8003fc8:	4611      	mov	r1, r2
 8003fca:	f000 f941 	bl	8004250 <xQueueGenericCreateStatic>
 8003fce:	4605      	mov	r5, r0
#else
    return NULL;
#endif
  }
#endif
}
 8003fd0:	4628      	mov	r0, r5
 8003fd2:	b003      	add	sp, #12
 8003fd4:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 8003fd6:	2901      	cmp	r1, #1
 8003fd8:	d10f      	bne.n	8003ffa <osSemaphoreCreate+0x48>
      vSemaphoreCreateBinary(sema);
 8003fda:	4628      	mov	r0, r5
 8003fdc:	2203      	movs	r2, #3
 8003fde:	4621      	mov	r1, r4
 8003fe0:	f000 f97f 	bl	80042e2 <xQueueGenericCreate>
 8003fe4:	4605      	mov	r5, r0
 8003fe6:	2800      	cmp	r0, #0
 8003fe8:	d0f2      	beq.n	8003fd0 <osSemaphoreCreate+0x1e>
 8003fea:	4623      	mov	r3, r4
 8003fec:	4622      	mov	r2, r4
 8003fee:	4621      	mov	r1, r4
 8003ff0:	f000 f99c 	bl	800432c <xQueueGenericSend>
 8003ff4:	e7ec      	b.n	8003fd0 <osSemaphoreCreate+0x1e>
      return NULL;
 8003ff6:	2500      	movs	r5, #0
 8003ff8:	e7ea      	b.n	8003fd0 <osSemaphoreCreate+0x1e>
 8003ffa:	4625      	mov	r5, r4
 8003ffc:	e7e8      	b.n	8003fd0 <osSemaphoreCreate+0x1e>

08003ffe <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003ffe:	b513      	push	{r0, r1, r4, lr}
 8004000:	4603      	mov	r3, r0
 8004002:	c807      	ldmia	r0, {r0, r1, r2}
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004004:	b13a      	cbz	r2, 8004016 <osMessageCreate+0x18>
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	b12b      	cbz	r3, 8004016 <osMessageCreate+0x18>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800400a:	2400      	movs	r4, #0
 800400c:	9400      	str	r4, [sp, #0]
 800400e:	f000 f91f 	bl	8004250 <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004012:	b002      	add	sp, #8
 8004014:	bd10      	pop	{r4, pc}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004016:	2200      	movs	r2, #0
}
 8004018:	b002      	add	sp, #8
 800401a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800401e:	f000 b960 	b.w	80042e2 <xQueueGenericCreate>

08004022 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8004022:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004024:	f001 f8ba 	bl	800519c <xTaskGetSchedulerState>
 8004028:	2801      	cmp	r0, #1
 800402a:	d003      	beq.n	8004034 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800402c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8004030:	f001 baa0 	b.w	8005574 <xPortSysTickHandler>
}
 8004034:	bd08      	pop	{r3, pc}

08004036 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004036:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800403a:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800403e:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004040:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004044:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004046:	2300      	movs	r3, #0
 8004048:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800404a:	4770      	bx	lr

0800404c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800404c:	2300      	movs	r3, #0
 800404e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004050:	4770      	bx	lr

08004052 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004052:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004054:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800405e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8004060:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004062:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004064:	3301      	adds	r3, #1
 8004066:	6003      	str	r3, [r0, #0]
}
 8004068:	4770      	bx	lr

0800406a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800406a:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800406c:	1c53      	adds	r3, r2, #1
{
 800406e:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8004070:	d10a      	bne.n	8004088 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004072:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004078:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800407a:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800407c:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800407e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004080:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004082:	3301      	adds	r3, #1
 8004084:	6003      	str	r3, [r0, #0]
}
 8004086:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004088:	f100 0308 	add.w	r3, r0, #8
 800408c:	685c      	ldr	r4, [r3, #4]
 800408e:	6825      	ldr	r5, [r4, #0]
 8004090:	4295      	cmp	r5, r2
 8004092:	d8ef      	bhi.n	8004074 <vListInsert+0xa>
 8004094:	4623      	mov	r3, r4
 8004096:	e7f9      	b.n	800408c <vListInsert+0x22>

08004098 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004098:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800409c:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800409e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80040a0:	6882      	ldr	r2, [r0, #8]
 80040a2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80040a4:	6859      	ldr	r1, [r3, #4]
 80040a6:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040a8:	bf08      	it	eq
 80040aa:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80040ac:	2200      	movs	r2, #0
 80040ae:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	3a01      	subs	r2, #1
 80040b4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040b6:	6818      	ldr	r0, [r3, #0]
}
 80040b8:	4770      	bx	lr

080040ba <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80040ba:	b510      	push	{r4, lr}
 80040bc:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040be:	f001 f9f1 	bl	80054a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80040c2:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80040c4:	f001 fa10 	bl	80054e8 <vPortExitCritical>

	return xReturn;
}
 80040c8:	fab4 f084 	clz	r0, r4
 80040cc:	0940      	lsrs	r0, r0, #5
 80040ce:	bd10      	pop	{r4, pc}

080040d0 <prvCopyDataToQueue>:
{
 80040d0:	b570      	push	{r4, r5, r6, lr}
 80040d2:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80040d4:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040d6:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 80040d8:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80040da:	b942      	cbnz	r2, 80040ee <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040dc:	6805      	ldr	r5, [r0, #0]
 80040de:	b99d      	cbnz	r5, 8004108 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80040e0:	6840      	ldr	r0, [r0, #4]
 80040e2:	f001 f8bd 	bl	8005260 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80040e6:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80040e8:	3601      	adds	r6, #1
 80040ea:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80040ec:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80040ee:	b96d      	cbnz	r5, 800410c <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80040f0:	6880      	ldr	r0, [r0, #8]
 80040f2:	f002 fb13 	bl	800671c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80040f6:	68a3      	ldr	r3, [r4, #8]
 80040f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80040fa:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040fc:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80040fe:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004100:	4293      	cmp	r3, r2
 8004102:	d301      	bcc.n	8004108 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004104:	6823      	ldr	r3, [r4, #0]
 8004106:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8004108:	2000      	movs	r0, #0
 800410a:	e7ed      	b.n	80040e8 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800410c:	68c0      	ldr	r0, [r0, #12]
 800410e:	f002 fb05 	bl	800671c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004112:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004114:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004116:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004118:	425b      	negs	r3, r3
 800411a:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800411c:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800411e:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004120:	bf3e      	ittt	cc
 8004122:	6862      	ldrcc	r2, [r4, #4]
 8004124:	189b      	addcc	r3, r3, r2
 8004126:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8004128:	2d02      	cmp	r5, #2
 800412a:	d1ed      	bne.n	8004108 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800412c:	b10e      	cbz	r6, 8004132 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800412e:	3e01      	subs	r6, #1
 8004130:	e7ea      	b.n	8004108 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8004132:	4630      	mov	r0, r6
 8004134:	e7d8      	b.n	80040e8 <prvCopyDataToQueue+0x18>

08004136 <prvCopyDataFromQueue>:
{
 8004136:	4603      	mov	r3, r0
 8004138:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800413a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800413c:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800413e:	b162      	cbz	r2, 800415a <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004140:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004142:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004144:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004146:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004148:	60d9      	str	r1, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800414a:	bf24      	itt	cs
 800414c:	6819      	ldrcs	r1, [r3, #0]
 800414e:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004150:	68d9      	ldr	r1, [r3, #12]
}
 8004152:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004156:	f002 bae1 	b.w	800671c <memcpy>
}
 800415a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800415e:	4770      	bx	lr

08004160 <prvUnlockQueue>:
{
 8004160:	b570      	push	{r4, r5, r6, lr}
 8004162:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004164:	f001 f99e 	bl	80054a4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8004168:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800416c:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8004170:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004172:	2d00      	cmp	r5, #0
 8004174:	dc14      	bgt.n	80041a0 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8004176:	23ff      	movs	r3, #255	; 0xff
 8004178:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800417c:	f001 f9b4 	bl	80054e8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8004180:	f001 f990 	bl	80054a4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8004184:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004188:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 800418c:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800418e:	2d00      	cmp	r5, #0
 8004190:	dc12      	bgt.n	80041b8 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8004192:	23ff      	movs	r3, #255	; 0xff
 8004194:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8004198:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800419c:	f001 b9a4 	b.w	80054e8 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0e7      	beq.n	8004176 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041a6:	4630      	mov	r0, r6
 80041a8:	f000 ff68 	bl	800507c <xTaskRemoveFromEventList>
 80041ac:	b108      	cbz	r0, 80041b2 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80041ae:	f000 ffef 	bl	8005190 <vTaskMissedYield>
 80041b2:	3d01      	subs	r5, #1
 80041b4:	b26d      	sxtb	r5, r5
 80041b6:	e7dc      	b.n	8004172 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041b8:	6923      	ldr	r3, [r4, #16]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d0e9      	beq.n	8004192 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041be:	4630      	mov	r0, r6
 80041c0:	f000 ff5c 	bl	800507c <xTaskRemoveFromEventList>
 80041c4:	b108      	cbz	r0, 80041ca <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80041c6:	f000 ffe3 	bl	8005190 <vTaskMissedYield>
 80041ca:	3d01      	subs	r5, #1
 80041cc:	b26d      	sxtb	r5, r5
 80041ce:	e7de      	b.n	800418e <prvUnlockQueue+0x2e>

080041d0 <xQueueGenericReset>:
{
 80041d0:	b538      	push	{r3, r4, r5, lr}
 80041d2:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80041d4:	4604      	mov	r4, r0
 80041d6:	b940      	cbnz	r0, 80041ea <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80041d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041dc:	f383 8811 	msr	BASEPRI, r3
 80041e0:	f3bf 8f6f 	isb	sy
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	e7fe      	b.n	80041e8 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 80041ea:	f001 f95b 	bl	80054a4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80041ee:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
 80041f2:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80041f4:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80041f6:	4343      	muls	r3, r0
 80041f8:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80041fa:	1a1b      	subs	r3, r3, r0
 80041fc:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80041fe:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004200:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004202:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8004204:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004206:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8004208:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800420c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8004210:	b995      	cbnz	r5, 8004238 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004212:	6923      	ldr	r3, [r4, #16]
 8004214:	b163      	cbz	r3, 8004230 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004216:	f104 0010 	add.w	r0, r4, #16
 800421a:	f000 ff2f 	bl	800507c <xTaskRemoveFromEventList>
 800421e:	b138      	cbz	r0, 8004230 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8004220:	4b0a      	ldr	r3, [pc, #40]	; (800424c <xQueueGenericReset+0x7c>)
 8004222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	f3bf 8f4f 	dsb	sy
 800422c:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8004230:	f001 f95a 	bl	80054e8 <vPortExitCritical>
}
 8004234:	2001      	movs	r0, #1
 8004236:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004238:	f104 0010 	add.w	r0, r4, #16
 800423c:	f7ff fefb 	bl	8004036 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004240:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004244:	f7ff fef7 	bl	8004036 <vListInitialise>
 8004248:	e7f2      	b.n	8004230 <xQueueGenericReset+0x60>
 800424a:	bf00      	nop
 800424c:	e000ed04 	.word	0xe000ed04

08004250 <xQueueGenericCreateStatic>:
	{
 8004250:	b513      	push	{r0, r1, r4, lr}
 8004252:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004254:	b940      	cbnz	r0, 8004268 <xQueueGenericCreateStatic+0x18>
 8004256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425a:	f383 8811 	msr	BASEPRI, r3
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	f3bf 8f4f 	dsb	sy
 8004266:	e7fe      	b.n	8004266 <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8004268:	b943      	cbnz	r3, 800427c <xQueueGenericCreateStatic+0x2c>
 800426a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426e:	f383 8811 	msr	BASEPRI, r3
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	f3bf 8f4f 	dsb	sy
 800427a:	e7fe      	b.n	800427a <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800427c:	b14a      	cbz	r2, 8004292 <xQueueGenericCreateStatic+0x42>
 800427e:	b991      	cbnz	r1, 80042a6 <xQueueGenericCreateStatic+0x56>
 8004280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	e7fe      	b.n	8004290 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004292:	b141      	cbz	r1, 80042a6 <xQueueGenericCreateStatic+0x56>
 8004294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	e7fe      	b.n	80042a4 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80042a6:	2348      	movs	r3, #72	; 0x48
 80042a8:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80042aa:	9b01      	ldr	r3, [sp, #4]
 80042ac:	2b48      	cmp	r3, #72	; 0x48
 80042ae:	d008      	beq.n	80042c2 <xQueueGenericCreateStatic+0x72>
 80042b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b4:	f383 8811 	msr	BASEPRI, r3
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	e7fe      	b.n	80042c0 <xQueueGenericCreateStatic+0x70>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80042c2:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80042c4:	2900      	cmp	r1, #0
 80042c6:	bf08      	it	eq
 80042c8:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 80042ca:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80042ce:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80042d2:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80042d4:	4619      	mov	r1, r3
 80042d6:	4620      	mov	r0, r4
 80042d8:	f7ff ff7a 	bl	80041d0 <xQueueGenericReset>
	}
 80042dc:	4620      	mov	r0, r4
 80042de:	b002      	add	sp, #8
 80042e0:	bd10      	pop	{r4, pc}

080042e2 <xQueueGenericCreate>:
	{
 80042e2:	b570      	push	{r4, r5, r6, lr}
 80042e4:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80042e6:	4606      	mov	r6, r0
 80042e8:	b940      	cbnz	r0, 80042fc <xQueueGenericCreate+0x1a>
 80042ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ee:	f383 8811 	msr	BASEPRI, r3
 80042f2:	f3bf 8f6f 	isb	sy
 80042f6:	f3bf 8f4f 	dsb	sy
 80042fa:	e7fe      	b.n	80042fa <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042fc:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80042fe:	3048      	adds	r0, #72	; 0x48
 8004300:	f001 fa40 	bl	8005784 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004304:	4604      	mov	r4, r0
 8004306:	b150      	cbz	r0, 800431e <xQueueGenericCreate+0x3c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004308:	2300      	movs	r3, #0
 800430a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800430e:	b945      	cbnz	r5, 8004322 <xQueueGenericCreate+0x40>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004310:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8004312:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004316:	2101      	movs	r1, #1
 8004318:	4620      	mov	r0, r4
 800431a:	f7ff ff59 	bl	80041d0 <xQueueGenericReset>
	}
 800431e:	4620      	mov	r0, r4
 8004320:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004322:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004326:	6003      	str	r3, [r0, #0]
 8004328:	e7f3      	b.n	8004312 <xQueueGenericCreate+0x30>
	...

0800432c <xQueueGenericSend>:
{
 800432c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004330:	4688      	mov	r8, r1
 8004332:	9201      	str	r2, [sp, #4]
 8004334:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8004336:	4604      	mov	r4, r0
 8004338:	b940      	cbnz	r0, 800434c <xQueueGenericSend+0x20>
 800433a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433e:	f383 8811 	msr	BASEPRI, r3
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	e7fe      	b.n	800434a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800434c:	b951      	cbnz	r1, 8004364 <xQueueGenericSend+0x38>
 800434e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004350:	b143      	cbz	r3, 8004364 <xQueueGenericSend+0x38>
 8004352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004356:	f383 8811 	msr	BASEPRI, r3
 800435a:	f3bf 8f6f 	isb	sy
 800435e:	f3bf 8f4f 	dsb	sy
 8004362:	e7fe      	b.n	8004362 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004364:	2f02      	cmp	r7, #2
 8004366:	d10b      	bne.n	8004380 <xQueueGenericSend+0x54>
 8004368:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800436a:	2b01      	cmp	r3, #1
 800436c:	d008      	beq.n	8004380 <xQueueGenericSend+0x54>
 800436e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004372:	f383 8811 	msr	BASEPRI, r3
 8004376:	f3bf 8f6f 	isb	sy
 800437a:	f3bf 8f4f 	dsb	sy
 800437e:	e7fe      	b.n	800437e <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004380:	f000 ff0c 	bl	800519c <xTaskGetSchedulerState>
 8004384:	b950      	cbnz	r0, 800439c <xQueueGenericSend+0x70>
 8004386:	9e01      	ldr	r6, [sp, #4]
 8004388:	b14e      	cbz	r6, 800439e <xQueueGenericSend+0x72>
 800438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	e7fe      	b.n	800439a <xQueueGenericSend+0x6e>
 800439c:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800439e:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 80043a2:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 800448c <xQueueGenericSend+0x160>
 80043a6:	e037      	b.n	8004418 <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 80043a8:	9d01      	ldr	r5, [sp, #4]
 80043aa:	b91d      	cbnz	r5, 80043b4 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 80043ac:	f001 f89c 	bl	80054e8 <vPortExitCritical>
			return errQUEUE_FULL;
 80043b0:	2000      	movs	r0, #0
 80043b2:	e050      	b.n	8004456 <xQueueGenericSend+0x12a>
				else if( xEntryTimeSet == pdFALSE )
 80043b4:	b916      	cbnz	r6, 80043bc <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043b6:	a802      	add	r0, sp, #8
 80043b8:	f000 fea2 	bl	8005100 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80043bc:	f001 f894 	bl	80054e8 <vPortExitCritical>
		vTaskSuspendAll();
 80043c0:	f000 fc8c 	bl	8004cdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043c4:	f001 f86e 	bl	80054a4 <vPortEnterCritical>
 80043c8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80043cc:	2bff      	cmp	r3, #255	; 0xff
 80043ce:	bf08      	it	eq
 80043d0:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 80043d4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80043d8:	2bff      	cmp	r3, #255	; 0xff
 80043da:	bf08      	it	eq
 80043dc:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 80043e0:	f001 f882 	bl	80054e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043e4:	a901      	add	r1, sp, #4
 80043e6:	a802      	add	r0, sp, #8
 80043e8:	f000 fe96 	bl	8005118 <xTaskCheckForTimeOut>
 80043ec:	2800      	cmp	r0, #0
 80043ee:	d146      	bne.n	800447e <xQueueGenericSend+0x152>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80043f0:	f001 f858 	bl	80054a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80043f4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80043f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d12f      	bne.n	800445c <xQueueGenericSend+0x130>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80043fc:	f001 f874 	bl	80054e8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004400:	9901      	ldr	r1, [sp, #4]
 8004402:	f104 0010 	add.w	r0, r4, #16
 8004406:	f000 fe1f 	bl	8005048 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800440a:	4620      	mov	r0, r4
 800440c:	f7ff fea8 	bl	8004160 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004410:	f000 fcfe 	bl	8004e10 <xTaskResumeAll>
 8004414:	b350      	cbz	r0, 800446c <xQueueGenericSend+0x140>
 8004416:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004418:	f001 f844 	bl	80054a4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800441c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800441e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004420:	429a      	cmp	r2, r3
 8004422:	d301      	bcc.n	8004428 <xQueueGenericSend+0xfc>
 8004424:	2f02      	cmp	r7, #2
 8004426:	d1bf      	bne.n	80043a8 <xQueueGenericSend+0x7c>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004428:	463a      	mov	r2, r7
 800442a:	4641      	mov	r1, r8
 800442c:	4620      	mov	r0, r4
 800442e:	f7ff fe4f 	bl	80040d0 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004432:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004434:	b11b      	cbz	r3, 800443e <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004436:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800443a:	f000 fe1f 	bl	800507c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800443e:	b138      	cbz	r0, 8004450 <xQueueGenericSend+0x124>
						queueYIELD_IF_USING_PREEMPTION();
 8004440:	4b12      	ldr	r3, [pc, #72]	; (800448c <xQueueGenericSend+0x160>)
 8004442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004446:	601a      	str	r2, [r3, #0]
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004450:	f001 f84a 	bl	80054e8 <vPortExitCritical>
				return pdPASS;
 8004454:	2001      	movs	r0, #1
}
 8004456:	b004      	add	sp, #16
 8004458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 800445c:	f001 f844 	bl	80054e8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8004460:	4620      	mov	r0, r4
 8004462:	f7ff fe7d 	bl	8004160 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004466:	f000 fcd3 	bl	8004e10 <xTaskResumeAll>
 800446a:	e7d4      	b.n	8004416 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 800446c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004470:	f8ca 3000 	str.w	r3, [sl]
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	f3bf 8f6f 	isb	sy
 800447c:	e7cb      	b.n	8004416 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 800447e:	4620      	mov	r0, r4
 8004480:	f7ff fe6e 	bl	8004160 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004484:	f000 fcc4 	bl	8004e10 <xTaskResumeAll>
 8004488:	e792      	b.n	80043b0 <xQueueGenericSend+0x84>
 800448a:	bf00      	nop
 800448c:	e000ed04 	.word	0xe000ed04

08004490 <xQueueGiveFromISR>:
{
 8004490:	b570      	push	{r4, r5, r6, lr}
 8004492:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8004494:	4604      	mov	r4, r0
 8004496:	b940      	cbnz	r0, 80044aa <xQueueGiveFromISR+0x1a>
 8004498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449c:	f383 8811 	msr	BASEPRI, r3
 80044a0:	f3bf 8f6f 	isb	sy
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	e7fe      	b.n	80044a8 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 80044aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80044ac:	b143      	cbz	r3, 80044c0 <xQueueGiveFromISR+0x30>
 80044ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b2:	f383 8811 	msr	BASEPRI, r3
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	e7fe      	b.n	80044be <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80044c0:	6803      	ldr	r3, [r0, #0]
 80044c2:	b953      	cbnz	r3, 80044da <xQueueGiveFromISR+0x4a>
 80044c4:	6843      	ldr	r3, [r0, #4]
 80044c6:	b143      	cbz	r3, 80044da <xQueueGiveFromISR+0x4a>
 80044c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044cc:	f383 8811 	msr	BASEPRI, r3
 80044d0:	f3bf 8f6f 	isb	sy
 80044d4:	f3bf 8f4f 	dsb	sy
 80044d8:	e7fe      	b.n	80044d8 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044da:	f001 f901 	bl	80056e0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80044de:	f3ef 8611 	mrs	r6, BASEPRI
 80044e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e6:	f383 8811 	msr	BASEPRI, r3
 80044ea:	f3bf 8f6f 	isb	sy
 80044ee:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044f2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80044f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d91c      	bls.n	8004534 <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 80044fa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80044fe:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 8004500:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004502:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	d110      	bne.n	800452a <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004508:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800450a:	b90b      	cbnz	r3, 8004510 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 800450c:	2001      	movs	r0, #1
 800450e:	e009      	b.n	8004524 <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004510:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004514:	f000 fdb2 	bl	800507c <xTaskRemoveFromEventList>
 8004518:	2800      	cmp	r0, #0
 800451a:	d0f7      	beq.n	800450c <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 800451c:	2d00      	cmp	r5, #0
 800451e:	d0f5      	beq.n	800450c <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004520:	2001      	movs	r0, #1
 8004522:	6028      	str	r0, [r5, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004524:	f386 8811 	msr	BASEPRI, r6
}
 8004528:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800452a:	3301      	adds	r3, #1
 800452c:	b25b      	sxtb	r3, r3
 800452e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004532:	e7eb      	b.n	800450c <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 8004534:	2000      	movs	r0, #0
 8004536:	e7f5      	b.n	8004524 <xQueueGiveFromISR+0x94>

08004538 <xQueueReceive>:
{
 8004538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800453c:	b085      	sub	sp, #20
 800453e:	460f      	mov	r7, r1
 8004540:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004542:	4604      	mov	r4, r0
 8004544:	b940      	cbnz	r0, 8004558 <xQueueReceive+0x20>
	__asm volatile
 8004546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454a:	f383 8811 	msr	BASEPRI, r3
 800454e:	f3bf 8f6f 	isb	sy
 8004552:	f3bf 8f4f 	dsb	sy
 8004556:	e7fe      	b.n	8004556 <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004558:	b951      	cbnz	r1, 8004570 <xQueueReceive+0x38>
 800455a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800455c:	b143      	cbz	r3, 8004570 <xQueueReceive+0x38>
 800455e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004562:	f383 8811 	msr	BASEPRI, r3
 8004566:	f3bf 8f6f 	isb	sy
 800456a:	f3bf 8f4f 	dsb	sy
 800456e:	e7fe      	b.n	800456e <xQueueReceive+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004570:	f000 fe14 	bl	800519c <xTaskGetSchedulerState>
 8004574:	b950      	cbnz	r0, 800458c <xQueueReceive+0x54>
 8004576:	9e01      	ldr	r6, [sp, #4]
 8004578:	b14e      	cbz	r6, 800458e <xQueueReceive+0x56>
 800457a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	e7fe      	b.n	800458a <xQueueReceive+0x52>
 800458c:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800458e:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8004592:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8004674 <xQueueReceive+0x13c>
 8004596:	e03b      	b.n	8004610 <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004598:	9d01      	ldr	r5, [sp, #4]
 800459a:	b91d      	cbnz	r5, 80045a4 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 800459c:	f000 ffa4 	bl	80054e8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80045a0:	2000      	movs	r0, #0
 80045a2:	e052      	b.n	800464a <xQueueReceive+0x112>
				else if( xEntryTimeSet == pdFALSE )
 80045a4:	b916      	cbnz	r6, 80045ac <xQueueReceive+0x74>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045a6:	a802      	add	r0, sp, #8
 80045a8:	f000 fdaa 	bl	8005100 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80045ac:	f000 ff9c 	bl	80054e8 <vPortExitCritical>
		vTaskSuspendAll();
 80045b0:	f000 fb94 	bl	8004cdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045b4:	f000 ff76 	bl	80054a4 <vPortEnterCritical>
 80045b8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80045bc:	2bff      	cmp	r3, #255	; 0xff
 80045be:	bf08      	it	eq
 80045c0:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 80045c4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80045c8:	2bff      	cmp	r3, #255	; 0xff
 80045ca:	bf08      	it	eq
 80045cc:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 80045d0:	f000 ff8a 	bl	80054e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045d4:	a901      	add	r1, sp, #4
 80045d6:	a802      	add	r0, sp, #8
 80045d8:	f000 fd9e 	bl	8005118 <xTaskCheckForTimeOut>
 80045dc:	2800      	cmp	r0, #0
 80045de:	d13d      	bne.n	800465c <xQueueReceive+0x124>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045e0:	4620      	mov	r0, r4
 80045e2:	f7ff fd6a 	bl	80040ba <prvIsQueueEmpty>
 80045e6:	b398      	cbz	r0, 8004650 <xQueueReceive+0x118>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80045e8:	9901      	ldr	r1, [sp, #4]
 80045ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80045ee:	f000 fd2b 	bl	8005048 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80045f2:	4620      	mov	r0, r4
 80045f4:	f7ff fdb4 	bl	8004160 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80045f8:	f000 fc0a 	bl	8004e10 <xTaskResumeAll>
 80045fc:	b938      	cbnz	r0, 800460e <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 80045fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004602:	f8c9 3000 	str.w	r3, [r9]
 8004606:	f3bf 8f4f 	dsb	sy
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004610:	f000 ff48 	bl	80054a4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004614:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004616:	2d00      	cmp	r5, #0
 8004618:	d0be      	beq.n	8004598 <xQueueReceive+0x60>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800461a:	4639      	mov	r1, r7
 800461c:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800461e:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004620:	f7ff fd89 	bl	8004136 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004624:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004626:	6923      	ldr	r3, [r4, #16]
 8004628:	b163      	cbz	r3, 8004644 <xQueueReceive+0x10c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800462a:	f104 0010 	add.w	r0, r4, #16
 800462e:	f000 fd25 	bl	800507c <xTaskRemoveFromEventList>
 8004632:	b138      	cbz	r0, 8004644 <xQueueReceive+0x10c>
						queueYIELD_IF_USING_PREEMPTION();
 8004634:	4b0f      	ldr	r3, [pc, #60]	; (8004674 <xQueueReceive+0x13c>)
 8004636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004644:	f000 ff50 	bl	80054e8 <vPortExitCritical>
				return pdPASS;
 8004648:	2001      	movs	r0, #1
}
 800464a:	b005      	add	sp, #20
 800464c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8004650:	4620      	mov	r0, r4
 8004652:	f7ff fd85 	bl	8004160 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004656:	f000 fbdb 	bl	8004e10 <xTaskResumeAll>
 800465a:	e7d8      	b.n	800460e <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 800465c:	4620      	mov	r0, r4
 800465e:	f7ff fd7f 	bl	8004160 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004662:	f000 fbd5 	bl	8004e10 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004666:	4620      	mov	r0, r4
 8004668:	f7ff fd27 	bl	80040ba <prvIsQueueEmpty>
 800466c:	2800      	cmp	r0, #0
 800466e:	d0ce      	beq.n	800460e <xQueueReceive+0xd6>
 8004670:	e796      	b.n	80045a0 <xQueueReceive+0x68>
 8004672:	bf00      	nop
 8004674:	e000ed04 	.word	0xe000ed04

08004678 <xQueueSemaphoreTake>:
{
 8004678:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 800467c:	4604      	mov	r4, r0
{
 800467e:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004680:	b940      	cbnz	r0, 8004694 <xQueueSemaphoreTake+0x1c>
 8004682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004686:	f383 8811 	msr	BASEPRI, r3
 800468a:	f3bf 8f6f 	isb	sy
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	e7fe      	b.n	8004692 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8004694:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8004696:	b145      	cbz	r5, 80046aa <xQueueSemaphoreTake+0x32>
 8004698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469c:	f383 8811 	msr	BASEPRI, r3
 80046a0:	f3bf 8f6f 	isb	sy
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	e7fe      	b.n	80046a8 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046aa:	f000 fd77 	bl	800519c <xTaskGetSchedulerState>
 80046ae:	b950      	cbnz	r0, 80046c6 <xQueueSemaphoreTake+0x4e>
 80046b0:	9d01      	ldr	r5, [sp, #4]
 80046b2:	b145      	cbz	r5, 80046c6 <xQueueSemaphoreTake+0x4e>
 80046b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	e7fe      	b.n	80046c4 <xQueueSemaphoreTake+0x4c>
 80046c6:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 80046c8:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 80046ca:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80047f8 <xQueueSemaphoreTake+0x180>
 80046ce:	e04f      	b.n	8004770 <xQueueSemaphoreTake+0xf8>
				if( xTicksToWait == ( TickType_t ) 0 )
 80046d0:	9b01      	ldr	r3, [sp, #4]
 80046d2:	b963      	cbnz	r3, 80046ee <xQueueSemaphoreTake+0x76>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80046d4:	b145      	cbz	r5, 80046e8 <xQueueSemaphoreTake+0x70>
 80046d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046da:	f383 8811 	msr	BASEPRI, r3
 80046de:	f3bf 8f6f 	isb	sy
 80046e2:	f3bf 8f4f 	dsb	sy
 80046e6:	e7fe      	b.n	80046e6 <xQueueSemaphoreTake+0x6e>
					taskEXIT_CRITICAL();
 80046e8:	f000 fefe 	bl	80054e8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80046ec:	e05e      	b.n	80047ac <xQueueSemaphoreTake+0x134>
				else if( xEntryTimeSet == pdFALSE )
 80046ee:	b916      	cbnz	r6, 80046f6 <xQueueSemaphoreTake+0x7e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80046f0:	a802      	add	r0, sp, #8
 80046f2:	f000 fd05 	bl	8005100 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80046f6:	f000 fef7 	bl	80054e8 <vPortExitCritical>
		vTaskSuspendAll();
 80046fa:	f000 faef 	bl	8004cdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046fe:	f000 fed1 	bl	80054a4 <vPortEnterCritical>
 8004702:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004706:	2bff      	cmp	r3, #255	; 0xff
 8004708:	bf08      	it	eq
 800470a:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 800470e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004712:	2bff      	cmp	r3, #255	; 0xff
 8004714:	bf08      	it	eq
 8004716:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 800471a:	f000 fee5 	bl	80054e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800471e:	a901      	add	r1, sp, #4
 8004720:	a802      	add	r0, sp, #8
 8004722:	f000 fcf9 	bl	8005118 <xTaskCheckForTimeOut>
 8004726:	2800      	cmp	r0, #0
 8004728:	d14a      	bne.n	80047c0 <xQueueSemaphoreTake+0x148>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800472a:	4620      	mov	r0, r4
 800472c:	f7ff fcc5 	bl	80040ba <prvIsQueueEmpty>
 8004730:	2800      	cmp	r0, #0
 8004732:	d03f      	beq.n	80047b4 <xQueueSemaphoreTake+0x13c>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004734:	6823      	ldr	r3, [r4, #0]
 8004736:	b93b      	cbnz	r3, 8004748 <xQueueSemaphoreTake+0xd0>
						taskENTER_CRITICAL();
 8004738:	f000 feb4 	bl	80054a4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800473c:	6860      	ldr	r0, [r4, #4]
 800473e:	f000 fd3d 	bl	80051bc <xTaskPriorityInherit>
 8004742:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8004744:	f000 fed0 	bl	80054e8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004748:	9901      	ldr	r1, [sp, #4]
 800474a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800474e:	f000 fc7b 	bl	8005048 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004752:	4620      	mov	r0, r4
 8004754:	f7ff fd04 	bl	8004160 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004758:	f000 fb5a 	bl	8004e10 <xTaskResumeAll>
 800475c:	b938      	cbnz	r0, 800476e <xQueueSemaphoreTake+0xf6>
					portYIELD_WITHIN_API();
 800475e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004762:	f8c8 3000 	str.w	r3, [r8]
 8004766:	f3bf 8f4f 	dsb	sy
 800476a:	f3bf 8f6f 	isb	sy
 800476e:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004770:	f000 fe98 	bl	80054a4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004774:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0aa      	beq.n	80046d0 <xQueueSemaphoreTake+0x58>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800477a:	3b01      	subs	r3, #1
 800477c:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	b913      	cbnz	r3, 8004788 <xQueueSemaphoreTake+0x110>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004782:	f000 fe17 	bl	80053b4 <pvTaskIncrementMutexHeldCount>
 8004786:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004788:	6923      	ldr	r3, [r4, #16]
 800478a:	b163      	cbz	r3, 80047a6 <xQueueSemaphoreTake+0x12e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800478c:	f104 0010 	add.w	r0, r4, #16
 8004790:	f000 fc74 	bl	800507c <xTaskRemoveFromEventList>
 8004794:	b138      	cbz	r0, 80047a6 <xQueueSemaphoreTake+0x12e>
						queueYIELD_IF_USING_PREEMPTION();
 8004796:	4b18      	ldr	r3, [pc, #96]	; (80047f8 <xQueueSemaphoreTake+0x180>)
 8004798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80047a6:	f000 fe9f 	bl	80054e8 <vPortExitCritical>
				return pdPASS;
 80047aa:	2501      	movs	r5, #1
}
 80047ac:	4628      	mov	r0, r5
 80047ae:	b004      	add	sp, #16
 80047b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 80047b4:	4620      	mov	r0, r4
 80047b6:	f7ff fcd3 	bl	8004160 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047ba:	f000 fb29 	bl	8004e10 <xTaskResumeAll>
 80047be:	e7d6      	b.n	800476e <xQueueSemaphoreTake+0xf6>
			prvUnlockQueue( pxQueue );
 80047c0:	4620      	mov	r0, r4
 80047c2:	f7ff fccd 	bl	8004160 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047c6:	f000 fb23 	bl	8004e10 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047ca:	4620      	mov	r0, r4
 80047cc:	f7ff fc75 	bl	80040ba <prvIsQueueEmpty>
 80047d0:	2800      	cmp	r0, #0
 80047d2:	d0cc      	beq.n	800476e <xQueueSemaphoreTake+0xf6>
					if( xInheritanceOccurred != pdFALSE )
 80047d4:	2d00      	cmp	r5, #0
 80047d6:	d0e9      	beq.n	80047ac <xQueueSemaphoreTake+0x134>
						taskENTER_CRITICAL();
 80047d8:	f000 fe64 	bl	80054a4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80047dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80047de:	b119      	cbz	r1, 80047e8 <xQueueSemaphoreTake+0x170>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80047e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80047e2:	6819      	ldr	r1, [r3, #0]
 80047e4:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80047e8:	6860      	ldr	r0, [r4, #4]
 80047ea:	f000 fd89 	bl	8005300 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 80047ee:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 80047f0:	f000 fe7a 	bl	80054e8 <vPortExitCritical>
 80047f4:	e7da      	b.n	80047ac <xQueueSemaphoreTake+0x134>
 80047f6:	bf00      	nop
 80047f8:	e000ed04 	.word	0xe000ed04

080047fc <uxQueueMessagesWaiting>:
{
 80047fc:	b510      	push	{r4, lr}
	configASSERT( xQueue );
 80047fe:	4604      	mov	r4, r0
 8004800:	b940      	cbnz	r0, 8004814 <uxQueueMessagesWaiting+0x18>
 8004802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004806:	f383 8811 	msr	BASEPRI, r3
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	e7fe      	b.n	8004812 <uxQueueMessagesWaiting+0x16>
	taskENTER_CRITICAL();
 8004814:	f000 fe46 	bl	80054a4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004818:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800481a:	f000 fe65 	bl	80054e8 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800481e:	4620      	mov	r0, r4
 8004820:	bd10      	pop	{r4, pc}
	...

08004824 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004828:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800482a:	f000 fe3b 	bl	80054a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800482e:	4b2e      	ldr	r3, [pc, #184]	; (80048e8 <prvAddNewTaskToReadyList+0xc4>)
		if( pxCurrentTCB == NULL )
 8004830:	4c2e      	ldr	r4, [pc, #184]	; (80048ec <prvAddNewTaskToReadyList+0xc8>)
		uxCurrentNumberOfTasks++;
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	4f2e      	ldr	r7, [pc, #184]	; (80048f0 <prvAddNewTaskToReadyList+0xcc>)
 8004836:	3201      	adds	r2, #1
 8004838:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800483a:	6825      	ldr	r5, [r4, #0]
 800483c:	2d00      	cmp	r5, #0
 800483e:	d148      	bne.n	80048d2 <prvAddNewTaskToReadyList+0xae>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004840:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d11f      	bne.n	8004888 <prvAddNewTaskToReadyList+0x64>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004848:	f04f 0814 	mov.w	r8, #20
 800484c:	fb08 7005 	mla	r0, r8, r5, r7
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004850:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004852:	f7ff fbf0 	bl	8004036 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004856:	2d07      	cmp	r5, #7
 8004858:	d1f8      	bne.n	800484c <prvAddNewTaskToReadyList+0x28>
	}

	vListInitialise( &xDelayedTaskList1 );
 800485a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800491c <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800485e:	4d25      	ldr	r5, [pc, #148]	; (80048f4 <prvAddNewTaskToReadyList+0xd0>)
	vListInitialise( &xDelayedTaskList1 );
 8004860:	4640      	mov	r0, r8
 8004862:	f7ff fbe8 	bl	8004036 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004866:	4628      	mov	r0, r5
 8004868:	f7ff fbe5 	bl	8004036 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800486c:	4822      	ldr	r0, [pc, #136]	; (80048f8 <prvAddNewTaskToReadyList+0xd4>)
 800486e:	f7ff fbe2 	bl	8004036 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004872:	4822      	ldr	r0, [pc, #136]	; (80048fc <prvAddNewTaskToReadyList+0xd8>)
 8004874:	f7ff fbdf 	bl	8004036 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004878:	4821      	ldr	r0, [pc, #132]	; (8004900 <prvAddNewTaskToReadyList+0xdc>)
 800487a:	f7ff fbdc 	bl	8004036 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800487e:	4b21      	ldr	r3, [pc, #132]	; (8004904 <prvAddNewTaskToReadyList+0xe0>)
 8004880:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004884:	4b20      	ldr	r3, [pc, #128]	; (8004908 <prvAddNewTaskToReadyList+0xe4>)
 8004886:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8004888:	4a20      	ldr	r2, [pc, #128]	; (800490c <prvAddNewTaskToReadyList+0xe8>)
		prvAddTaskToReadyList( pxNewTCB );
 800488a:	4921      	ldr	r1, [pc, #132]	; (8004910 <prvAddNewTaskToReadyList+0xec>)
		uxTaskNumber++;
 800488c:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800488e:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8004890:	3301      	adds	r3, #1
 8004892:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004894:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8004896:	2301      	movs	r3, #1
 8004898:	4093      	lsls	r3, r2
 800489a:	4303      	orrs	r3, r0
 800489c:	2014      	movs	r0, #20
 800489e:	600b      	str	r3, [r1, #0]
 80048a0:	fb00 7002 	mla	r0, r0, r2, r7
 80048a4:	1d31      	adds	r1, r6, #4
 80048a6:	f7ff fbd4 	bl	8004052 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80048aa:	f000 fe1d 	bl	80054e8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80048ae:	4b19      	ldr	r3, [pc, #100]	; (8004914 <prvAddNewTaskToReadyList+0xf0>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	b163      	cbz	r3, 80048ce <prvAddNewTaskToReadyList+0xaa>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80048b4:	6823      	ldr	r3, [r4, #0]
 80048b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d207      	bcs.n	80048ce <prvAddNewTaskToReadyList+0xaa>
			taskYIELD_IF_USING_PREEMPTION();
 80048be:	4b16      	ldr	r3, [pc, #88]	; (8004918 <prvAddNewTaskToReadyList+0xf4>)
 80048c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	f3bf 8f6f 	isb	sy
}
 80048ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80048d2:	4b10      	ldr	r3, [pc, #64]	; (8004914 <prvAddNewTaskToReadyList+0xf0>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1d6      	bne.n	8004888 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048de:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80048e0:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80048e2:	bf98      	it	ls
 80048e4:	6026      	strls	r6, [r4, #0]
 80048e6:	e7cf      	b.n	8004888 <prvAddNewTaskToReadyList+0x64>
 80048e8:	20000148 	.word	0x20000148
 80048ec:	200000b0 	.word	0x200000b0
 80048f0:	200000bc 	.word	0x200000bc
 80048f4:	20000174 	.word	0x20000174
 80048f8:	20000190 	.word	0x20000190
 80048fc:	200001bc 	.word	0x200001bc
 8004900:	200001a8 	.word	0x200001a8
 8004904:	200000b4 	.word	0x200000b4
 8004908:	200000b8 	.word	0x200000b8
 800490c:	20000158 	.word	0x20000158
 8004910:	2000015c 	.word	0x2000015c
 8004914:	200001a4 	.word	0x200001a4
 8004918:	e000ed04 	.word	0xe000ed04
 800491c:	20000160 	.word	0x20000160

08004920 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004920:	b510      	push	{r4, lr}
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004922:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 8004926:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004928:	b93b      	cbnz	r3, 800493a <prvDeleteTCB+0x1a>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800492a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800492c:	f000 ffb6 	bl	800589c <vPortFree>
				vPortFree( pxTCB );
 8004930:	4620      	mov	r0, r4
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8004936:	f000 bfb1 	b.w	800589c <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800493a:	2b01      	cmp	r3, #1
 800493c:	d0f9      	beq.n	8004932 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800493e:	2b02      	cmp	r3, #2
 8004940:	d008      	beq.n	8004954 <prvDeleteTCB+0x34>
 8004942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004946:	f383 8811 	msr	BASEPRI, r3
 800494a:	f3bf 8f6f 	isb	sy
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	e7fe      	b.n	8004952 <prvDeleteTCB+0x32>
	}
 8004954:	bd10      	pop	{r4, pc}
	...

08004958 <prvIdleTask>:
{
 8004958:	b580      	push	{r7, lr}
				taskYIELD();
 800495a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80049b8 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800495e:	4f12      	ldr	r7, [pc, #72]	; (80049a8 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004960:	4c12      	ldr	r4, [pc, #72]	; (80049ac <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8004962:	4d13      	ldr	r5, [pc, #76]	; (80049b0 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004964:	6823      	ldr	r3, [r4, #0]
 8004966:	b963      	cbnz	r3, 8004982 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004968:	4b12      	ldr	r3, [pc, #72]	; (80049b4 <prvIdleTask+0x5c>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d9f8      	bls.n	8004962 <prvIdleTask+0xa>
				taskYIELD();
 8004970:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004974:	f8c8 3000 	str.w	r3, [r8]
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	e7ee      	b.n	8004960 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8004982:	f000 fd8f 	bl	80054a4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800498a:	1d30      	adds	r0, r6, #4
 800498c:	f7ff fb84 	bl	8004098 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004990:	682b      	ldr	r3, [r5, #0]
 8004992:	3b01      	subs	r3, #1
 8004994:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004996:	6823      	ldr	r3, [r4, #0]
 8004998:	3b01      	subs	r3, #1
 800499a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800499c:	f000 fda4 	bl	80054e8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80049a0:	4630      	mov	r0, r6
 80049a2:	f7ff ffbd 	bl	8004920 <prvDeleteTCB>
 80049a6:	e7dd      	b.n	8004964 <prvIdleTask+0xc>
 80049a8:	200001bc 	.word	0x200001bc
 80049ac:	2000014c 	.word	0x2000014c
 80049b0:	20000148 	.word	0x20000148
 80049b4:	200000bc 	.word	0x200000bc
 80049b8:	e000ed04 	.word	0xe000ed04

080049bc <prvTaskIsTaskSuspended>:
		configASSERT( xTask );
 80049bc:	b940      	cbnz	r0, 80049d0 <prvTaskIsTaskSuspended+0x14>
 80049be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	e7fe      	b.n	80049ce <prvTaskIsTaskSuspended+0x12>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80049d0:	6942      	ldr	r2, [r0, #20]
 80049d2:	4b06      	ldr	r3, [pc, #24]	; (80049ec <prvTaskIsTaskSuspended+0x30>)
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d107      	bne.n	80049e8 <prvTaskIsTaskSuspended+0x2c>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80049d8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80049da:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <prvTaskIsTaskSuspended+0x34>)
 80049dc:	4298      	cmp	r0, r3
 80049de:	d003      	beq.n	80049e8 <prvTaskIsTaskSuspended+0x2c>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80049e0:	fab0 f080 	clz	r0, r0
 80049e4:	0940      	lsrs	r0, r0, #5
 80049e6:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 80049e8:	2000      	movs	r0, #0
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80049ea:	4770      	bx	lr
 80049ec:	200001a8 	.word	0x200001a8
 80049f0:	20000190 	.word	0x20000190

080049f4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049f4:	4a06      	ldr	r2, [pc, #24]	; (8004a10 <prvResetNextTaskUnblockTime+0x1c>)
 80049f6:	6813      	ldr	r3, [r2, #0]
 80049f8:	6819      	ldr	r1, [r3, #0]
 80049fa:	4b06      	ldr	r3, [pc, #24]	; (8004a14 <prvResetNextTaskUnblockTime+0x20>)
 80049fc:	b919      	cbnz	r1, 8004a06 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80049fe:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a02:	601a      	str	r2, [r3, #0]
	}
}
 8004a04:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004a06:	6812      	ldr	r2, [r2, #0]
 8004a08:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a0a:	68d2      	ldr	r2, [r2, #12]
 8004a0c:	6852      	ldr	r2, [r2, #4]
 8004a0e:	e7f8      	b.n	8004a02 <prvResetNextTaskUnblockTime+0xe>
 8004a10:	200000b4 	.word	0x200000b4
 8004a14:	20000188 	.word	0x20000188

08004a18 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8004a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a1c:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004a20:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004a24:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8004a26:	3a01      	subs	r2, #1
 8004a28:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8004a2c:	469a      	mov	sl, r3
 8004a2e:	4681      	mov	r9, r0
 8004a30:	1e4b      	subs	r3, r1, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004a32:	f026 0607 	bic.w	r6, r6, #7
 8004a36:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8004a3a:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a3c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8004a40:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 8004a44:	7818      	ldrb	r0, [r3, #0]
 8004a46:	b108      	cbz	r0, 8004a4c <prvInitialiseNewTask.isra.2+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a48:	428b      	cmp	r3, r1
 8004a4a:	d1f7      	bne.n	8004a3c <prvInitialiseNewTask.isra.2+0x24>
 8004a4c:	9d08      	ldr	r5, [sp, #32]
 8004a4e:	2d06      	cmp	r5, #6
 8004a50:	bf28      	it	cs
 8004a52:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a54:	2700      	movs	r7, #0
	pxNewTCB->uxPriority = uxPriority;
 8004a56:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 8004a58:	e9c4 5711 	strd	r5, r7, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a5c:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a5e:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a62:	f7ff faf3 	bl	800404c <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a66:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a6a:	f104 0018 	add.w	r0, r4, #24
 8004a6e:	f7ff faed 	bl	800404c <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8004a72:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a74:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a76:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a78:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004a7a:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a7e:	4652      	mov	r2, sl
 8004a80:	4649      	mov	r1, r9
 8004a82:	4630      	mov	r0, r6
 8004a84:	f000 fce0 	bl	8005448 <pxPortInitialiseStack>
 8004a88:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8004a8a:	f1b8 0f00 	cmp.w	r8, #0
 8004a8e:	d001      	beq.n	8004a94 <prvInitialiseNewTask.isra.2+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a90:	f8c8 4000 	str.w	r4, [r8]
}
 8004a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004a98 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a9a:	4b1b      	ldr	r3, [pc, #108]	; (8004b08 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a9c:	4e1b      	ldr	r6, [pc, #108]	; (8004b0c <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8004a9e:	681c      	ldr	r4, [r3, #0]
{
 8004aa0:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004aa2:	6830      	ldr	r0, [r6, #0]
 8004aa4:	3004      	adds	r0, #4
{
 8004aa6:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004aa8:	f7ff faf6 	bl	8004098 <uxListRemove>
 8004aac:	4633      	mov	r3, r6
 8004aae:	b940      	cbnz	r0, 8004ac2 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004ab0:	6831      	ldr	r1, [r6, #0]
 8004ab2:	4e17      	ldr	r6, [pc, #92]	; (8004b10 <prvAddCurrentTaskToDelayedList+0x78>)
 8004ab4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004ab6:	6832      	ldr	r2, [r6, #0]
 8004ab8:	2001      	movs	r0, #1
 8004aba:	4088      	lsls	r0, r1
 8004abc:	ea22 0200 	bic.w	r2, r2, r0
 8004ac0:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ac2:	1c6a      	adds	r2, r5, #1
 8004ac4:	d107      	bne.n	8004ad6 <prvAddCurrentTaskToDelayedList+0x3e>
 8004ac6:	b137      	cbz	r7, 8004ad6 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ac8:	6819      	ldr	r1, [r3, #0]
 8004aca:	4812      	ldr	r0, [pc, #72]	; (8004b14 <prvAddCurrentTaskToDelayedList+0x7c>)
 8004acc:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ace:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ad2:	f7ff babe 	b.w	8004052 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	1964      	adds	r4, r4, r5
 8004ada:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8004adc:	d307      	bcc.n	8004aee <prvAddCurrentTaskToDelayedList+0x56>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ade:	4a0e      	ldr	r2, [pc, #56]	; (8004b18 <prvAddCurrentTaskToDelayedList+0x80>)
 8004ae0:	6810      	ldr	r0, [r2, #0]
 8004ae2:	6819      	ldr	r1, [r3, #0]
}
 8004ae4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ae8:	3104      	adds	r1, #4
 8004aea:	f7ff babe 	b.w	800406a <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004aee:	4a0b      	ldr	r2, [pc, #44]	; (8004b1c <prvAddCurrentTaskToDelayedList+0x84>)
 8004af0:	6810      	ldr	r0, [r2, #0]
 8004af2:	6819      	ldr	r1, [r3, #0]
 8004af4:	3104      	adds	r1, #4
 8004af6:	f7ff fab8 	bl	800406a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004afa:	4b09      	ldr	r3, [pc, #36]	; (8004b20 <prvAddCurrentTaskToDelayedList+0x88>)
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8004b00:	bf88      	it	hi
 8004b02:	601c      	strhi	r4, [r3, #0]
}
 8004b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b06:	bf00      	nop
 8004b08:	200001d0 	.word	0x200001d0
 8004b0c:	200000b0 	.word	0x200000b0
 8004b10:	2000015c 	.word	0x2000015c
 8004b14:	200001a8 	.word	0x200001a8
 8004b18:	200000b8 	.word	0x200000b8
 8004b1c:	200000b4 	.word	0x200000b4
 8004b20:	20000188 	.word	0x20000188

08004b24 <xTaskCreateStatic>:
	{
 8004b24:	b570      	push	{r4, r5, r6, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8004b2c:	b945      	cbnz	r5, 8004b40 <xTaskCreateStatic+0x1c>
 8004b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b32:	f383 8811 	msr	BASEPRI, r3
 8004b36:	f3bf 8f6f 	isb	sy
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	e7fe      	b.n	8004b3e <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8004b40:	b944      	cbnz	r4, 8004b54 <xTaskCreateStatic+0x30>
 8004b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	e7fe      	b.n	8004b52 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b54:	2654      	movs	r6, #84	; 0x54
 8004b56:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b58:	9e04      	ldr	r6, [sp, #16]
 8004b5a:	2e54      	cmp	r6, #84	; 0x54
 8004b5c:	d008      	beq.n	8004b70 <xTaskCreateStatic+0x4c>
 8004b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	e7fe      	b.n	8004b6e <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b70:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b72:	2502      	movs	r5, #2
 8004b74:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b78:	ad05      	add	r5, sp, #20
 8004b7a:	9501      	str	r5, [sp, #4]
 8004b7c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004b7e:	9402      	str	r4, [sp, #8]
 8004b80:	9500      	str	r5, [sp, #0]
 8004b82:	f7ff ff49 	bl	8004a18 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b86:	4620      	mov	r0, r4
 8004b88:	f7ff fe4c 	bl	8004824 <prvAddNewTaskToReadyList>
	}
 8004b8c:	9805      	ldr	r0, [sp, #20]
 8004b8e:	b006      	add	sp, #24
 8004b90:	bd70      	pop	{r4, r5, r6, pc}

08004b92 <xTaskCreate>:
	{
 8004b92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b96:	4607      	mov	r7, r0
 8004b98:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b9a:	0090      	lsls	r0, r2, #2
	{
 8004b9c:	4688      	mov	r8, r1
 8004b9e:	4616      	mov	r6, r2
 8004ba0:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ba2:	f000 fdef 	bl	8005784 <pvPortMalloc>
			if( pxStack != NULL )
 8004ba6:	4605      	mov	r5, r0
 8004ba8:	b1e8      	cbz	r0, 8004be6 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004baa:	2054      	movs	r0, #84	; 0x54
 8004bac:	f000 fdea 	bl	8005784 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004bb0:	4604      	mov	r4, r0
 8004bb2:	b1a8      	cbz	r0, 8004be0 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004bba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8004bbc:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004bbe:	9301      	str	r3, [sp, #4]
 8004bc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004bc2:	9002      	str	r0, [sp, #8]
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	4632      	mov	r2, r6
 8004bc8:	464b      	mov	r3, r9
 8004bca:	4641      	mov	r1, r8
 8004bcc:	4638      	mov	r0, r7
 8004bce:	f7ff ff23 	bl	8004a18 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	f7ff fe26 	bl	8004824 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004bd8:	2001      	movs	r0, #1
	}
 8004bda:	b005      	add	sp, #20
 8004bdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8004be0:	4628      	mov	r0, r5
 8004be2:	f000 fe5b 	bl	800589c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004be6:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8004bea:	e7f6      	b.n	8004bda <xTaskCreate+0x48>

08004bec <vTaskResume>:
	{
 8004bec:	b570      	push	{r4, r5, r6, lr}
		configASSERT( xTaskToResume );
 8004bee:	4604      	mov	r4, r0
 8004bf0:	b940      	cbnz	r0, 8004c04 <vTaskResume+0x18>
 8004bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf6:	f383 8811 	msr	BASEPRI, r3
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	e7fe      	b.n	8004c02 <vTaskResume+0x16>
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8004c04:	4d16      	ldr	r5, [pc, #88]	; (8004c60 <vTaskResume+0x74>)
 8004c06:	682b      	ldr	r3, [r5, #0]
 8004c08:	4283      	cmp	r3, r0
 8004c0a:	d028      	beq.n	8004c5e <vTaskResume+0x72>
			taskENTER_CRITICAL();
 8004c0c:	f000 fc4a 	bl	80054a4 <vPortEnterCritical>
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8004c10:	4620      	mov	r0, r4
 8004c12:	f7ff fed3 	bl	80049bc <prvTaskIsTaskSuspended>
 8004c16:	b1f0      	cbz	r0, 8004c56 <vTaskResume+0x6a>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8004c18:	1d26      	adds	r6, r4, #4
 8004c1a:	4630      	mov	r0, r6
 8004c1c:	f7ff fa3c 	bl	8004098 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c20:	4910      	ldr	r1, [pc, #64]	; (8004c64 <vTaskResume+0x78>)
 8004c22:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004c24:	6808      	ldr	r0, [r1, #0]
 8004c26:	2301      	movs	r3, #1
 8004c28:	4093      	lsls	r3, r2
 8004c2a:	4303      	orrs	r3, r0
 8004c2c:	600b      	str	r3, [r1, #0]
 8004c2e:	4b0e      	ldr	r3, [pc, #56]	; (8004c68 <vTaskResume+0x7c>)
 8004c30:	2014      	movs	r0, #20
 8004c32:	fb00 3002 	mla	r0, r0, r2, r3
 8004c36:	4631      	mov	r1, r6
 8004c38:	f7ff fa0b 	bl	8004052 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c3c:	682b      	ldr	r3, [r5, #0]
 8004c3e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d307      	bcc.n	8004c56 <vTaskResume+0x6a>
						taskYIELD_IF_USING_PREEMPTION();
 8004c46:	4b09      	ldr	r3, [pc, #36]	; (8004c6c <vTaskResume+0x80>)
 8004c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	f3bf 8f6f 	isb	sy
	}
 8004c56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			taskEXIT_CRITICAL();
 8004c5a:	f000 bc45 	b.w	80054e8 <vPortExitCritical>
	}
 8004c5e:	bd70      	pop	{r4, r5, r6, pc}
 8004c60:	200000b0 	.word	0x200000b0
 8004c64:	2000015c 	.word	0x2000015c
 8004c68:	200000bc 	.word	0x200000bc
 8004c6c:	e000ed04 	.word	0xe000ed04

08004c70 <vTaskStartScheduler>:
{
 8004c70:	b510      	push	{r4, lr}
 8004c72:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c74:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c76:	aa07      	add	r2, sp, #28
 8004c78:	a906      	add	r1, sp, #24
 8004c7a:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c7c:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c80:	f000 fec4 	bl	8005a0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c84:	9b05      	ldr	r3, [sp, #20]
 8004c86:	9302      	str	r3, [sp, #8]
 8004c88:	9b06      	ldr	r3, [sp, #24]
 8004c8a:	9a07      	ldr	r2, [sp, #28]
 8004c8c:	490e      	ldr	r1, [pc, #56]	; (8004cc8 <vTaskStartScheduler+0x58>)
 8004c8e:	480f      	ldr	r0, [pc, #60]	; (8004ccc <vTaskStartScheduler+0x5c>)
 8004c90:	e9cd 4300 	strd	r4, r3, [sp]
 8004c94:	4623      	mov	r3, r4
 8004c96:	f7ff ff45 	bl	8004b24 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8004c9a:	b190      	cbz	r0, 8004cc2 <vTaskStartScheduler+0x52>
 8004c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca0:	f383 8811 	msr	BASEPRI, r3
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8004cac:	4b08      	ldr	r3, [pc, #32]	; (8004cd0 <vTaskStartScheduler+0x60>)
 8004cae:	f04f 32ff 	mov.w	r2, #4294967295
 8004cb2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004cb4:	4b07      	ldr	r3, [pc, #28]	; (8004cd4 <vTaskStartScheduler+0x64>)
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004cba:	4b07      	ldr	r3, [pc, #28]	; (8004cd8 <vTaskStartScheduler+0x68>)
 8004cbc:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8004cbe:	f000 fc89 	bl	80055d4 <xPortStartScheduler>
}
 8004cc2:	b008      	add	sp, #32
 8004cc4:	bd10      	pop	{r4, pc}
 8004cc6:	bf00      	nop
 8004cc8:	080107e8 	.word	0x080107e8
 8004ccc:	08004959 	.word	0x08004959
 8004cd0:	20000188 	.word	0x20000188
 8004cd4:	200001a4 	.word	0x200001a4
 8004cd8:	200001d0 	.word	0x200001d0

08004cdc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004cdc:	4a02      	ldr	r2, [pc, #8]	; (8004ce8 <vTaskSuspendAll+0xc>)
 8004cde:	6813      	ldr	r3, [r2, #0]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	6013      	str	r3, [r2, #0]
}
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	20000154 	.word	0x20000154

08004cec <xTaskIncrementTick>:
{
 8004cec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cf0:	4b3c      	ldr	r3, [pc, #240]	; (8004de4 <xTaskIncrementTick+0xf8>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d16e      	bne.n	8004dd6 <xTaskIncrementTick+0xea>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004cf8:	4b3b      	ldr	r3, [pc, #236]	; (8004de8 <xTaskIncrementTick+0xfc>)
 8004cfa:	681c      	ldr	r4, [r3, #0]
 8004cfc:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8004cfe:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d00:	b9bc      	cbnz	r4, 8004d32 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8004d02:	4b3a      	ldr	r3, [pc, #232]	; (8004dec <xTaskIncrementTick+0x100>)
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	6812      	ldr	r2, [r2, #0]
 8004d08:	b142      	cbz	r2, 8004d1c <xTaskIncrementTick+0x30>
 8004d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0e:	f383 8811 	msr	BASEPRI, r3
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	f3bf 8f4f 	dsb	sy
 8004d1a:	e7fe      	b.n	8004d1a <xTaskIncrementTick+0x2e>
 8004d1c:	4a34      	ldr	r2, [pc, #208]	; (8004df0 <xTaskIncrementTick+0x104>)
 8004d1e:	6819      	ldr	r1, [r3, #0]
 8004d20:	6810      	ldr	r0, [r2, #0]
 8004d22:	6018      	str	r0, [r3, #0]
 8004d24:	6011      	str	r1, [r2, #0]
 8004d26:	4a33      	ldr	r2, [pc, #204]	; (8004df4 <xTaskIncrementTick+0x108>)
 8004d28:	6813      	ldr	r3, [r2, #0]
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	6013      	str	r3, [r2, #0]
 8004d2e:	f7ff fe61 	bl	80049f4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d32:	4d31      	ldr	r5, [pc, #196]	; (8004df8 <xTaskIncrementTick+0x10c>)
 8004d34:	4f31      	ldr	r7, [pc, #196]	; (8004dfc <xTaskIncrementTick+0x110>)
 8004d36:	682b      	ldr	r3, [r5, #0]
 8004d38:	42a3      	cmp	r3, r4
BaseType_t xSwitchRequired = pdFALSE;
 8004d3a:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d3e:	d911      	bls.n	8004d64 <xTaskIncrementTick+0x78>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	4b2f      	ldr	r3, [pc, #188]	; (8004e00 <xTaskIncrementTick+0x114>)
 8004d44:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004d46:	2214      	movs	r2, #20
 8004d48:	434a      	muls	r2, r1
 8004d4a:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8004d4c:	2a02      	cmp	r2, #2
 8004d4e:	bf28      	it	cs
 8004d50:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8004d54:	4a2b      	ldr	r2, [pc, #172]	; (8004e04 <xTaskIncrementTick+0x118>)
 8004d56:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8004d58:	2a00      	cmp	r2, #0
}
 8004d5a:	bf0c      	ite	eq
 8004d5c:	4658      	moveq	r0, fp
 8004d5e:	2001      	movne	r0, #1
 8004d60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d64:	f8df a084 	ldr.w	sl, [pc, #132]	; 8004dec <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8004d68:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8004e0c <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d6c:	f8da 2000 	ldr.w	r2, [sl]
 8004d70:	6812      	ldr	r2, [r2, #0]
 8004d72:	b91a      	cbnz	r2, 8004d7c <xTaskIncrementTick+0x90>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d74:	f04f 32ff 	mov.w	r2, #4294967295
 8004d78:	602a      	str	r2, [r5, #0]
					break;
 8004d7a:	e7e1      	b.n	8004d40 <xTaskIncrementTick+0x54>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004d7c:	f8da 2000 	ldr.w	r2, [sl]
 8004d80:	68d2      	ldr	r2, [r2, #12]
 8004d82:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d84:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8004d86:	428c      	cmp	r4, r1
 8004d88:	d201      	bcs.n	8004d8e <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 8004d8a:	6029      	str	r1, [r5, #0]
						break;
 8004d8c:	e7d8      	b.n	8004d40 <xTaskIncrementTick+0x54>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d8e:	f106 0804 	add.w	r8, r6, #4
 8004d92:	4640      	mov	r0, r8
 8004d94:	f7ff f980 	bl	8004098 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d98:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8004d9a:	b119      	cbz	r1, 8004da4 <xTaskIncrementTick+0xb8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d9c:	f106 0018 	add.w	r0, r6, #24
 8004da0:	f7ff f97a 	bl	8004098 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004da4:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8004da6:	f8d9 3000 	ldr.w	r3, [r9]
 8004daa:	2201      	movs	r2, #1
 8004dac:	fa02 f100 	lsl.w	r1, r2, r0
 8004db0:	4319      	orrs	r1, r3
 8004db2:	4b13      	ldr	r3, [pc, #76]	; (8004e00 <xTaskIncrementTick+0x114>)
 8004db4:	f8c9 1000 	str.w	r1, [r9]
 8004db8:	f04f 0c14 	mov.w	ip, #20
 8004dbc:	4641      	mov	r1, r8
 8004dbe:	fb0c 3000 	mla	r0, ip, r0, r3
 8004dc2:	f7ff f946 	bl	8004052 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004dc6:	6838      	ldr	r0, [r7, #0]
 8004dc8:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8004dca:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8004dcc:	4291      	cmp	r1, r2
 8004dce:	bf28      	it	cs
 8004dd0:	f04f 0b01 	movcs.w	fp, #1
 8004dd4:	e7ca      	b.n	8004d6c <xTaskIncrementTick+0x80>
		++uxPendedTicks;
 8004dd6:	4a0c      	ldr	r2, [pc, #48]	; (8004e08 <xTaskIncrementTick+0x11c>)
 8004dd8:	6813      	ldr	r3, [r2, #0]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8004dde:	f04f 0b00 	mov.w	fp, #0
 8004de2:	e7b7      	b.n	8004d54 <xTaskIncrementTick+0x68>
 8004de4:	20000154 	.word	0x20000154
 8004de8:	200001d0 	.word	0x200001d0
 8004dec:	200000b4 	.word	0x200000b4
 8004df0:	200000b8 	.word	0x200000b8
 8004df4:	2000018c 	.word	0x2000018c
 8004df8:	20000188 	.word	0x20000188
 8004dfc:	200000b0 	.word	0x200000b0
 8004e00:	200000bc 	.word	0x200000bc
 8004e04:	200001d4 	.word	0x200001d4
 8004e08:	20000150 	.word	0x20000150
 8004e0c:	2000015c 	.word	0x2000015c

08004e10 <xTaskResumeAll>:
{
 8004e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8004e14:	4c30      	ldr	r4, [pc, #192]	; (8004ed8 <xTaskResumeAll+0xc8>)
 8004e16:	6823      	ldr	r3, [r4, #0]
 8004e18:	b943      	cbnz	r3, 8004e2c <xTaskResumeAll+0x1c>
 8004e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1e:	f383 8811 	msr	BASEPRI, r3
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	e7fe      	b.n	8004e2a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8004e2c:	f000 fb3a 	bl	80054a4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004e30:	6823      	ldr	r3, [r4, #0]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e36:	6824      	ldr	r4, [r4, #0]
 8004e38:	b12c      	cbz	r4, 8004e46 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8004e3a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004e3c:	f000 fb54 	bl	80054e8 <vPortExitCritical>
}
 8004e40:	4620      	mov	r0, r4
 8004e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004e46:	4b25      	ldr	r3, [pc, #148]	; (8004edc <xTaskResumeAll+0xcc>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0f5      	beq.n	8004e3a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e4e:	4d24      	ldr	r5, [pc, #144]	; (8004ee0 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8004e50:	4e24      	ldr	r6, [pc, #144]	; (8004ee4 <xTaskResumeAll+0xd4>)
 8004e52:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8004ef8 <xTaskResumeAll+0xe8>
 8004e56:	e01f      	b.n	8004e98 <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004e58:	68eb      	ldr	r3, [r5, #12]
 8004e5a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e5c:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e60:	f104 0018 	add.w	r0, r4, #24
 8004e64:	f7ff f918 	bl	8004098 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e68:	4648      	mov	r0, r9
 8004e6a:	f7ff f915 	bl	8004098 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e6e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004e70:	6831      	ldr	r1, [r6, #0]
 8004e72:	2701      	movs	r7, #1
 8004e74:	fa07 f302 	lsl.w	r3, r7, r2
 8004e78:	2014      	movs	r0, #20
 8004e7a:	430b      	orrs	r3, r1
 8004e7c:	fb00 8002 	mla	r0, r0, r2, r8
 8004e80:	4649      	mov	r1, r9
 8004e82:	6033      	str	r3, [r6, #0]
 8004e84:	f7ff f8e5 	bl	8004052 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e88:	4b17      	ldr	r3, [pc, #92]	; (8004ee8 <xTaskResumeAll+0xd8>)
 8004e8a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d301      	bcc.n	8004e98 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 8004e94:	4b15      	ldr	r3, [pc, #84]	; (8004eec <xTaskResumeAll+0xdc>)
 8004e96:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e98:	682b      	ldr	r3, [r5, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1dc      	bne.n	8004e58 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8004e9e:	b10c      	cbz	r4, 8004ea4 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 8004ea0:	f7ff fda8 	bl	80049f4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004ea4:	4d12      	ldr	r5, [pc, #72]	; (8004ef0 <xTaskResumeAll+0xe0>)
 8004ea6:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004ea8:	b144      	cbz	r4, 8004ebc <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8004eaa:	4e10      	ldr	r6, [pc, #64]	; (8004eec <xTaskResumeAll+0xdc>)
 8004eac:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8004eae:	f7ff ff1d 	bl	8004cec <xTaskIncrementTick>
 8004eb2:	b100      	cbz	r0, 8004eb6 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8004eb4:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004eb6:	3c01      	subs	r4, #1
 8004eb8:	d1f9      	bne.n	8004eae <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 8004eba:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8004ebc:	4b0b      	ldr	r3, [pc, #44]	; (8004eec <xTaskResumeAll+0xdc>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d0ba      	beq.n	8004e3a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8004ec4:	4b0b      	ldr	r3, [pc, #44]	; (8004ef4 <xTaskResumeAll+0xe4>)
 8004ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	f3bf 8f4f 	dsb	sy
 8004ed0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8004ed4:	2401      	movs	r4, #1
 8004ed6:	e7b1      	b.n	8004e3c <xTaskResumeAll+0x2c>
 8004ed8:	20000154 	.word	0x20000154
 8004edc:	20000148 	.word	0x20000148
 8004ee0:	20000190 	.word	0x20000190
 8004ee4:	2000015c 	.word	0x2000015c
 8004ee8:	200000b0 	.word	0x200000b0
 8004eec:	200001d4 	.word	0x200001d4
 8004ef0:	20000150 	.word	0x20000150
 8004ef4:	e000ed04 	.word	0xe000ed04
 8004ef8:	200000bc 	.word	0x200000bc

08004efc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004efc:	4b17      	ldr	r3, [pc, #92]	; (8004f5c <vTaskSwitchContext+0x60>)
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	4b17      	ldr	r3, [pc, #92]	; (8004f60 <vTaskSwitchContext+0x64>)
{
 8004f02:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f04:	b112      	cbz	r2, 8004f0c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8004f06:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004f08:	601a      	str	r2, [r3, #0]
}
 8004f0a:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8004f0c:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004f0e:	4b15      	ldr	r3, [pc, #84]	; (8004f64 <vTaskSwitchContext+0x68>)
 8004f10:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004f12:	fab3 f383 	clz	r3, r3
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	f1c3 031f 	rsb	r3, r3, #31
 8004f1c:	2214      	movs	r2, #20
 8004f1e:	4912      	ldr	r1, [pc, #72]	; (8004f68 <vTaskSwitchContext+0x6c>)
 8004f20:	435a      	muls	r2, r3
 8004f22:	1888      	adds	r0, r1, r2
 8004f24:	588c      	ldr	r4, [r1, r2]
 8004f26:	b944      	cbnz	r4, 8004f3a <vTaskSwitchContext+0x3e>
	__asm volatile
 8004f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2c:	f383 8811 	msr	BASEPRI, r3
 8004f30:	f3bf 8f6f 	isb	sy
 8004f34:	f3bf 8f4f 	dsb	sy
 8004f38:	e7fe      	b.n	8004f38 <vTaskSwitchContext+0x3c>
 8004f3a:	6844      	ldr	r4, [r0, #4]
 8004f3c:	3208      	adds	r2, #8
 8004f3e:	6864      	ldr	r4, [r4, #4]
 8004f40:	6044      	str	r4, [r0, #4]
 8004f42:	440a      	add	r2, r1
 8004f44:	4294      	cmp	r4, r2
 8004f46:	bf04      	itt	eq
 8004f48:	6862      	ldreq	r2, [r4, #4]
 8004f4a:	6042      	streq	r2, [r0, #4]
 8004f4c:	2214      	movs	r2, #20
 8004f4e:	fb02 1303 	mla	r3, r2, r3, r1
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	68da      	ldr	r2, [r3, #12]
 8004f56:	4b05      	ldr	r3, [pc, #20]	; (8004f6c <vTaskSwitchContext+0x70>)
 8004f58:	e7d6      	b.n	8004f08 <vTaskSwitchContext+0xc>
 8004f5a:	bf00      	nop
 8004f5c:	20000154 	.word	0x20000154
 8004f60:	200001d4 	.word	0x200001d4
 8004f64:	2000015c 	.word	0x2000015c
 8004f68:	200000bc 	.word	0x200000bc
 8004f6c:	200000b0 	.word	0x200000b0

08004f70 <vTaskSuspend>:
	{
 8004f70:	b570      	push	{r4, r5, r6, lr}
 8004f72:	4604      	mov	r4, r0
 8004f74:	4e2c      	ldr	r6, [pc, #176]	; (8005028 <vTaskSuspend+0xb8>)
		taskENTER_CRITICAL();
 8004f76:	f000 fa95 	bl	80054a4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004f7a:	b904      	cbnz	r4, 8004f7e <vTaskSuspend+0xe>
 8004f7c:	6834      	ldr	r4, [r6, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f7e:	1d25      	adds	r5, r4, #4
 8004f80:	4628      	mov	r0, r5
 8004f82:	f7ff f889 	bl	8004098 <uxListRemove>
 8004f86:	b960      	cbnz	r0, 8004fa2 <vTaskSuspend+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004f88:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004f8a:	4b28      	ldr	r3, [pc, #160]	; (800502c <vTaskSuspend+0xbc>)
 8004f8c:	2114      	movs	r1, #20
 8004f8e:	4341      	muls	r1, r0
 8004f90:	585b      	ldr	r3, [r3, r1]
 8004f92:	b933      	cbnz	r3, 8004fa2 <vTaskSuspend+0x32>
 8004f94:	4926      	ldr	r1, [pc, #152]	; (8005030 <vTaskSuspend+0xc0>)
 8004f96:	2201      	movs	r2, #1
 8004f98:	680b      	ldr	r3, [r1, #0]
 8004f9a:	4082      	lsls	r2, r0
 8004f9c:	ea23 0302 	bic.w	r3, r3, r2
 8004fa0:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004fa2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004fa4:	b11b      	cbz	r3, 8004fae <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fa6:	f104 0018 	add.w	r0, r4, #24
 8004faa:	f7ff f875 	bl	8004098 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8004fae:	4629      	mov	r1, r5
 8004fb0:	4820      	ldr	r0, [pc, #128]	; (8005034 <vTaskSuspend+0xc4>)
		if( xSchedulerRunning != pdFALSE )
 8004fb2:	4d21      	ldr	r5, [pc, #132]	; (8005038 <vTaskSuspend+0xc8>)
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8004fb4:	f7ff f84d 	bl	8004052 <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004fb8:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8004fbc:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004fbe:	bf04      	itt	eq
 8004fc0:	2300      	moveq	r3, #0
 8004fc2:	f884 3050 	strbeq.w	r3, [r4, #80]	; 0x50
		taskEXIT_CRITICAL();
 8004fc6:	f000 fa8f 	bl	80054e8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8004fca:	682a      	ldr	r2, [r5, #0]
 8004fcc:	b12a      	cbz	r2, 8004fda <vTaskSuspend+0x6a>
			taskENTER_CRITICAL();
 8004fce:	f000 fa69 	bl	80054a4 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
 8004fd2:	f7ff fd0f 	bl	80049f4 <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
 8004fd6:	f000 fa87 	bl	80054e8 <vPortExitCritical>
		if( pxTCB == pxCurrentTCB )
 8004fda:	6833      	ldr	r3, [r6, #0]
 8004fdc:	42a3      	cmp	r3, r4
 8004fde:	d115      	bne.n	800500c <vTaskSuspend+0x9c>
			if( xSchedulerRunning != pdFALSE )
 8004fe0:	682b      	ldr	r3, [r5, #0]
 8004fe2:	b1a3      	cbz	r3, 800500e <vTaskSuspend+0x9e>
				configASSERT( uxSchedulerSuspended == 0 );
 8004fe4:	4b15      	ldr	r3, [pc, #84]	; (800503c <vTaskSuspend+0xcc>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	b143      	cbz	r3, 8004ffc <vTaskSuspend+0x8c>
 8004fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fee:	f383 8811 	msr	BASEPRI, r3
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	e7fe      	b.n	8004ffa <vTaskSuspend+0x8a>
				portYIELD_WITHIN_API();
 8004ffc:	4b10      	ldr	r3, [pc, #64]	; (8005040 <vTaskSuspend+0xd0>)
 8004ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	f3bf 8f4f 	dsb	sy
 8005008:	f3bf 8f6f 	isb	sy
	}
 800500c:	bd70      	pop	{r4, r5, r6, pc}
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800500e:	4a09      	ldr	r2, [pc, #36]	; (8005034 <vTaskSuspend+0xc4>)
 8005010:	6811      	ldr	r1, [r2, #0]
 8005012:	4a0c      	ldr	r2, [pc, #48]	; (8005044 <vTaskSuspend+0xd4>)
 8005014:	6812      	ldr	r2, [r2, #0]
 8005016:	4291      	cmp	r1, r2
 8005018:	d101      	bne.n	800501e <vTaskSuspend+0xae>
					pxCurrentTCB = NULL;
 800501a:	6033      	str	r3, [r6, #0]
 800501c:	e7f6      	b.n	800500c <vTaskSuspend+0x9c>
	}
 800501e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vTaskSwitchContext();
 8005022:	f7ff bf6b 	b.w	8004efc <vTaskSwitchContext>
 8005026:	bf00      	nop
 8005028:	200000b0 	.word	0x200000b0
 800502c:	200000bc 	.word	0x200000bc
 8005030:	2000015c 	.word	0x2000015c
 8005034:	200001a8 	.word	0x200001a8
 8005038:	200001a4 	.word	0x200001a4
 800503c:	20000154 	.word	0x20000154
 8005040:	e000ed04 	.word	0xe000ed04
 8005044:	20000148 	.word	0x20000148

08005048 <vTaskPlaceOnEventList>:
{
 8005048:	b510      	push	{r4, lr}
 800504a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800504c:	b940      	cbnz	r0, 8005060 <vTaskPlaceOnEventList+0x18>
 800504e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	e7fe      	b.n	800505e <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005060:	4b05      	ldr	r3, [pc, #20]	; (8005078 <vTaskPlaceOnEventList+0x30>)
 8005062:	6819      	ldr	r1, [r3, #0]
 8005064:	3118      	adds	r1, #24
 8005066:	f7ff f800 	bl	800406a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800506a:	4620      	mov	r0, r4
 800506c:	2101      	movs	r1, #1
}
 800506e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005072:	f7ff bd11 	b.w	8004a98 <prvAddCurrentTaskToDelayedList>
 8005076:	bf00      	nop
 8005078:	200000b0 	.word	0x200000b0

0800507c <xTaskRemoveFromEventList>:
{
 800507c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800507e:	68c3      	ldr	r3, [r0, #12]
 8005080:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8005082:	b944      	cbnz	r4, 8005096 <xTaskRemoveFromEventList+0x1a>
 8005084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005088:	f383 8811 	msr	BASEPRI, r3
 800508c:	f3bf 8f6f 	isb	sy
 8005090:	f3bf 8f4f 	dsb	sy
 8005094:	e7fe      	b.n	8005094 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005096:	f104 0518 	add.w	r5, r4, #24
 800509a:	4628      	mov	r0, r5
 800509c:	f7fe fffc 	bl	8004098 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050a0:	4b11      	ldr	r3, [pc, #68]	; (80050e8 <xTaskRemoveFromEventList+0x6c>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	b9e3      	cbnz	r3, 80050e0 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80050a6:	1d25      	adds	r5, r4, #4
 80050a8:	4628      	mov	r0, r5
 80050aa:	f7fe fff5 	bl	8004098 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80050ae:	490f      	ldr	r1, [pc, #60]	; (80050ec <xTaskRemoveFromEventList+0x70>)
 80050b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80050b2:	6808      	ldr	r0, [r1, #0]
 80050b4:	2301      	movs	r3, #1
 80050b6:	4093      	lsls	r3, r2
 80050b8:	4303      	orrs	r3, r0
 80050ba:	600b      	str	r3, [r1, #0]
 80050bc:	4b0c      	ldr	r3, [pc, #48]	; (80050f0 <xTaskRemoveFromEventList+0x74>)
 80050be:	2014      	movs	r0, #20
 80050c0:	4629      	mov	r1, r5
 80050c2:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80050c6:	f7fe ffc4 	bl	8004052 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80050ca:	4b0a      	ldr	r3, [pc, #40]	; (80050f4 <xTaskRemoveFromEventList+0x78>)
 80050cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d2:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80050d4:	bf83      	ittte	hi
 80050d6:	4b08      	ldrhi	r3, [pc, #32]	; (80050f8 <xTaskRemoveFromEventList+0x7c>)
 80050d8:	2001      	movhi	r0, #1
 80050da:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 80050dc:	2000      	movls	r0, #0
}
 80050de:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80050e0:	4629      	mov	r1, r5
 80050e2:	4806      	ldr	r0, [pc, #24]	; (80050fc <xTaskRemoveFromEventList+0x80>)
 80050e4:	e7ef      	b.n	80050c6 <xTaskRemoveFromEventList+0x4a>
 80050e6:	bf00      	nop
 80050e8:	20000154 	.word	0x20000154
 80050ec:	2000015c 	.word	0x2000015c
 80050f0:	200000bc 	.word	0x200000bc
 80050f4:	200000b0 	.word	0x200000b0
 80050f8:	200001d4 	.word	0x200001d4
 80050fc:	20000190 	.word	0x20000190

08005100 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005100:	4b03      	ldr	r3, [pc, #12]	; (8005110 <vTaskInternalSetTimeOutState+0x10>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005106:	4b03      	ldr	r3, [pc, #12]	; (8005114 <vTaskInternalSetTimeOutState+0x14>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6043      	str	r3, [r0, #4]
}
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	2000018c 	.word	0x2000018c
 8005114:	200001d0 	.word	0x200001d0

08005118 <xTaskCheckForTimeOut>:
{
 8005118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511a:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800511c:	4605      	mov	r5, r0
 800511e:	b940      	cbnz	r0, 8005132 <xTaskCheckForTimeOut+0x1a>
 8005120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005124:	f383 8811 	msr	BASEPRI, r3
 8005128:	f3bf 8f6f 	isb	sy
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	e7fe      	b.n	8005130 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8005132:	b941      	cbnz	r1, 8005146 <xTaskCheckForTimeOut+0x2e>
 8005134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005138:	f383 8811 	msr	BASEPRI, r3
 800513c:	f3bf 8f6f 	isb	sy
 8005140:	f3bf 8f4f 	dsb	sy
 8005144:	e7fe      	b.n	8005144 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8005146:	f000 f9ad 	bl	80054a4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800514a:	4b0f      	ldr	r3, [pc, #60]	; (8005188 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800514c:	6868      	ldr	r0, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 800514e:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8005150:	6823      	ldr	r3, [r4, #0]
 8005152:	1c5e      	adds	r6, r3, #1
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005154:	eba1 0200 	sub.w	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 8005158:	d00d      	beq.n	8005176 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800515a:	4e0c      	ldr	r6, [pc, #48]	; (800518c <xTaskCheckForTimeOut+0x74>)
 800515c:	682f      	ldr	r7, [r5, #0]
 800515e:	6836      	ldr	r6, [r6, #0]
 8005160:	42b7      	cmp	r7, r6
 8005162:	d001      	beq.n	8005168 <xTaskCheckForTimeOut+0x50>
 8005164:	4288      	cmp	r0, r1
 8005166:	d90d      	bls.n	8005184 <xTaskCheckForTimeOut+0x6c>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005168:	4293      	cmp	r3, r2
 800516a:	d909      	bls.n	8005180 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800516c:	1a9b      	subs	r3, r3, r2
 800516e:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005170:	4628      	mov	r0, r5
 8005172:	f7ff ffc5 	bl	8005100 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8005176:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005178:	f000 f9b6 	bl	80054e8 <vPortExitCritical>
}
 800517c:	4620      	mov	r0, r4
 800517e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*pxTicksToWait = 0;
 8005180:	2300      	movs	r3, #0
 8005182:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8005184:	2401      	movs	r4, #1
 8005186:	e7f7      	b.n	8005178 <xTaskCheckForTimeOut+0x60>
 8005188:	200001d0 	.word	0x200001d0
 800518c:	2000018c 	.word	0x2000018c

08005190 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8005190:	4b01      	ldr	r3, [pc, #4]	; (8005198 <vTaskMissedYield+0x8>)
 8005192:	2201      	movs	r2, #1
 8005194:	601a      	str	r2, [r3, #0]
}
 8005196:	4770      	bx	lr
 8005198:	200001d4 	.word	0x200001d4

0800519c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800519c:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <xTaskGetSchedulerState+0x18>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	b133      	cbz	r3, 80051b0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051a2:	4b05      	ldr	r3, [pc, #20]	; (80051b8 <xTaskGetSchedulerState+0x1c>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80051a8:	bf0c      	ite	eq
 80051aa:	2002      	moveq	r0, #2
 80051ac:	2000      	movne	r0, #0
 80051ae:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80051b0:	2001      	movs	r0, #1
	}
 80051b2:	4770      	bx	lr
 80051b4:	200001a4 	.word	0x200001a4
 80051b8:	20000154 	.word	0x20000154

080051bc <xTaskPriorityInherit>:
	{
 80051bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 80051c0:	4604      	mov	r4, r0
 80051c2:	b358      	cbz	r0, 800521c <xTaskPriorityInherit+0x60>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80051c4:	4a23      	ldr	r2, [pc, #140]	; (8005254 <xTaskPriorityInherit+0x98>)
 80051c6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80051c8:	6811      	ldr	r1, [r2, #0]
 80051ca:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80051cc:	428b      	cmp	r3, r1
 80051ce:	4617      	mov	r7, r2
 80051d0:	d238      	bcs.n	8005244 <xTaskPriorityInherit+0x88>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80051d2:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80051d4:	4d20      	ldr	r5, [pc, #128]	; (8005258 <xTaskPriorityInherit+0x9c>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80051d6:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051d8:	bfa1      	itttt	ge
 80051da:	683a      	ldrge	r2, [r7, #0]
 80051dc:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 80051de:	f1c2 0207 	rsbge	r2, r2, #7
 80051e2:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80051e4:	2614      	movs	r6, #20
 80051e6:	6942      	ldr	r2, [r0, #20]
 80051e8:	fb06 5303 	mla	r3, r6, r3, r5
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d117      	bne.n	8005220 <xTaskPriorityInherit+0x64>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051f0:	f100 0804 	add.w	r8, r0, #4
 80051f4:	4640      	mov	r0, r8
 80051f6:	f7fe ff4f 	bl	8004098 <uxListRemove>
 80051fa:	4b18      	ldr	r3, [pc, #96]	; (800525c <xTaskPriorityInherit+0xa0>)
 80051fc:	b1b0      	cbz	r0, 800522c <xTaskPriorityInherit+0x70>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80051fe:	683a      	ldr	r2, [r7, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005200:	6819      	ldr	r1, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005202:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005204:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005206:	2401      	movs	r4, #1
 8005208:	fa04 f002 	lsl.w	r0, r4, r2
 800520c:	4308      	orrs	r0, r1
 800520e:	6018      	str	r0, [r3, #0]
 8005210:	2014      	movs	r0, #20
 8005212:	4641      	mov	r1, r8
 8005214:	fb00 5002 	mla	r0, r0, r2, r5
 8005218:	f7fe ff1b 	bl	8004052 <vListInsertEnd>
	BaseType_t xReturn = pdFALSE;
 800521c:	4620      	mov	r0, r4
		return xReturn;
 800521e:	e003      	b.n	8005228 <xTaskPriorityInherit+0x6c>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005224:	62c3      	str	r3, [r0, #44]	; 0x2c
				xReturn = pdTRUE;
 8005226:	2001      	movs	r0, #1
	}
 8005228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800522c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800522e:	4346      	muls	r6, r0
 8005230:	59aa      	ldr	r2, [r5, r6]
 8005232:	2a00      	cmp	r2, #0
 8005234:	d1e3      	bne.n	80051fe <xTaskPriorityInherit+0x42>
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	2101      	movs	r1, #1
 800523a:	4081      	lsls	r1, r0
 800523c:	ea22 0201 	bic.w	r2, r2, r1
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	e7dc      	b.n	80051fe <xTaskPriorityInherit+0x42>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005244:	6813      	ldr	r3, [r2, #0]
 8005246:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8005248:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800524a:	42a0      	cmp	r0, r4
 800524c:	bf2c      	ite	cs
 800524e:	2000      	movcs	r0, #0
 8005250:	2001      	movcc	r0, #1
 8005252:	e7e9      	b.n	8005228 <xTaskPriorityInherit+0x6c>
 8005254:	200000b0 	.word	0x200000b0
 8005258:	200000bc 	.word	0x200000bc
 800525c:	2000015c 	.word	0x2000015c

08005260 <xTaskPriorityDisinherit>:
	{
 8005260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8005262:	4604      	mov	r4, r0
 8005264:	b908      	cbnz	r0, 800526a <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8005266:	2000      	movs	r0, #0
	}
 8005268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800526a:	4b22      	ldr	r3, [pc, #136]	; (80052f4 <xTaskPriorityDisinherit+0x94>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4283      	cmp	r3, r0
 8005270:	d008      	beq.n	8005284 <xTaskPriorityDisinherit+0x24>
 8005272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005276:	f383 8811 	msr	BASEPRI, r3
 800527a:	f3bf 8f6f 	isb	sy
 800527e:	f3bf 8f4f 	dsb	sy
 8005282:	e7fe      	b.n	8005282 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8005284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005286:	b943      	cbnz	r3, 800529a <xTaskPriorityDisinherit+0x3a>
 8005288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528c:	f383 8811 	msr	BASEPRI, r3
 8005290:	f3bf 8f6f 	isb	sy
 8005294:	f3bf 8f4f 	dsb	sy
 8005298:	e7fe      	b.n	8005298 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800529a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800529c:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 800529e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80052a0:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 80052a2:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80052a4:	d0df      	beq.n	8005266 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1dd      	bne.n	8005266 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052aa:	1d05      	adds	r5, r0, #4
 80052ac:	4628      	mov	r0, r5
 80052ae:	f7fe fef3 	bl	8004098 <uxListRemove>
 80052b2:	4e11      	ldr	r6, [pc, #68]	; (80052f8 <xTaskPriorityDisinherit+0x98>)
 80052b4:	4a11      	ldr	r2, [pc, #68]	; (80052fc <xTaskPriorityDisinherit+0x9c>)
 80052b6:	b950      	cbnz	r0, 80052ce <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80052b8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80052ba:	2114      	movs	r1, #20
 80052bc:	4379      	muls	r1, r7
 80052be:	5873      	ldr	r3, [r6, r1]
 80052c0:	b92b      	cbnz	r3, 80052ce <xTaskPriorityDisinherit+0x6e>
 80052c2:	6813      	ldr	r3, [r2, #0]
 80052c4:	2001      	movs	r0, #1
 80052c6:	40b8      	lsls	r0, r7
 80052c8:	ea23 0300 	bic.w	r3, r3, r0
 80052cc:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80052ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80052d0:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052d2:	f1c3 0107 	rsb	r1, r3, #7
 80052d6:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80052d8:	6811      	ldr	r1, [r2, #0]
 80052da:	2401      	movs	r4, #1
 80052dc:	fa04 f003 	lsl.w	r0, r4, r3
 80052e0:	4308      	orrs	r0, r1
 80052e2:	6010      	str	r0, [r2, #0]
 80052e4:	2014      	movs	r0, #20
 80052e6:	fb00 6003 	mla	r0, r0, r3, r6
 80052ea:	4629      	mov	r1, r5
 80052ec:	f7fe feb1 	bl	8004052 <vListInsertEnd>
					xReturn = pdTRUE;
 80052f0:	4620      	mov	r0, r4
		return xReturn;
 80052f2:	e7b9      	b.n	8005268 <xTaskPriorityDisinherit+0x8>
 80052f4:	200000b0 	.word	0x200000b0
 80052f8:	200000bc 	.word	0x200000bc
 80052fc:	2000015c 	.word	0x2000015c

08005300 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8005300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8005302:	4604      	mov	r4, r0
 8005304:	2800      	cmp	r0, #0
 8005306:	d04e      	beq.n	80053a6 <vTaskPriorityDisinheritAfterTimeout+0xa6>
			configASSERT( pxTCB->uxMutexesHeld );
 8005308:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800530a:	b942      	cbnz	r2, 800531e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800530c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005310:	f383 8811 	msr	BASEPRI, r3
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	e7fe      	b.n	800531c <vTaskPriorityDisinheritAfterTimeout+0x1c>
 800531e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005320:	4299      	cmp	r1, r3
 8005322:	bf38      	it	cc
 8005324:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005326:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005328:	428b      	cmp	r3, r1
 800532a:	d03c      	beq.n	80053a6 <vTaskPriorityDisinheritAfterTimeout+0xa6>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800532c:	2a01      	cmp	r2, #1
 800532e:	d13a      	bne.n	80053a6 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					configASSERT( pxTCB != pxCurrentTCB );
 8005330:	4a1d      	ldr	r2, [pc, #116]	; (80053a8 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 8005332:	6812      	ldr	r2, [r2, #0]
 8005334:	4282      	cmp	r2, r0
 8005336:	d108      	bne.n	800534a <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8005338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533c:	f383 8811 	msr	BASEPRI, r3
 8005340:	f3bf 8f6f 	isb	sy
 8005344:	f3bf 8f4f 	dsb	sy
 8005348:	e7fe      	b.n	8005348 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800534a:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800534c:	4d17      	ldr	r5, [pc, #92]	; (80053ac <vTaskPriorityDisinheritAfterTimeout+0xac>)
					pxTCB->uxPriority = uxPriorityToUse;
 800534e:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005350:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005352:	f04f 0614 	mov.w	r6, #20
 8005356:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005358:	bfa8      	it	ge
 800535a:	f1c1 0107 	rsbge	r1, r1, #7
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800535e:	fb06 5303 	mla	r3, r6, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005362:	bfa8      	it	ge
 8005364:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005366:	429a      	cmp	r2, r3
 8005368:	d11d      	bne.n	80053a6 <vTaskPriorityDisinheritAfterTimeout+0xa6>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800536a:	1d07      	adds	r7, r0, #4
 800536c:	4638      	mov	r0, r7
 800536e:	f7fe fe93 	bl	8004098 <uxListRemove>
 8005372:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005374:	4c0e      	ldr	r4, [pc, #56]	; (80053b0 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 8005376:	b948      	cbnz	r0, 800538c <vTaskPriorityDisinheritAfterTimeout+0x8c>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005378:	4356      	muls	r6, r2
 800537a:	2301      	movs	r3, #1
 800537c:	59a8      	ldr	r0, [r5, r6]
 800537e:	fa03 f102 	lsl.w	r1, r3, r2
 8005382:	b918      	cbnz	r0, 800538c <vTaskPriorityDisinheritAfterTimeout+0x8c>
 8005384:	6823      	ldr	r3, [r4, #0]
 8005386:	ea23 0301 	bic.w	r3, r3, r1
 800538a:	6023      	str	r3, [r4, #0]
						prvAddTaskToReadyList( pxTCB );
 800538c:	6821      	ldr	r1, [r4, #0]
 800538e:	2301      	movs	r3, #1
 8005390:	4093      	lsls	r3, r2
 8005392:	430b      	orrs	r3, r1
 8005394:	2014      	movs	r0, #20
 8005396:	6023      	str	r3, [r4, #0]
 8005398:	4639      	mov	r1, r7
 800539a:	fb00 5002 	mla	r0, r0, r2, r5
	}
 800539e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 80053a2:	f7fe be56 	b.w	8004052 <vListInsertEnd>
	}
 80053a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053a8:	200000b0 	.word	0x200000b0
 80053ac:	200000bc 	.word	0x200000bc
 80053b0:	2000015c 	.word	0x2000015c

080053b4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80053b4:	4b04      	ldr	r3, [pc, #16]	; (80053c8 <pvTaskIncrementMutexHeldCount+0x14>)
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	b11a      	cbz	r2, 80053c2 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80053ba:	6819      	ldr	r1, [r3, #0]
 80053bc:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 80053be:	3201      	adds	r2, #1
 80053c0:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 80053c2:	6818      	ldr	r0, [r3, #0]
	}
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	200000b0 	.word	0x200000b0

080053cc <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80053cc:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80053ce:	2300      	movs	r3, #0
 80053d0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80053d2:	4b0d      	ldr	r3, [pc, #52]	; (8005408 <prvTaskExitError+0x3c>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3301      	adds	r3, #1
 80053d8:	d008      	beq.n	80053ec <prvTaskExitError+0x20>
 80053da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053de:	f383 8811 	msr	BASEPRI, r3
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	f3bf 8f4f 	dsb	sy
 80053ea:	e7fe      	b.n	80053ea <prvTaskExitError+0x1e>
 80053ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f0:	f383 8811 	msr	BASEPRI, r3
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80053fc:	9b01      	ldr	r3, [sp, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0fc      	beq.n	80053fc <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005402:	b002      	add	sp, #8
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	20000008 	.word	0x20000008

0800540c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800540c:	4808      	ldr	r0, [pc, #32]	; (8005430 <prvPortStartFirstTask+0x24>)
 800540e:	6800      	ldr	r0, [r0, #0]
 8005410:	6800      	ldr	r0, [r0, #0]
 8005412:	f380 8808 	msr	MSP, r0
 8005416:	f04f 0000 	mov.w	r0, #0
 800541a:	f380 8814 	msr	CONTROL, r0
 800541e:	b662      	cpsie	i
 8005420:	b661      	cpsie	f
 8005422:	f3bf 8f4f 	dsb	sy
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	df00      	svc	0
 800542c:	bf00      	nop
 800542e:	0000      	.short	0x0000
 8005430:	e000ed08 	.word	0xe000ed08

08005434 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005434:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005444 <vPortEnableVFP+0x10>
 8005438:	6801      	ldr	r1, [r0, #0]
 800543a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800543e:	6001      	str	r1, [r0, #0]
 8005440:	4770      	bx	lr
 8005442:	0000      	.short	0x0000
 8005444:	e000ed88 	.word	0xe000ed88

08005448 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005448:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800544c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005450:	4b07      	ldr	r3, [pc, #28]	; (8005470 <pxPortInitialiseStack+0x28>)
 8005452:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005456:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800545a:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800545e:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005462:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005466:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800546a:	3844      	subs	r0, #68	; 0x44
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	080053cd 	.word	0x080053cd
	...

08005480 <SVC_Handler>:
	__asm volatile (
 8005480:	4b07      	ldr	r3, [pc, #28]	; (80054a0 <pxCurrentTCBConst2>)
 8005482:	6819      	ldr	r1, [r3, #0]
 8005484:	6808      	ldr	r0, [r1, #0]
 8005486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800548a:	f380 8809 	msr	PSP, r0
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	f04f 0000 	mov.w	r0, #0
 8005496:	f380 8811 	msr	BASEPRI, r0
 800549a:	4770      	bx	lr
 800549c:	f3af 8000 	nop.w

080054a0 <pxCurrentTCBConst2>:
 80054a0:	200000b0 	.word	0x200000b0

080054a4 <vPortEnterCritical>:
 80054a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80054b4:	4a0a      	ldr	r2, [pc, #40]	; (80054e0 <vPortEnterCritical+0x3c>)
 80054b6:	6813      	ldr	r3, [r2, #0]
 80054b8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80054ba:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80054bc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80054be:	d10d      	bne.n	80054dc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80054c0:	4b08      	ldr	r3, [pc, #32]	; (80054e4 <vPortEnterCritical+0x40>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80054c8:	d008      	beq.n	80054dc <vPortEnterCritical+0x38>
 80054ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	e7fe      	b.n	80054da <vPortEnterCritical+0x36>
}
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	20000008 	.word	0x20000008
 80054e4:	e000ed04 	.word	0xe000ed04

080054e8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80054e8:	4a08      	ldr	r2, [pc, #32]	; (800550c <vPortExitCritical+0x24>)
 80054ea:	6813      	ldr	r3, [r2, #0]
 80054ec:	b943      	cbnz	r3, 8005500 <vPortExitCritical+0x18>
 80054ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	e7fe      	b.n	80054fe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8005500:	3b01      	subs	r3, #1
 8005502:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005504:	b90b      	cbnz	r3, 800550a <vPortExitCritical+0x22>
	__asm volatile
 8005506:	f383 8811 	msr	BASEPRI, r3
}
 800550a:	4770      	bx	lr
 800550c:	20000008 	.word	0x20000008

08005510 <PendSV_Handler>:
	__asm volatile
 8005510:	f3ef 8009 	mrs	r0, PSP
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	4b15      	ldr	r3, [pc, #84]	; (8005570 <pxCurrentTCBConst>)
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	f01e 0f10 	tst.w	lr, #16
 8005520:	bf08      	it	eq
 8005522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800552a:	6010      	str	r0, [r2, #0]
 800552c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005530:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005534:	f380 8811 	msr	BASEPRI, r0
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f7ff fcdc 	bl	8004efc <vTaskSwitchContext>
 8005544:	f04f 0000 	mov.w	r0, #0
 8005548:	f380 8811 	msr	BASEPRI, r0
 800554c:	bc09      	pop	{r0, r3}
 800554e:	6819      	ldr	r1, [r3, #0]
 8005550:	6808      	ldr	r0, [r1, #0]
 8005552:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005556:	f01e 0f10 	tst.w	lr, #16
 800555a:	bf08      	it	eq
 800555c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005560:	f380 8809 	msr	PSP, r0
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	f3af 8000 	nop.w

08005570 <pxCurrentTCBConst>:
 8005570:	200000b0 	.word	0x200000b0

08005574 <xPortSysTickHandler>:
{
 8005574:	b508      	push	{r3, lr}
	__asm volatile
 8005576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557a:	f383 8811 	msr	BASEPRI, r3
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8005586:	f7ff fbb1 	bl	8004cec <xTaskIncrementTick>
 800558a:	b118      	cbz	r0, 8005594 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800558c:	4b03      	ldr	r3, [pc, #12]	; (800559c <xPortSysTickHandler+0x28>)
 800558e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005592:	601a      	str	r2, [r3, #0]
	__asm volatile
 8005594:	2300      	movs	r3, #0
 8005596:	f383 8811 	msr	BASEPRI, r3
}
 800559a:	bd08      	pop	{r3, pc}
 800559c:	e000ed04 	.word	0xe000ed04

080055a0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80055a0:	4a08      	ldr	r2, [pc, #32]	; (80055c4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80055a2:	4909      	ldr	r1, [pc, #36]	; (80055c8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80055a4:	2300      	movs	r3, #0
 80055a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80055a8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80055aa:	4b08      	ldr	r3, [pc, #32]	; (80055cc <vPortSetupTimerInterrupt+0x2c>)
 80055ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80055b6:	4906      	ldr	r1, [pc, #24]	; (80055d0 <vPortSetupTimerInterrupt+0x30>)
 80055b8:	3b01      	subs	r3, #1
 80055ba:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80055bc:	2307      	movs	r3, #7
 80055be:	6013      	str	r3, [r2, #0]
}
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	e000e010 	.word	0xe000e010
 80055c8:	e000e018 	.word	0xe000e018
 80055cc:	20000028 	.word	0x20000028
 80055d0:	e000e014 	.word	0xe000e014

080055d4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80055d4:	4b39      	ldr	r3, [pc, #228]	; (80056bc <xPortStartScheduler+0xe8>)
 80055d6:	4a3a      	ldr	r2, [pc, #232]	; (80056c0 <xPortStartScheduler+0xec>)
{
 80055d8:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80055da:	6819      	ldr	r1, [r3, #0]
 80055dc:	4291      	cmp	r1, r2
 80055de:	d108      	bne.n	80055f2 <xPortStartScheduler+0x1e>
	__asm volatile
 80055e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	e7fe      	b.n	80055f0 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	4b33      	ldr	r3, [pc, #204]	; (80056c4 <xPortStartScheduler+0xf0>)
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d108      	bne.n	800560c <xPortStartScheduler+0x38>
 80055fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	e7fe      	b.n	800560a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800560c:	4b2e      	ldr	r3, [pc, #184]	; (80056c8 <xPortStartScheduler+0xf4>)
 800560e:	781a      	ldrb	r2, [r3, #0]
 8005610:	b2d2      	uxtb	r2, r2
 8005612:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005614:	22ff      	movs	r2, #255	; 0xff
 8005616:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005618:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800561a:	4a2c      	ldr	r2, [pc, #176]	; (80056cc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800561c:	b2db      	uxtb	r3, r3
 800561e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005622:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005626:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800562a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800562c:	4b28      	ldr	r3, [pc, #160]	; (80056d0 <xPortStartScheduler+0xfc>)
 800562e:	2207      	movs	r2, #7
 8005630:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005632:	2100      	movs	r1, #0
 8005634:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8005638:	0600      	lsls	r0, r0, #24
 800563a:	f102 34ff 	add.w	r4, r2, #4294967295
 800563e:	d40d      	bmi.n	800565c <xPortStartScheduler+0x88>
 8005640:	b101      	cbz	r1, 8005644 <xPortStartScheduler+0x70>
 8005642:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	2a03      	cmp	r2, #3
 8005648:	d011      	beq.n	800566e <xPortStartScheduler+0x9a>
 800564a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564e:	f383 8811 	msr	BASEPRI, r3
 8005652:	f3bf 8f6f 	isb	sy
 8005656:	f3bf 8f4f 	dsb	sy
 800565a:	e7fe      	b.n	800565a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800565c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8005660:	0052      	lsls	r2, r2, #1
 8005662:	b2d2      	uxtb	r2, r2
 8005664:	f88d 2003 	strb.w	r2, [sp, #3]
 8005668:	2101      	movs	r1, #1
 800566a:	4622      	mov	r2, r4
 800566c:	e7e2      	b.n	8005634 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800566e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005670:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8005674:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005676:	9b01      	ldr	r3, [sp, #4]
 8005678:	4a13      	ldr	r2, [pc, #76]	; (80056c8 <xPortStartScheduler+0xf4>)
 800567a:	b2db      	uxtb	r3, r3
 800567c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800567e:	4b15      	ldr	r3, [pc, #84]	; (80056d4 <xPortStartScheduler+0x100>)
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8005686:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800568e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8005690:	f7ff ff86 	bl	80055a0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8005694:	4b10      	ldr	r3, [pc, #64]	; (80056d8 <xPortStartScheduler+0x104>)
 8005696:	2400      	movs	r4, #0
 8005698:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800569a:	f7ff fecb 	bl	8005434 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800569e:	4a0f      	ldr	r2, [pc, #60]	; (80056dc <xPortStartScheduler+0x108>)
 80056a0:	6813      	ldr	r3, [r2, #0]
 80056a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80056a6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80056a8:	f7ff feb0 	bl	800540c <prvPortStartFirstTask>
	vTaskSwitchContext();
 80056ac:	f7ff fc26 	bl	8004efc <vTaskSwitchContext>
	prvTaskExitError();
 80056b0:	f7ff fe8c 	bl	80053cc <prvTaskExitError>
}
 80056b4:	4620      	mov	r0, r4
 80056b6:	b002      	add	sp, #8
 80056b8:	bd10      	pop	{r4, pc}
 80056ba:	bf00      	nop
 80056bc:	e000ed00 	.word	0xe000ed00
 80056c0:	410fc271 	.word	0x410fc271
 80056c4:	410fc270 	.word	0x410fc270
 80056c8:	e000e400 	.word	0xe000e400
 80056cc:	200001d8 	.word	0x200001d8
 80056d0:	200001dc 	.word	0x200001dc
 80056d4:	e000ed20 	.word	0xe000ed20
 80056d8:	20000008 	.word	0x20000008
 80056dc:	e000ef34 	.word	0xe000ef34

080056e0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80056e0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80056e4:	2b0f      	cmp	r3, #15
 80056e6:	d90e      	bls.n	8005706 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80056e8:	4a10      	ldr	r2, [pc, #64]	; (800572c <vPortValidateInterruptPriority+0x4c>)
 80056ea:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80056ec:	4a10      	ldr	r2, [pc, #64]	; (8005730 <vPortValidateInterruptPriority+0x50>)
 80056ee:	7812      	ldrb	r2, [r2, #0]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d908      	bls.n	8005706 <vPortValidateInterruptPriority+0x26>
 80056f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f8:	f383 8811 	msr	BASEPRI, r3
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	e7fe      	b.n	8005704 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005706:	4b0b      	ldr	r3, [pc, #44]	; (8005734 <vPortValidateInterruptPriority+0x54>)
 8005708:	4a0b      	ldr	r2, [pc, #44]	; (8005738 <vPortValidateInterruptPriority+0x58>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6812      	ldr	r2, [r2, #0]
 800570e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005712:	4293      	cmp	r3, r2
 8005714:	d908      	bls.n	8005728 <vPortValidateInterruptPriority+0x48>
 8005716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571a:	f383 8811 	msr	BASEPRI, r3
 800571e:	f3bf 8f6f 	isb	sy
 8005722:	f3bf 8f4f 	dsb	sy
 8005726:	e7fe      	b.n	8005726 <vPortValidateInterruptPriority+0x46>
	}
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	e000e3f0 	.word	0xe000e3f0
 8005730:	200001d8 	.word	0x200001d8
 8005734:	e000ed0c 	.word	0xe000ed0c
 8005738:	200001dc 	.word	0x200001dc

0800573c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800573c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800573e:	4b0f      	ldr	r3, [pc, #60]	; (800577c <prvInsertBlockIntoFreeList+0x40>)
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	4282      	cmp	r2, r0
 8005744:	d318      	bcc.n	8005778 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005746:	685c      	ldr	r4, [r3, #4]
 8005748:	1919      	adds	r1, r3, r4
 800574a:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800574c:	bf01      	itttt	eq
 800574e:	6841      	ldreq	r1, [r0, #4]
 8005750:	4618      	moveq	r0, r3
 8005752:	1909      	addeq	r1, r1, r4
 8005754:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005756:	6844      	ldr	r4, [r0, #4]
 8005758:	1901      	adds	r1, r0, r4
 800575a:	428a      	cmp	r2, r1
 800575c:	d107      	bne.n	800576e <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800575e:	4908      	ldr	r1, [pc, #32]	; (8005780 <prvInsertBlockIntoFreeList+0x44>)
 8005760:	6809      	ldr	r1, [r1, #0]
 8005762:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005764:	bf1f      	itttt	ne
 8005766:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005768:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800576a:	1909      	addne	r1, r1, r4
 800576c:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800576e:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005770:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005772:	bf18      	it	ne
 8005774:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005776:	bd10      	pop	{r4, pc}
 8005778:	4613      	mov	r3, r2
 800577a:	e7e1      	b.n	8005740 <prvInsertBlockIntoFreeList+0x4>
 800577c:	20003df0 	.word	0x20003df0
 8005780:	200001e0 	.word	0x200001e0

08005784 <pvPortMalloc>:
{
 8005784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005788:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800578a:	f7ff faa7 	bl	8004cdc <vTaskSuspendAll>
		if( pxEnd == NULL )
 800578e:	493d      	ldr	r1, [pc, #244]	; (8005884 <pvPortMalloc+0x100>)
 8005790:	4d3d      	ldr	r5, [pc, #244]	; (8005888 <pvPortMalloc+0x104>)
 8005792:	680b      	ldr	r3, [r1, #0]
 8005794:	b9fb      	cbnz	r3, 80057d6 <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 8005796:	4a3d      	ldr	r2, [pc, #244]	; (800588c <pvPortMalloc+0x108>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005798:	0756      	lsls	r6, r2, #29
 800579a:	f502 5370 	add.w	r3, r2, #15360	; 0x3c00
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800579e:	bf1d      	ittte	ne
 80057a0:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057a2:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80057a6:	1a9b      	subne	r3, r3, r2
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80057a8:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80057ac:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80057ae:	4e38      	ldr	r6, [pc, #224]	; (8005890 <pvPortMalloc+0x10c>)
	uxAddress -= xHeapStructSize;
 80057b0:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057b2:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 80057b6:	2000      	movs	r0, #0
 80057b8:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80057ba:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 80057bc:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80057c0:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 80057c2:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80057c4:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057c8:	4b32      	ldr	r3, [pc, #200]	; (8005894 <pvPortMalloc+0x110>)
 80057ca:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057cc:	4b32      	ldr	r3, [pc, #200]	; (8005898 <pvPortMalloc+0x114>)
 80057ce:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80057d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80057d4:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057d6:	682f      	ldr	r7, [r5, #0]
 80057d8:	4227      	tst	r7, r4
 80057da:	d14e      	bne.n	800587a <pvPortMalloc+0xf6>
			if( xWantedSize > 0 )
 80057dc:	2c00      	cmp	r4, #0
 80057de:	d03f      	beq.n	8005860 <pvPortMalloc+0xdc>
				xWantedSize += xHeapStructSize;
 80057e0:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057e4:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80057e6:	bf1c      	itt	ne
 80057e8:	f023 0307 	bicne.w	r3, r3, #7
 80057ec:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d043      	beq.n	800587a <pvPortMalloc+0xf6>
 80057f2:	4a29      	ldr	r2, [pc, #164]	; (8005898 <pvPortMalloc+0x114>)
 80057f4:	6816      	ldr	r6, [r2, #0]
 80057f6:	429e      	cmp	r6, r3
 80057f8:	4690      	mov	r8, r2
 80057fa:	d33e      	bcc.n	800587a <pvPortMalloc+0xf6>
				pxBlock = xStart.pxNextFreeBlock;
 80057fc:	4a24      	ldr	r2, [pc, #144]	; (8005890 <pvPortMalloc+0x10c>)
 80057fe:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005800:	6868      	ldr	r0, [r5, #4]
 8005802:	4298      	cmp	r0, r3
 8005804:	d201      	bcs.n	800580a <pvPortMalloc+0x86>
 8005806:	682c      	ldr	r4, [r5, #0]
 8005808:	b9a4      	cbnz	r4, 8005834 <pvPortMalloc+0xb0>
				if( pxBlock != pxEnd )
 800580a:	6809      	ldr	r1, [r1, #0]
 800580c:	42a9      	cmp	r1, r5
 800580e:	d034      	beq.n	800587a <pvPortMalloc+0xf6>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005810:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005812:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005814:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005816:	1ac2      	subs	r2, r0, r3
 8005818:	2a10      	cmp	r2, #16
 800581a:	d912      	bls.n	8005842 <pvPortMalloc+0xbe>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800581c:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800581e:	0741      	lsls	r1, r0, #29
 8005820:	d00b      	beq.n	800583a <pvPortMalloc+0xb6>
 8005822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	e7fe      	b.n	8005832 <pvPortMalloc+0xae>
 8005834:	462a      	mov	r2, r5
 8005836:	4625      	mov	r5, r4
 8005838:	e7e2      	b.n	8005800 <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800583a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800583c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800583e:	f7ff ff7d 	bl	800573c <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005842:	4914      	ldr	r1, [pc, #80]	; (8005894 <pvPortMalloc+0x110>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005844:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005846:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005848:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800584a:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800584c:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800584e:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005852:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005856:	bf38      	it	cc
 8005858:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800585a:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800585c:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800585e:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8005860:	f7ff fad6 	bl	8004e10 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005864:	0763      	lsls	r3, r4, #29
 8005866:	d00a      	beq.n	800587e <pvPortMalloc+0xfa>
 8005868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586c:	f383 8811 	msr	BASEPRI, r3
 8005870:	f3bf 8f6f 	isb	sy
 8005874:	f3bf 8f4f 	dsb	sy
 8005878:	e7fe      	b.n	8005878 <pvPortMalloc+0xf4>
void *pvReturn = NULL;
 800587a:	2400      	movs	r4, #0
 800587c:	e7f0      	b.n	8005860 <pvPortMalloc+0xdc>
}
 800587e:	4620      	mov	r0, r4
 8005880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005884:	200001e0 	.word	0x200001e0
 8005888:	20003de4 	.word	0x20003de4
 800588c:	200001e4 	.word	0x200001e4
 8005890:	20003df0 	.word	0x20003df0
 8005894:	20003dec 	.word	0x20003dec
 8005898:	20003de8 	.word	0x20003de8

0800589c <vPortFree>:
{
 800589c:	b510      	push	{r4, lr}
	if( pv != NULL )
 800589e:	4604      	mov	r4, r0
 80058a0:	b370      	cbz	r0, 8005900 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80058a2:	4a18      	ldr	r2, [pc, #96]	; (8005904 <vPortFree+0x68>)
 80058a4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80058a8:	6812      	ldr	r2, [r2, #0]
 80058aa:	4213      	tst	r3, r2
 80058ac:	d108      	bne.n	80058c0 <vPortFree+0x24>
 80058ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b2:	f383 8811 	msr	BASEPRI, r3
 80058b6:	f3bf 8f6f 	isb	sy
 80058ba:	f3bf 8f4f 	dsb	sy
 80058be:	e7fe      	b.n	80058be <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80058c0:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80058c4:	b141      	cbz	r1, 80058d8 <vPortFree+0x3c>
 80058c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ca:	f383 8811 	msr	BASEPRI, r3
 80058ce:	f3bf 8f6f 	isb	sy
 80058d2:	f3bf 8f4f 	dsb	sy
 80058d6:	e7fe      	b.n	80058d6 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80058d8:	ea23 0302 	bic.w	r3, r3, r2
 80058dc:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80058e0:	f7ff f9fc 	bl	8004cdc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80058e4:	4a08      	ldr	r2, [pc, #32]	; (8005908 <vPortFree+0x6c>)
 80058e6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80058ea:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80058ec:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80058f0:	440b      	add	r3, r1
 80058f2:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80058f4:	f7ff ff22 	bl	800573c <prvInsertBlockIntoFreeList>
}
 80058f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80058fc:	f7ff ba88 	b.w	8004e10 <xTaskResumeAll>
}
 8005900:	bd10      	pop	{r4, pc}
 8005902:	bf00      	nop
 8005904:	20003de4 	.word	0x20003de4
 8005908:	20003de8 	.word	0x20003de8

0800590c <Calculate_FreqMax>:


		return max;
}
float Calculate_FreqMax(float *data, int freqSettingValue, int8_t freq_index)
{
 800590c:	b082      	sub	sp, #8
	if(freqSettingValue != 0)
 800590e:	b1f9      	cbz	r1, 8005950 <Calculate_FreqMax+0x44>
	{
		volatile float temp = 0;
 8005910:	2300      	movs	r3, #0
			if(freqSettingValue < 25)
 8005912:	2918      	cmp	r1, #24
		volatile float temp = 0;
 8005914:	9301      	str	r3, [sp, #4]
			if(freqSettingValue < 25)
 8005916:	dd10      	ble.n	800593a <Calculate_FreqMax+0x2e>
 8005918:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800591c:	231a      	movs	r3, #26
					}
			}
			else
			{

				for(int i = freqSettingValue; i<freqSettingValue + 25; i++)
 800591e:	3b01      	subs	r3, #1
 8005920:	d011      	beq.n	8005946 <Calculate_FreqMax+0x3a>
					{

						if(data[i] > temp)
 8005922:	ecf0 7a01 	vldmia	r0!, {s15}
 8005926:	ed9d 7a01 	vldr	s14, [sp, #4]
 800592a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800592e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
						{
							temp = data[i];
 8005932:	bfc8      	it	gt
 8005934:	edcd 7a01 	vstrgt	s15, [sp, #4]
 8005938:	e7f1      	b.n	800591e <Calculate_FreqMax+0x12>
				for(int i = freqSettingValue- 25; i<freqSettingValue + 25; i++)
 800593a:	3919      	subs	r1, #25
 800593c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8005940:	2333      	movs	r3, #51	; 0x33
 8005942:	3b01      	subs	r3, #1
 8005944:	d106      	bne.n	8005954 <Calculate_FreqMax+0x48>
						}
					}
			}
		statistic_value.Statistic_FreqPeak[freq_index] = temp;
 8005946:	4b09      	ldr	r3, [pc, #36]	; (800596c <Calculate_FreqMax+0x60>)
 8005948:	9901      	ldr	r1, [sp, #4]
 800594a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800594e:	61d1      	str	r1, [r2, #28]
	}


}
 8005950:	b002      	add	sp, #8
 8005952:	4770      	bx	lr
						if(data[i] > temp)
 8005954:	ecf0 7a01 	vldmia	r0!, {s15}
 8005958:	ed9d 7a01 	vldr	s14, [sp, #4]
 800595c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
							temp = data[i];
 8005964:	bfc8      	it	gt
 8005966:	edcd 7a01 	vstrgt	s15, [sp, #4]
 800596a:	e7ea      	b.n	8005942 <Calculate_FreqMax+0x36>
 800596c:	200040b0 	.word	0x200040b0

08005970 <delay_init>:
//初始化延遲函式
//SYSTICK的時鐘固定為HCLK時鐘的1/8
//SYSCLK:系統時鐘
void delay_init(uint8_t SYSCLK)
{
	SysTick->CTRL&=0xfffffffb;//bit2清空,選擇外部時鐘  HCLK/8
 8005970:	4a07      	ldr	r2, [pc, #28]	; (8005990 <delay_init+0x20>)
 8005972:	6813      	ldr	r3, [r2, #0]
 8005974:	f023 0304 	bic.w	r3, r3, #4
 8005978:	6013      	str	r3, [r2, #0]
	fac_us=SYSCLK/8;
 800597a:	4b06      	ldr	r3, [pc, #24]	; (8005994 <delay_init+0x24>)
 800597c:	08c0      	lsrs	r0, r0, #3
 800597e:	7018      	strb	r0, [r3, #0]
	fac_ms=(uint16_t)fac_us*1000;
 8005980:	ebc0 1340 	rsb	r3, r0, r0, lsl #5
 8005984:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005988:	4b03      	ldr	r3, [pc, #12]	; (8005998 <delay_init+0x28>)
 800598a:	00c0      	lsls	r0, r0, #3
 800598c:	8018      	strh	r0, [r3, #0]
}
 800598e:	4770      	bx	lr
 8005990:	e000e010 	.word	0xe000e010
 8005994:	20003dfa 	.word	0x20003dfa
 8005998:	20003df8 	.word	0x20003df8

0800599c <delay_ms>:

void delay_ms(uint16_t nms)
{
	uint32_t temp;
	SysTick->LOAD=(uint32_t)nms*fac_ms;//時間載入(SysTick->LOAD為24bit)
 800599c:	4b09      	ldr	r3, [pc, #36]	; (80059c4 <delay_ms+0x28>)
 800599e:	881b      	ldrh	r3, [r3, #0]
 80059a0:	4358      	muls	r0, r3
 80059a2:	4b09      	ldr	r3, [pc, #36]	; (80059c8 <delay_ms+0x2c>)
	SysTick->VAL =0x00;           //清空計數器
 80059a4:	2200      	movs	r2, #0
	SysTick->LOAD=(uint32_t)nms*fac_ms;//時間載入(SysTick->LOAD為24bit)
 80059a6:	6058      	str	r0, [r3, #4]
	SysTick->VAL =0x00;           //清空計數器
 80059a8:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;          //開始倒數
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	f042 0201 	orr.w	r2, r2, #1
 80059b0:	601a      	str	r2, [r3, #0]
	do
	{
		temp=SysTick->CTRL;
 80059b2:	681a      	ldr	r2, [r3, #0]
	}
	while(temp&0x01&&!(temp&(1<<16)));//等待時間到達
 80059b4:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
 80059b8:	2a01      	cmp	r2, #1
 80059ba:	d0fa      	beq.n	80059b2 <delay_ms+0x16>
	SysTick->CTRL=0x00;       //關閉計數器
 80059bc:	2200      	movs	r2, #0
 80059be:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00;       //清空計數器
 80059c0:	609a      	str	r2, [r3, #8]
}
 80059c2:	4770      	bx	lr
 80059c4:	20003df8 	.word	0x20003df8
 80059c8:	e000e010 	.word	0xe000e010

080059cc <delay_us>:
//延時nus
//nus為要延時的us數.
void delay_us(uint32_t nus)
{
	uint32_t temp;
	SysTick->LOAD=nus*fac_us; //時間載入
 80059cc:	4b09      	ldr	r3, [pc, #36]	; (80059f4 <delay_us+0x28>)
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	4358      	muls	r0, r3
 80059d2:	4b09      	ldr	r3, [pc, #36]	; (80059f8 <delay_us+0x2c>)
	SysTick->VAL=0x00;        //清空計數器
 80059d4:	2200      	movs	r2, #0
	SysTick->LOAD=nus*fac_us; //時間載入
 80059d6:	6058      	str	r0, [r3, #4]
	SysTick->VAL=0x00;        //清空計數器
 80059d8:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;      //開始倒數
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	f042 0201 	orr.w	r2, r2, #1
 80059e0:	601a      	str	r2, [r3, #0]
	do
	{
		temp=SysTick->CTRL;
 80059e2:	681a      	ldr	r2, [r3, #0]
	}
	while(temp&0x01&&!(temp&(1<<16)));//等待時間到達
 80059e4:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
 80059e8:	2a01      	cmp	r2, #1
 80059ea:	d0fa      	beq.n	80059e2 <delay_us+0x16>
	SysTick->CTRL=0x00;       //關閉計數器
 80059ec:	2200      	movs	r2, #0
 80059ee:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00;       //清空計數器
 80059f0:	609a      	str	r2, [r3, #8]
}
 80059f2:	4770      	bx	lr
 80059f4:	20003dfa 	.word	0x20003dfa
 80059f8:	e000e010 	.word	0xe000e010

080059fc <TM_Delay_Init>:
uint32_t multiplier;

void TM_Delay_Init(void) {
	/* While loop takes 4 cycles */
	/* For 1 us delay, we need to divide with 4M */
	multiplier = 122000000 / 4000000;
 80059fc:	4b01      	ldr	r3, [pc, #4]	; (8005a04 <TM_Delay_Init+0x8>)
 80059fe:	221e      	movs	r2, #30
 8005a00:	601a      	str	r2, [r3, #0]
}
 8005a02:	4770      	bx	lr
 8005a04:	2000411c 	.word	0x2000411c

08005a08 <TM_DelayMicros>:
	/* Multiply micros with multipler */
	/* Substract 10 */
	micros = micros * multiplier - 10;
	/* 4 cycles for one loop */
	while (micros--);
}
 8005a08:	4770      	bx	lr
	...

08005a0c <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8005a0c:	4b03      	ldr	r3, [pc, #12]	; (8005a1c <vApplicationGetIdleTaskMemory+0x10>)
 8005a0e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8005a10:	4b03      	ldr	r3, [pc, #12]	; (8005a20 <vApplicationGetIdleTaskMemory+0x14>)
 8005a12:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8005a14:	2380      	movs	r3, #128	; 0x80
 8005a16:	6013      	str	r3, [r2, #0]
  /* place for user code */
}                   
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	20003ffc 	.word	0x20003ffc
 8005a20:	20003dfc 	.word	0x20003dfc

08005a24 <ADC_Thread>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_ADC_Thread */
void ADC_Thread(void const * argument)
{
 8005a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  //portBASE_TYPE xStatus;
  /* Infinite loop */
  for(;;)
  {
	//vTaskSuspend(NULL);
	 if( xSemaphoreTake( adcBinarySemHandle, xMaxExpectedBlockTime ) == pdPASS && I2cC.i2cRecive == 0){
 8005a26:	4d2a      	ldr	r5, [pc, #168]	; (8005ad0 <ADC_Thread+0xac>)

			}

			data = read;
			data = data / 1670000;
			ADS1256.data_buffer[ADS1256.data_index] = data; //plus 2 for FFT using
 8005a28:	4c2a      	ldr	r4, [pc, #168]	; (8005ad4 <ADC_Thread+0xb0>)
	 if( xSemaphoreTake( adcBinarySemHandle, xMaxExpectedBlockTime ) == pdPASS && I2cC.i2cRecive == 0){
 8005a2a:	6828      	ldr	r0, [r5, #0]
 8005a2c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005a30:	f7fe fe22 	bl	8004678 <xQueueSemaphoreTake>
 8005a34:	2801      	cmp	r0, #1
 8005a36:	d1f8      	bne.n	8005a2a <ADC_Thread+0x6>
 8005a38:	4b27      	ldr	r3, [pc, #156]	; (8005ad8 <ADC_Thread+0xb4>)
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1f4      	bne.n	8005a2a <ADC_Thread+0x6>
			HAL_SPI_TransmitReceive_DMA(&hspi1,RDATACsend_data,Databuffer,3);
 8005a40:	4e26      	ldr	r6, [pc, #152]	; (8005adc <ADC_Thread+0xb8>)
 8005a42:	4927      	ldr	r1, [pc, #156]	; (8005ae0 <ADC_Thread+0xbc>)
 8005a44:	4827      	ldr	r0, [pc, #156]	; (8005ae4 <ADC_Thread+0xc0>)
 8005a46:	2303      	movs	r3, #3
 8005a48:	4632      	mov	r2, r6
 8005a4a:	f7fd f95b 	bl	8002d04 <HAL_SPI_TransmitReceive_DMA>
			read |= ((int32_t)Databuffer[1] << 8);
 8005a4e:	7873      	ldrb	r3, [r6, #1]
			read  = ((int32_t)Databuffer[0] << 16) & 0x00FF0000;
 8005a50:	7832      	ldrb	r2, [r6, #0]
			data = data / 1670000;
 8005a52:	eddf 6a25 	vldr	s13, [pc, #148]	; 8005ae8 <ADC_Thread+0xc4>
			read |= ((int32_t)Databuffer[1] << 8);
 8005a56:	021b      	lsls	r3, r3, #8
 8005a58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
			read |= Databuffer[2];
 8005a5c:	78b2      	ldrb	r2, [r6, #2]
 8005a5e:	4313      	orrs	r3, r2
			if (read & 0x800000){
 8005a60:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8005a64:	4a21      	ldr	r2, [pc, #132]	; (8005aec <ADC_Thread+0xc8>)
				read |= 0xFF000000;
 8005a66:	bf18      	it	ne
 8005a68:	f043 437f 	orrne.w	r3, r3, #4278190080	; 0xff000000
 8005a6c:	6013      	str	r3, [r2, #0]
			data = read;
 8005a6e:	edd2 7a00 	vldr	s15, [r2]
			data = data / 1670000;
 8005a72:	4b1f      	ldr	r3, [pc, #124]	; (8005af0 <ADC_Thread+0xcc>)
			data = read;
 8005a74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			data = data / 1670000;
 8005a78:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005a7c:	ed83 7a00 	vstr	s14, [r3]
			ADS1256.data_buffer[ADS1256.data_index] = data; //plus 2 for FFT using
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8005a86:	ed82 7a02 	vstr	s14, [r2, #8]
			ADS1256.data_index++;
			if(ADS1256.data_index == ADS1256.data_length) //divide 2 for FFT real data equal 4096
 8005a8a:	6862      	ldr	r2, [r4, #4]
			ADS1256.data_index++;
 8005a8c:	3301      	adds	r3, #1
			if(ADS1256.data_index == ADS1256.data_length) //divide 2 for FFT real data equal 4096
 8005a8e:	4293      	cmp	r3, r2
			ADS1256.data_index++;
 8005a90:	6023      	str	r3, [r4, #0]
			if(ADS1256.data_index == ADS1256.data_length) //divide 2 for FFT real data equal 4096
 8005a92:	d119      	bne.n	8005ac8 <ADC_Thread+0xa4>
			{

				/*send data to buffer*/
				BaseType_t xStatus;
				xStatus = xQueueSendToBack(adcQueueHandle, &xdatatoSend , 0);
 8005a94:	4e17      	ldr	r6, [pc, #92]	; (8005af4 <ADC_Thread+0xd0>)
 8005a96:	4918      	ldr	r1, [pc, #96]	; (8005af8 <ADC_Thread+0xd4>)
 8005a98:	6830      	ldr	r0, [r6, #0]
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	f7fe fc45 	bl	800432c <xQueueGenericSend>
 8005aa2:	4607      	mov	r7, r0
				queueCount = uxQueueMessagesWaiting(adcQueueHandle);
 8005aa4:	6830      	ldr	r0, [r6, #0]
 8005aa6:	f7fe fea9 	bl	80047fc <uxQueueMessagesWaiting>
 8005aaa:	4b14      	ldr	r3, [pc, #80]	; (8005afc <ADC_Thread+0xd8>)

				if(xStatus == pdPASS)
 8005aac:	2f01      	cmp	r7, #1
				queueCount = uxQueueMessagesWaiting(adcQueueHandle);
 8005aae:	6018      	str	r0, [r3, #0]
				if(xStatus == pdPASS)
 8005ab0:	d103      	bne.n	8005aba <ADC_Thread+0x96>
				{
					vTaskResume(FFT_TaskHandle);
 8005ab2:	4b13      	ldr	r3, [pc, #76]	; (8005b00 <ADC_Thread+0xdc>)
 8005ab4:	6818      	ldr	r0, [r3, #0]
 8005ab6:	f7ff f899 	bl	8004bec <vTaskResume>
				};
				ADS1256.data_index = 0;
 8005aba:	2300      	movs	r3, #0
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8005abc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ac0:	4810      	ldr	r0, [pc, #64]	; (8005b04 <ADC_Thread+0xe0>)
				ADS1256.data_index = 0;
 8005ac2:	6023      	str	r3, [r4, #0]
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8005ac4:	f7fb fccf 	bl	8001466 <HAL_GPIO_TogglePin>
			}

			TM_DelayMicros(8);
 8005ac8:	2008      	movs	r0, #8
 8005aca:	f7ff ff9d 	bl	8005a08 <TM_DelayMicros>
 8005ace:	e7ac      	b.n	8005a2a <ADC_Thread+0x6>
 8005ad0:	200041e0 	.word	0x200041e0
 8005ad4:	200041f0 	.word	0x200041f0
 8005ad8:	200182c0 	.word	0x200182c0
 8005adc:	20004050 	.word	0x20004050
 8005ae0:	2000000d 	.word	0x2000000d
 8005ae4:	20018268 	.word	0x20018268
 8005ae8:	49cbdb80 	.word	0x49cbdb80
 8005aec:	20004068 	.word	0x20004068
 8005af0:	2000c204 	.word	0x2000c204
 8005af4:	2000c200 	.word	0x2000c200
 8005af8:	20000024 	.word	0x20000024
 8005afc:	20004124 	.word	0x20004124
 8005b00:	200041dc 	.word	0x200041dc
 8005b04:	40020c00 	.word	0x40020c00

08005b08 <FFT_Thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FFT_Thread */
void FFT_Thread(void const * argument)
{
 8005b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//const portTickType xTicksToWait = 100 / portTICK_RATE_MS;
  /* Infinite loop */
  for(;;)
  {
	  BaseType_t xStatus;
	  queueCount = uxQueueMessagesWaiting(adcQueueHandle);
 8005b0a:	4e48      	ldr	r6, [pc, #288]	; (8005c2c <FFT_Thread+0x124>)
{
 8005b0c:	ed2d 8b02 	vpush	{d8}

				/* Calculates maxValue and returns corresponding BIN value */
				arm_max_f32(testOutput, fftSize, &maxValue, &testIndex);
				FFT_COUINT++;

				maxValue = maxValue/4096;
 8005b10:	ed9f 8a47 	vldr	s16, [pc, #284]	; 8005c30 <FFT_Thread+0x128>
	  queueCount = uxQueueMessagesWaiting(adcQueueHandle);
 8005b14:	6830      	ldr	r0, [r6, #0]
 8005b16:	4d47      	ldr	r5, [pc, #284]	; (8005c34 <FFT_Thread+0x12c>)
 8005b18:	f7fe fe70 	bl	80047fc <uxQueueMessagesWaiting>
 8005b1c:	6028      	str	r0, [r5, #0]
	  if(queueCount!=0){
 8005b1e:	2800      	cmp	r0, #0
 8005b20:	f000 8081 	beq.w	8005c26 <FFT_Thread+0x11e>
			  xStatus = xQueueReceive(adcQueueHandle, &dataRecive, 100);
 8005b24:	4c44      	ldr	r4, [pc, #272]	; (8005c38 <FFT_Thread+0x130>)
 8005b26:	6830      	ldr	r0, [r6, #0]
 8005b28:	4621      	mov	r1, r4
 8005b2a:	2264      	movs	r2, #100	; 0x64
 8005b2c:	f7fe fd04 	bl	8004538 <xQueueReceive>
 8005b30:	4607      	mov	r7, r0
			  queueCount = uxQueueMessagesWaiting(adcQueueHandle);
 8005b32:	6830      	ldr	r0, [r6, #0]
 8005b34:	f7fe fe62 	bl	80047fc <uxQueueMessagesWaiting>
 8005b38:	6823      	ldr	r3, [r4, #0]
 8005b3a:	4940      	ldr	r1, [pc, #256]	; (8005c3c <FFT_Thread+0x134>)
 8005b3c:	4a40      	ldr	r2, [pc, #256]	; (8005c40 <FFT_Thread+0x138>)
 8005b3e:	6028      	str	r0, [r5, #0]
				FFTdata[i*2+1] = 0;
 8005b40:	2400      	movs	r4, #0
 8005b42:	f503 4080 	add.w	r0, r3, #16384	; 0x4000
				rawData[i]=*(dataRecive[0]+i);
 8005b46:	681d      	ldr	r5, [r3, #0]
 8005b48:	f841 5b04 	str.w	r5, [r1], #4
				FFTdata[i*2] = *(dataRecive[0]+i);
 8005b4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b50:	f842 5c04 	str.w	r5, [r2, #-4]
			for(uint32_t i = 0; i<4096; i++)
 8005b54:	4283      	cmp	r3, r0
				FFTdata[i*2+1] = 0;
 8005b56:	f842 4b08 	str.w	r4, [r2], #8
			for(uint32_t i = 0; i<4096; i++)
 8005b5a:	d1f4      	bne.n	8005b46 <FFT_Thread+0x3e>
			if(xStatus == pdPASS)
 8005b5c:	2f01      	cmp	r7, #1
 8005b5e:	d1d9      	bne.n	8005b14 <FFT_Thread+0xc>
				arm_cfft_f32(&arm_cfft_sR_f32_len4096, FFTdata, ifftFlag, doBitReverse);
 8005b60:	4b38      	ldr	r3, [pc, #224]	; (8005c44 <FFT_Thread+0x13c>)
 8005b62:	4a39      	ldr	r2, [pc, #228]	; (8005c48 <FFT_Thread+0x140>)
				arm_cmplx_mag_f32(FFTdata, testOutput, fftSize);
 8005b64:	4d39      	ldr	r5, [pc, #228]	; (8005c4c <FFT_Thread+0x144>)
				arm_cfft_f32(&arm_cfft_sR_f32_len4096, FFTdata, ifftFlag, doBitReverse);
 8005b66:	781b      	ldrb	r3, [r3, #0]
				arm_max_f32(testOutput, fftSize, &maxValue, &testIndex);
 8005b68:	4c39      	ldr	r4, [pc, #228]	; (8005c50 <FFT_Thread+0x148>)
				arm_cfft_f32(&arm_cfft_sR_f32_len4096, FFTdata, ifftFlag, doBitReverse);
 8005b6a:	7812      	ldrb	r2, [r2, #0]
 8005b6c:	4939      	ldr	r1, [pc, #228]	; (8005c54 <FFT_Thread+0x14c>)
 8005b6e:	483a      	ldr	r0, [pc, #232]	; (8005c58 <FFT_Thread+0x150>)
 8005b70:	f7fd feb6 	bl	80038e0 <arm_cfft_f32>
				arm_cmplx_mag_f32(FFTdata, testOutput, fftSize);
 8005b74:	682a      	ldr	r2, [r5, #0]
 8005b76:	4939      	ldr	r1, [pc, #228]	; (8005c5c <FFT_Thread+0x154>)
 8005b78:	4836      	ldr	r0, [pc, #216]	; (8005c54 <FFT_Thread+0x14c>)
 8005b7a:	f7fd f9cf 	bl	8002f1c <arm_cmplx_mag_f32>
				arm_max_f32(testOutput, fftSize, &maxValue, &testIndex);
 8005b7e:	4b38      	ldr	r3, [pc, #224]	; (8005c60 <FFT_Thread+0x158>)
 8005b80:	6829      	ldr	r1, [r5, #0]
 8005b82:	4836      	ldr	r0, [pc, #216]	; (8005c5c <FFT_Thread+0x154>)
 8005b84:	4622      	mov	r2, r4
 8005b86:	f7fd fa26 	bl	8002fd6 <arm_max_f32>
				FFT_COUINT++;
 8005b8a:	4a36      	ldr	r2, [pc, #216]	; (8005c64 <FFT_Thread+0x15c>)
				maxValue = maxValue/4096;
 8005b8c:	edd4 7a00 	vldr	s15, [r4]
				FFT_COUINT++;
 8005b90:	6813      	ldr	r3, [r2, #0]
 8005b92:	3301      	adds	r3, #1
 8005b94:	6013      	str	r3, [r2, #0]
				maxValue = maxValue/4096;
 8005b96:	ee67 7a88 	vmul.f32	s15, s15, s16
 8005b9a:	4b30      	ldr	r3, [pc, #192]	; (8005c5c <FFT_Thread+0x154>)
 8005b9c:	edc4 7a00 	vstr	s15, [r4]
 8005ba0:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
				for(int i =0; i<2048; i++)
				{
					testOutput[i] = testOutput[i]/4096;
 8005ba4:	edd3 7a00 	vldr	s15, [r3]
 8005ba8:	ee67 7a88 	vmul.f32	s15, s15, s16
 8005bac:	ece3 7a01 	vstmia	r3!, {s15}
				for(int i =0; i<2048; i++)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d1f7      	bne.n	8005ba4 <FFT_Thread+0x9c>
				}

				for(int i =0; i<14; i++)
				{
					Calculate_FreqMax(testOutput,*((&freq_settingValue.freq1)+i), i);
 8005bb4:	4f2c      	ldr	r7, [pc, #176]	; (8005c68 <FFT_Thread+0x160>)
 8005bb6:	4d29      	ldr	r5, [pc, #164]	; (8005c5c <FFT_Thread+0x154>)
				for(int i =0; i<14; i++)
 8005bb8:	2400      	movs	r4, #0
					Calculate_FreqMax(testOutput,*((&freq_settingValue.freq1)+i), i);
 8005bba:	b262      	sxtb	r2, r4
 8005bbc:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8005bc0:	4628      	mov	r0, r5
				for(int i =0; i<14; i++)
 8005bc2:	3401      	adds	r4, #1
					Calculate_FreqMax(testOutput,*((&freq_settingValue.freq1)+i), i);
 8005bc4:	f7ff fea2 	bl	800590c <Calculate_FreqMax>
				for(int i =0; i<14; i++)
 8005bc8:	2c0e      	cmp	r4, #14
 8005bca:	d1f6      	bne.n	8005bba <FFT_Thread+0xb2>




				/*Calcluate math function*/
				arm_max_f32(statisticDataSet, testlength, &statistic_value.Statistic_max, &maxtestIndex);
 8005bcc:	4c27      	ldr	r4, [pc, #156]	; (8005c6c <FFT_Thread+0x164>)
 8005bce:	4d28      	ldr	r5, [pc, #160]	; (8005c70 <FFT_Thread+0x168>)
 8005bd0:	6821      	ldr	r1, [r4, #0]
 8005bd2:	6828      	ldr	r0, [r5, #0]
 8005bd4:	4b27      	ldr	r3, [pc, #156]	; (8005c74 <FFT_Thread+0x16c>)
 8005bd6:	4a28      	ldr	r2, [pc, #160]	; (8005c78 <FFT_Thread+0x170>)
 8005bd8:	f7fd f9fd 	bl	8002fd6 <arm_max_f32>
				arm_min_f32(statisticDataSet, testlength, &statistic_value.Statistic_min, &mintestIndex);
 8005bdc:	4b27      	ldr	r3, [pc, #156]	; (8005c7c <FFT_Thread+0x174>)
 8005bde:	6821      	ldr	r1, [r4, #0]
 8005be0:	6828      	ldr	r0, [r5, #0]
 8005be2:	4a27      	ldr	r2, [pc, #156]	; (8005c80 <FFT_Thread+0x178>)
 8005be4:	f7fd fa82 	bl	80030ec <arm_min_f32>
				arm_var_f32(statisticDataSet, testlength, &statistic_value.Statistic_var);
 8005be8:	6821      	ldr	r1, [r4, #0]
 8005bea:	6828      	ldr	r0, [r5, #0]
 8005bec:	4a25      	ldr	r2, [pc, #148]	; (8005c84 <FFT_Thread+0x17c>)
 8005bee:	f7fd fb71 	bl	80032d4 <arm_var_f32>
				arm_rms_f32(statisticDataSet, testlength, &statistic_value.Statistic_rms);
 8005bf2:	6821      	ldr	r1, [r4, #0]
 8005bf4:	6828      	ldr	r0, [r5, #0]
 8005bf6:	4a24      	ldr	r2, [pc, #144]	; (8005c88 <FFT_Thread+0x180>)
 8005bf8:	f7fd fad2 	bl	80031a0 <arm_rms_f32>
				arm_mean_f32(statisticDataSet, testlength, &statistic_value.Statistic_mean);
 8005bfc:	6821      	ldr	r1, [r4, #0]
 8005bfe:	6828      	ldr	r0, [r5, #0]
 8005c00:	4a22      	ldr	r2, [pc, #136]	; (8005c8c <FFT_Thread+0x184>)
 8005c02:	f7fd fa41 	bl	8003088 <arm_mean_f32>
				arm_std_f32(statisticDataSet, testlength, &statistic_value.Statistic_std);
 8005c06:	6821      	ldr	r1, [r4, #0]
 8005c08:	6828      	ldr	r0, [r5, #0]
 8005c0a:	4a21      	ldr	r2, [pc, #132]	; (8005c90 <FFT_Thread+0x188>)
 8005c0c:	f7fd fb08 	bl	8003220 <arm_std_f32>
				arm_rms_f32(testOutput, testlength, &statistic_value.Statistic_FreqOvall);
 8005c10:	6821      	ldr	r1, [r4, #0]
 8005c12:	4a20      	ldr	r2, [pc, #128]	; (8005c94 <FFT_Thread+0x18c>)
 8005c14:	4811      	ldr	r0, [pc, #68]	; (8005c5c <FFT_Thread+0x154>)
 8005c16:	f7fd fac3 	bl	80031a0 <arm_rms_f32>


				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8005c1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005c1e:	481e      	ldr	r0, [pc, #120]	; (8005c98 <FFT_Thread+0x190>)
 8005c20:	f7fb fc21 	bl	8001466 <HAL_GPIO_TogglePin>
 8005c24:	e776      	b.n	8005b14 <FFT_Thread+0xc>
			}
*/
	  }

	  else{
		 vTaskSuspend(NULL);
 8005c26:	f7ff f9a3 	bl	8004f70 <vTaskSuspend>
 8005c2a:	e773      	b.n	8005b14 <FFT_Thread+0xc>
 8005c2c:	2000c200 	.word	0x2000c200
 8005c30:	39800000 	.word	0x39800000
 8005c34:	20004124 	.word	0x20004124
 8005c38:	20018324 	.word	0x20018324
 8005c3c:	2000c208 	.word	0x2000c208
 8005c40:	2001026c 	.word	0x2001026c
 8005c44:	20000010 	.word	0x20000010
 8005c48:	2000405c 	.word	0x2000405c
 8005c4c:	20000014 	.word	0x20000014
 8005c50:	200041e4 	.word	0x200041e4
 8005c54:	20010268 	.word	0x20010268
 8005c58:	080107d8 	.word	0x080107d8
 8005c5c:	200081fc 	.word	0x200081fc
 8005c60:	2000406c 	.word	0x2000406c
 8005c64:	20004054 	.word	0x20004054
 8005c68:	20004078 	.word	0x20004078
 8005c6c:	20004070 	.word	0x20004070
 8005c70:	20004120 	.word	0x20004120
 8005c74:	20004060 	.word	0x20004060
 8005c78:	200040b0 	.word	0x200040b0
 8005c7c:	20004064 	.word	0x20004064
 8005c80:	200040b4 	.word	0x200040b4
 8005c84:	200040b8 	.word	0x200040b8
 8005c88:	200040bc 	.word	0x200040bc
 8005c8c:	200040c0 	.word	0x200040c0
 8005c90:	200040c4 	.word	0x200040c4
 8005c94:	200040c8 	.word	0x200040c8
 8005c98:	40020c00 	.word	0x40020c00

08005c9c <writeCMD>:
{
 8005c9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	Txbuffer[0] = command;
 8005c9e:	ac02      	add	r4, sp, #8
	CS_0();
 8005ca0:	4d0a      	ldr	r5, [pc, #40]	; (8005ccc <writeCMD+0x30>)
	Txbuffer[0] = command;
 8005ca2:	f804 0d04 	strb.w	r0, [r4, #-4]!
	CS_0();
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	4628      	mov	r0, r5
 8005caa:	2110      	movs	r1, #16
 8005cac:	f7fb fbd6 	bl	800145c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,1,50);
 8005cb0:	2332      	movs	r3, #50	; 0x32
 8005cb2:	4621      	mov	r1, r4
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	4806      	ldr	r0, [pc, #24]	; (8005cd0 <writeCMD+0x34>)
 8005cb8:	f7fc fe8b 	bl	80029d2 <HAL_SPI_Transmit>
	CS_1();
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	2110      	movs	r1, #16
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	f7fb fbcb 	bl	800145c <HAL_GPIO_WritePin>
}
 8005cc6:	b003      	add	sp, #12
 8005cc8:	bd30      	pop	{r4, r5, pc}
 8005cca:	bf00      	nop
 8005ccc:	40020000 	.word	0x40020000
 8005cd0:	20018268 	.word	0x20018268

08005cd4 <writeByteToReg>:
{
 8005cd4:	b513      	push	{r0, r1, r4, lr}
	CS_0();
 8005cd6:	4c0d      	ldr	r4, [pc, #52]	; (8005d0c <writeByteToReg+0x38>)
	Txbuffer[2] = value;
 8005cd8:	f88d 1006 	strb.w	r1, [sp, #6]
	Txbuffer[0] = CMD_WREG | registerID;
 8005cdc:	f040 0050 	orr.w	r0, r0, #80	; 0x50
 8005ce0:	f88d 0004 	strb.w	r0, [sp, #4]
	Txbuffer[1] = 0x00;
 8005ce4:	2200      	movs	r2, #0
	CS_0();
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	2110      	movs	r1, #16
	Txbuffer[1] = 0x00;
 8005cea:	f88d 2005 	strb.w	r2, [sp, #5]
	CS_0();
 8005cee:	f7fb fbb5 	bl	800145c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,3,100);
 8005cf2:	2364      	movs	r3, #100	; 0x64
 8005cf4:	a901      	add	r1, sp, #4
 8005cf6:	2203      	movs	r2, #3
 8005cf8:	4805      	ldr	r0, [pc, #20]	; (8005d10 <writeByteToReg+0x3c>)
 8005cfa:	f7fc fe6a 	bl	80029d2 <HAL_SPI_Transmit>
	CS_1();
 8005cfe:	2201      	movs	r2, #1
 8005d00:	2110      	movs	r1, #16
 8005d02:	4620      	mov	r0, r4
 8005d04:	f7fb fbaa 	bl	800145c <HAL_GPIO_WritePin>
}
 8005d08:	b002      	add	sp, #8
 8005d0a:	bd10      	pop	{r4, pc}
 8005d0c:	40020000 	.word	0x40020000
 8005d10:	20018268 	.word	0x20018268

08005d14 <setDataRate>:
	writeByteToReg(REG_DRATE,drate);
 8005d14:	4601      	mov	r1, r0
 8005d16:	2003      	movs	r0, #3
 8005d18:	f7ff bfdc 	b.w	8005cd4 <writeByteToReg>

08005d1c <setPGA>:
	writeByteToReg(REG_ADCON,pga);
 8005d1c:	4601      	mov	r1, r0
 8005d1e:	2002      	movs	r0, #2
 8005d20:	f7ff bfd8 	b.w	8005cd4 <writeByteToReg>

08005d24 <waitDRDY>:
{
 8005d24:	b538      	push	{r3, r4, r5, lr}
 8005d26:	4c05      	ldr	r4, [pc, #20]	; (8005d3c <waitDRDY+0x18>)
			if (DRDY_IS_LOW()){
 8005d28:	4d05      	ldr	r5, [pc, #20]	; (8005d40 <waitDRDY+0x1c>)
 8005d2a:	2108      	movs	r1, #8
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	f7fb fb8f 	bl	8001450 <HAL_GPIO_ReadPin>
 8005d32:	b108      	cbz	r0, 8005d38 <waitDRDY+0x14>
		for (i = 0; i < 40000000; i++){
 8005d34:	3c01      	subs	r4, #1
 8005d36:	d1f8      	bne.n	8005d2a <waitDRDY+0x6>
}
 8005d38:	bd38      	pop	{r3, r4, r5, pc}
 8005d3a:	bf00      	nop
 8005d3c:	02625a00 	.word	0x02625a00
 8005d40:	40020000 	.word	0x40020000

08005d44 <receive8bit>:
{
 8005d44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t send_data = 0xff;
 8005d46:	23ff      	movs	r3, #255	; 0xff
	uint8_t read = 0;
 8005d48:	aa04      	add	r2, sp, #16
	uint8_t send_data = 0xff;
 8005d4a:	f88d 300e 	strb.w	r3, [sp, #14]
	uint8_t read = 0;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	f802 3d01 	strb.w	r3, [r2, #-1]!
	HAL_SPI_TransmitReceive(&hspi1,&send_data,&read,1,50);
 8005d54:	2332      	movs	r3, #50	; 0x32
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	f10d 010e 	add.w	r1, sp, #14
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	4804      	ldr	r0, [pc, #16]	; (8005d70 <receive8bit+0x2c>)
 8005d60:	f7fc fedf 	bl	8002b22 <HAL_SPI_TransmitReceive>
}
 8005d64:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8005d68:	b005      	add	sp, #20
 8005d6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d6e:	bf00      	nop
 8005d70:	20018268 	.word	0x20018268

08005d74 <readByteFromReg>:
{
 8005d74:	b537      	push	{r0, r1, r2, r4, r5, lr}
	CS_0();
 8005d76:	4c10      	ldr	r4, [pc, #64]	; (8005db8 <readByteFromReg+0x44>)
	TXbuffer[0] = CMD_RREG | registerID;
 8005d78:	f040 0010 	orr.w	r0, r0, #16
 8005d7c:	f88d 0004 	strb.w	r0, [sp, #4]
	TXbuffer[1] = 0x00;
 8005d80:	2200      	movs	r2, #0
	CS_0();
 8005d82:	4620      	mov	r0, r4
 8005d84:	2110      	movs	r1, #16
	TXbuffer[1] = 0x00;
 8005d86:	f88d 2005 	strb.w	r2, [sp, #5]
	CS_0();
 8005d8a:	f7fb fb67 	bl	800145c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TXbuffer ,2,50);
 8005d8e:	2332      	movs	r3, #50	; 0x32
 8005d90:	a901      	add	r1, sp, #4
 8005d92:	2202      	movs	r2, #2
 8005d94:	4809      	ldr	r0, [pc, #36]	; (8005dbc <readByteFromReg+0x48>)
 8005d96:	f7fc fe1c 	bl	80029d2 <HAL_SPI_Transmit>
	delay_us(10);
 8005d9a:	200a      	movs	r0, #10
 8005d9c:	f7ff fe16 	bl	80059cc <delay_us>
	uint8_t read = receive8bit();
 8005da0:	f7ff ffd0 	bl	8005d44 <receive8bit>
	CS_1();
 8005da4:	2201      	movs	r2, #1
	uint8_t read = receive8bit();
 8005da6:	4605      	mov	r5, r0
	CS_1();
 8005da8:	2110      	movs	r1, #16
 8005daa:	4620      	mov	r0, r4
 8005dac:	f7fb fb56 	bl	800145c <HAL_GPIO_WritePin>
}
 8005db0:	4628      	mov	r0, r5
 8005db2:	b003      	add	sp, #12
 8005db4:	bd30      	pop	{r4, r5, pc}
 8005db6:	bf00      	nop
 8005db8:	40020000 	.word	0x40020000
 8005dbc:	20018268 	.word	0x20018268

08005dc0 <readChipID>:
{
 8005dc0:	b507      	push	{r0, r1, r2, lr}
	waitDRDY();
 8005dc2:	f7ff ffaf 	bl	8005d24 <waitDRDY>
	volatile uint8_t id = readByteFromReg(REG_STATUS);
 8005dc6:	2000      	movs	r0, #0
 8005dc8:	f7ff ffd4 	bl	8005d74 <readByteFromReg>
 8005dcc:	f88d 0007 	strb.w	r0, [sp, #7]
	return (id >> 4);
 8005dd0:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8005dd4:	0900      	lsrs	r0, r0, #4
 8005dd6:	b003      	add	sp, #12
 8005dd8:	f85d fb04 	ldr.w	pc, [sp], #4

08005ddc <setBuffer>:
{
 8005ddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	Txbuffer[0] = CMD_WREG | REG_STATUS;
 8005dde:	ac02      	add	r4, sp, #8
 8005de0:	f44f 63ca 	mov.w	r3, #1616	; 0x650
	CS_0();
 8005de4:	4d0a      	ldr	r5, [pc, #40]	; (8005e10 <setBuffer+0x34>)
	Txbuffer[0] = CMD_WREG | REG_STATUS;
 8005de6:	f824 3d04 	strh.w	r3, [r4, #-4]!
	CS_0();
 8005dea:	4628      	mov	r0, r5
 8005dec:	2200      	movs	r2, #0
 8005dee:	2110      	movs	r1, #16
 8005df0:	f7fb fb34 	bl	800145c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,2,50);
 8005df4:	2332      	movs	r3, #50	; 0x32
 8005df6:	4621      	mov	r1, r4
 8005df8:	2202      	movs	r2, #2
 8005dfa:	4806      	ldr	r0, [pc, #24]	; (8005e14 <setBuffer+0x38>)
 8005dfc:	f7fc fde9 	bl	80029d2 <HAL_SPI_Transmit>
	CS_1();
 8005e00:	2201      	movs	r2, #1
 8005e02:	2110      	movs	r1, #16
 8005e04:	4628      	mov	r0, r5
 8005e06:	f7fb fb29 	bl	800145c <HAL_GPIO_WritePin>
}
 8005e0a:	b003      	add	sp, #12
 8005e0c:	bd30      	pop	{r4, r5, pc}
 8005e0e:	bf00      	nop
 8005e10:	40020000 	.word	0x40020000
 8005e14:	20018268 	.word	0x20018268

08005e18 <SystemClock_Config>:
{
 8005e18:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005e1a:	2414      	movs	r4, #20
{
 8005e1c:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005e1e:	4622      	mov	r2, r4
 8005e20:	2100      	movs	r1, #0
 8005e22:	a809      	add	r0, sp, #36	; 0x24
 8005e24:	f000 fc85 	bl	8006732 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005e28:	4622      	mov	r2, r4
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	a803      	add	r0, sp, #12
 8005e2e:	f000 fc80 	bl	8006732 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e32:	2400      	movs	r4, #0
 8005e34:	4b1b      	ldr	r3, [pc, #108]	; (8005ea4 <SystemClock_Config+0x8c>)
 8005e36:	9401      	str	r4, [sp, #4]
 8005e38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e3a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005e3e:	641a      	str	r2, [r3, #64]	; 0x40
 8005e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e46:	9301      	str	r3, [sp, #4]
 8005e48:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e4a:	4b17      	ldr	r3, [pc, #92]	; (8005ea8 <SystemClock_Config+0x90>)
 8005e4c:	9402      	str	r4, [sp, #8]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e54:	601a      	str	r2, [r3, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e5c:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005e5e:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e60:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005e62:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005e64:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005e66:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 122;
 8005e6a:	2108      	movs	r1, #8
 8005e6c:	237a      	movs	r3, #122	; 0x7a
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005e6e:	2604      	movs	r6, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005e70:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 122;
 8005e72:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005e76:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005e78:	e9cd 540e 	strd	r5, r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005e7c:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005e7e:	9613      	str	r6, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005e80:	f7fc fa80 	bl	8002384 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005e84:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005e86:	e9cd 3503 	strd	r3, r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005e8a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8005e8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e92:	e9cd 0306 	strd	r0, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005e96:	4631      	mov	r1, r6
 8005e98:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005e9a:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005e9c:	f7fc fc22 	bl	80026e4 <HAL_RCC_ClockConfig>
}
 8005ea0:	b014      	add	sp, #80	; 0x50
 8005ea2:	bd70      	pop	{r4, r5, r6, pc}
 8005ea4:	40023800 	.word	0x40023800
 8005ea8:	40007000 	.word	0x40007000

08005eac <main>:
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b09c      	sub	sp, #112	; 0x70
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005eb0:	2400      	movs	r4, #0
 8005eb2:	4dae      	ldr	r5, [pc, #696]	; (800616c <main+0x2c0>)
  hi2c1.Instance = I2C1;
 8005eb4:	4fae      	ldr	r7, [pc, #696]	; (8006170 <main+0x2c4>)
  HAL_Init();
 8005eb6:	f7fa ffad 	bl	8000e14 <HAL_Init>
  SystemClock_Config();
 8005eba:	f7ff ffad 	bl	8005e18 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ebe:	2214      	movs	r2, #20
 8005ec0:	2100      	movs	r1, #0
 8005ec2:	a815      	add	r0, sp, #84	; 0x54
 8005ec4:	f000 fc35 	bl	8006732 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ec8:	9403      	str	r4, [sp, #12]
 8005eca:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8005ecc:	48a9      	ldr	r0, [pc, #676]	; (8006174 <main+0x2c8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ece:	f043 0301 	orr.w	r3, r3, #1
 8005ed2:	632b      	str	r3, [r5, #48]	; 0x30
 8005ed4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8005ed6:	f003 0301 	and.w	r3, r3, #1
 8005eda:	9303      	str	r3, [sp, #12]
 8005edc:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005ede:	9404      	str	r4, [sp, #16]
 8005ee0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8005ee2:	f043 0308 	orr.w	r3, r3, #8
 8005ee6:	632b      	str	r3, [r5, #48]	; 0x30
 8005ee8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8005eea:	f003 0308 	and.w	r3, r3, #8
 8005eee:	9304      	str	r3, [sp, #16]
 8005ef0:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ef2:	9405      	str	r4, [sp, #20]
 8005ef4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8005ef6:	f043 0302 	orr.w	r3, r3, #2
 8005efa:	632b      	str	r3, [r5, #48]	; 0x30
 8005efc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8005efe:	f003 0302 	and.w	r3, r3, #2
 8005f02:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8005f04:	4622      	mov	r2, r4
 8005f06:	2110      	movs	r1, #16
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f08:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8005f0a:	f7fb faa7 	bl	800145c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8005f0e:	4622      	mov	r2, r4
 8005f10:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005f14:	4898      	ldr	r0, [pc, #608]	; (8006178 <main+0x2cc>)
 8005f16:	f7fb faa1 	bl	800145c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005f1a:	4b98      	ldr	r3, [pc, #608]	; (800617c <main+0x2d0>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f1c:	4895      	ldr	r0, [pc, #596]	; (8006174 <main+0x2c8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f1e:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005f20:	2208      	movs	r2, #8
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f22:	a915      	add	r1, sp, #84	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f24:	2601      	movs	r6, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005f26:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f2a:	f04f 0910 	mov.w	r9, #16
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f2e:	f7fb f9af 	bl	8001290 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f32:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f34:	a915      	add	r1, sp, #84	; 0x54
 8005f36:	488f      	ldr	r0, [pc, #572]	; (8006174 <main+0x2c8>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f38:	9617      	str	r6, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f3a:	e9cd 9615 	strd	r9, r6, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f3e:	9318      	str	r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f40:	f7fb f9a6 	bl	8001290 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8005f44:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005f48:	a915      	add	r1, sp, #84	; 0x54
 8005f4a:	488b      	ldr	r0, [pc, #556]	; (8006178 <main+0x2cc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f4c:	e9cd 3615 	strd	r3, r6, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f50:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005f54:	f7fb f99c 	bl	8001290 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8005f58:	4622      	mov	r2, r4
 8005f5a:	2105      	movs	r1, #5
 8005f5c:	2009      	movs	r0, #9
 8005f5e:	f7fa ff97 	bl	8000e90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8005f62:	2009      	movs	r0, #9
 8005f64:	f7fa ffc8 	bl	8000ef8 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005f68:	9401      	str	r4, [sp, #4]
 8005f6a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8005f6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005f70:	632b      	str	r3, [r5, #48]	; 0x30
 8005f72:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8005f74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f78:	9301      	str	r3, [sp, #4]
 8005f7a:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005f7c:	9402      	str	r4, [sp, #8]
 8005f7e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8005f80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f84:	632b      	str	r3, [r5, #48]	; 0x30
 8005f86:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  hspi1.Instance = SPI1;
 8005f88:	4d7d      	ldr	r5, [pc, #500]	; (8006180 <main+0x2d4>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005f8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8005f8e:	4622      	mov	r2, r4
 8005f90:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005f92:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8005f94:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005f96:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8005f98:	f7fa ff7a 	bl	8000e90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8005f9c:	200b      	movs	r0, #11
 8005f9e:	f7fa ffab 	bl	8000ef8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8005fa2:	4622      	mov	r2, r4
 8005fa4:	2105      	movs	r1, #5
 8005fa6:	2011      	movs	r0, #17
 8005fa8:	f7fa ff72 	bl	8000e90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8005fac:	2011      	movs	r0, #17
 8005fae:	f7fa ffa3 	bl	8000ef8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8005fb2:	4622      	mov	r2, r4
 8005fb4:	2105      	movs	r1, #5
 8005fb6:	2038      	movs	r0, #56	; 0x38
 8005fb8:	f7fa ff6a 	bl	8000e90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8005fbc:	2038      	movs	r0, #56	; 0x38
 8005fbe:	f7fa ff9b 	bl	8000ef8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8005fc2:	4622      	mov	r2, r4
 8005fc4:	2105      	movs	r1, #5
 8005fc6:	203b      	movs	r0, #59	; 0x3b
 8005fc8:	f7fa ff62 	bl	8000e90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8005fcc:	203b      	movs	r0, #59	; 0x3b
 8005fce:	f7fa ff93 	bl	8000ef8 <HAL_NVIC_EnableIRQ>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005fd2:	496c      	ldr	r1, [pc, #432]	; (8006184 <main+0x2d8>)
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fd4:	62ac      	str	r4, [r5, #40]	; 0x28
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005fd6:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005fda:	e9c5 1300 	strd	r1, r3, [r5]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005fde:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005fe2:	2320      	movs	r3, #32
 8005fe4:	e9c5 0306 	strd	r0, r3, [r5, #24]
  hspi1.Init.CRCPolynomial = 10;
 8005fe8:	f04f 080a 	mov.w	r8, #10
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005fec:	4628      	mov	r0, r5
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005fee:	e9c5 4604 	strd	r4, r6, [r5, #16]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005ff2:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005ff6:	e9c5 4408 	strd	r4, r4, [r5, #32]
  hspi1.Init.CRCPolynomial = 10;
 8005ffa:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005ffe:	f7fc fcab 	bl	8002958 <HAL_SPI_Init>
  hi2c1.Init.ClockSpeed = 100000;
 8006002:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 80061d0 <main+0x324>
 8006006:	4b60      	ldr	r3, [pc, #384]	; (8006188 <main+0x2dc>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006008:	60bc      	str	r4, [r7, #8]
  hi2c1.Init.ClockSpeed = 100000;
 800600a:	e9c7 c300 	strd	ip, r3, [r7]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800600e:	f04f 0e04 	mov.w	lr, #4
 8006012:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006016:	e9c7 e303 	strd	lr, r3, [r7, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800601a:	4638      	mov	r0, r7
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 800601c:	2340      	movs	r3, #64	; 0x40
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800601e:	e9c7 3407 	strd	r3, r4, [r7, #28]
  hi2c1.Init.OwnAddress2 = 0;
 8006022:	e9c7 4405 	strd	r4, r4, [r7, #20]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006026:	f7fb fa31 	bl	800148c <HAL_I2C_Init>
  HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 2);
 800602a:	4958      	ldr	r1, [pc, #352]	; (800618c <main+0x2e0>)
 800602c:	2202      	movs	r2, #2
 800602e:	4638      	mov	r0, r7
 8006030:	f7fb fad0 	bl	80015d4 <HAL_I2C_Slave_Receive_IT>
  statisticDataSet = rawData;
 8006034:	4b56      	ldr	r3, [pc, #344]	; (8006190 <main+0x2e4>)
 8006036:	4a57      	ldr	r2, [pc, #348]	; (8006194 <main+0x2e8>)
 8006038:	601a      	str	r2, [r3, #0]
  ADS1256.data_index = 0;
 800603a:	4f57      	ldr	r7, [pc, #348]	; (8006198 <main+0x2ec>)
  testlength = sizeof(dataRecive)/sizeof(float);
 800603c:	4a57      	ldr	r2, [pc, #348]	; (800619c <main+0x2f0>)
 800603e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006042:	6013      	str	r3, [r2, #0]
  ADS1256.data_length = 4096;
 8006044:	e9c7 4300 	strd	r4, r3, [r7]
  FB.f = 1.4567;
 8006048:	4b55      	ldr	r3, [pc, #340]	; (80061a0 <main+0x2f4>)
 800604a:	4a56      	ldr	r2, [pc, #344]	; (80061a4 <main+0x2f8>)
 800604c:	601a      	str	r2, [r3, #0]
  freq_settingValue.freq1 = 0;
 800604e:	4b56      	ldr	r3, [pc, #344]	; (80061a8 <main+0x2fc>)
 8006050:	601c      	str	r4, [r3, #0]
  transferbyte[0] = FB.byte[0];
 8006052:	4b56      	ldr	r3, [pc, #344]	; (80061ac <main+0x300>)
 8006054:	2225      	movs	r2, #37	; 0x25
 8006056:	701a      	strb	r2, [r3, #0]
  transferbyte[1] = FB.byte[1];
 8006058:	2275      	movs	r2, #117	; 0x75
 800605a:	705a      	strb	r2, [r3, #1]
  transferbyte[2] = FB.byte[2];
 800605c:	22ba      	movs	r2, #186	; 0xba
 800605e:	709a      	strb	r2, [r3, #2]
  delay_init(122);
 8006060:	207a      	movs	r0, #122	; 0x7a
  transferbyte[3] = FB.byte[3];
 8006062:	223f      	movs	r2, #63	; 0x3f
 8006064:	70da      	strb	r2, [r3, #3]
  delay_init(122);
 8006066:	f7ff fc83 	bl	8005970 <delay_init>
  TM_Delay_Init();
 800606a:	f7ff fcc7 	bl	80059fc <TM_Delay_Init>
  writeCMD(CMD_RESET);
 800606e:	20fe      	movs	r0, #254	; 0xfe
 8006070:	f7ff fe14 	bl	8005c9c <writeCMD>
  delay_ms(10);
 8006074:	4640      	mov	r0, r8
 8006076:	f7ff fc91 	bl	800599c <delay_ms>
  TM_DelayMicros(1);
 800607a:	4630      	mov	r0, r6
 800607c:	f7ff fcc4 	bl	8005a08 <TM_DelayMicros>
  setBuffer();
 8006080:	f7ff feac 	bl	8005ddc <setBuffer>
  setPGA(PGA_GAIN1);
 8006084:	4620      	mov	r0, r4
 8006086:	f7ff fe49 	bl	8005d1c <setPGA>
  setDataRate(DRATE_15000);
 800608a:	20e0      	movs	r0, #224	; 0xe0
 800608c:	f7ff fe42 	bl	8005d14 <setDataRate>
  id = readChipID();
 8006090:	f7ff fe96 	bl	8005dc0 <readChipID>
 8006094:	4b46      	ldr	r3, [pc, #280]	; (80061b0 <main+0x304>)
 8006096:	7018      	strb	r0, [r3, #0]
  delay_ms(500);// wait for initialization
 8006098:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800609c:	f7ff fc7e 	bl	800599c <delay_ms>
	writeByteToReg(REG_MUX, positiveCh <<4 | NegativeCh); //xxxx1000 - AINp = positiveCh, AINn = NegativeCh
 80060a0:	2123      	movs	r1, #35	; 0x23
 80060a2:	4630      	mov	r0, r6
 80060a4:	f7ff fe16 	bl	8005cd4 <writeByteToReg>
  delay_us(15);
 80060a8:	200f      	movs	r0, #15
 80060aa:	f7ff fc8f 	bl	80059cc <delay_us>
  writeCMD(CMD_SYNC);    // SYNC command
 80060ae:	20fc      	movs	r0, #252	; 0xfc
 80060b0:	f7ff fdf4 	bl	8005c9c <writeCMD>
  delay_us(10);
 80060b4:	4640      	mov	r0, r8
 80060b6:	f7ff fc89 	bl	80059cc <delay_us>
  writeCMD(CMD_WAKEUP);  // WAKEUP command
 80060ba:	4620      	mov	r0, r4
 80060bc:	f7ff fdee 	bl	8005c9c <writeCMD>
  delay_us(15); // min delay: t11 = 4 * 1 / 7,68 Mhz = 0,52 micro sec
 80060c0:	200f      	movs	r0, #15
 80060c2:	f7ff fc83 	bl	80059cc <delay_us>
  waitDRDY();
 80060c6:	f7ff fe2d 	bl	8005d24 <waitDRDY>
  CS_0();
 80060ca:	4622      	mov	r2, r4
 80060cc:	4649      	mov	r1, r9
 80060ce:	4829      	ldr	r0, [pc, #164]	; (8006174 <main+0x2c8>)
 80060d0:	f7fb f9c4 	bl	800145c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, RDATACcmdbuffer ,1,50);
 80060d4:	4632      	mov	r2, r6
 80060d6:	4937      	ldr	r1, [pc, #220]	; (80061b4 <main+0x308>)
 80060d8:	2332      	movs	r3, #50	; 0x32
 80060da:	4628      	mov	r0, r5
 80060dc:	f7fc fc79 	bl	80029d2 <HAL_SPI_Transmit>
  delay_ms(25); // min delay: t6 = 50 * 1/7.68 MHz = 6.5 microseconds
 80060e0:	2019      	movs	r0, #25
 80060e2:	f7ff fc5b 	bl	800599c <delay_ms>
  ADS1256.data_startFlag = 1;
 80060e6:	f244 0308 	movw	r3, #16392	; 0x4008
  delay_us(1);
 80060ea:	4630      	mov	r0, r6
  ADS1256.data_startFlag = 1;
 80060ec:	54fe      	strb	r6, [r7, r3]
  delay_us(1);
 80060ee:	f7ff fc6d 	bl	80059cc <delay_us>
  adcBinarySemHandle = osSemaphoreCreate(osSemaphore(adcBinarySem), 1);
 80060f2:	4631      	mov	r1, r6
 80060f4:	a806      	add	r0, sp, #24
  osSemaphoreDef(adcBinarySem);
 80060f6:	e9cd 4406 	strd	r4, r4, [sp, #24]
  adcBinarySemHandle = osSemaphoreCreate(osSemaphore(adcBinarySem), 1);
 80060fa:	f7fd ff5a 	bl	8003fb2 <osSemaphoreCreate>
 80060fe:	4b2e      	ldr	r3, [pc, #184]	; (80061b8 <main+0x30c>)
  osMessageQDef(adcQueue, 16, long);
 8006100:	4d2e      	ldr	r5, [pc, #184]	; (80061bc <main+0x310>)
  adcBinarySemHandle = osSemaphoreCreate(osSemaphore(adcBinarySem), 1);
 8006102:	6018      	str	r0, [r3, #0]
  I2cBinarySemHandle = osSemaphoreCreate(osSemaphore(I2cBinarySem), 1);
 8006104:	4631      	mov	r1, r6
 8006106:	a808      	add	r0, sp, #32
  osSemaphoreDef(I2cBinarySem);
 8006108:	e9cd 4408 	strd	r4, r4, [sp, #32]
  I2cBinarySemHandle = osSemaphoreCreate(osSemaphore(I2cBinarySem), 1);
 800610c:	f7fd ff51 	bl	8003fb2 <osSemaphoreCreate>
 8006110:	4b2b      	ldr	r3, [pc, #172]	; (80061c0 <main+0x314>)
 8006112:	6018      	str	r0, [r3, #0]
  osMessageQDef(adcQueue, 16, long);
 8006114:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006118:	ae0a      	add	r6, sp, #40	; 0x28
 800611a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  adcQueueHandle = osMessageCreate(osMessageQ(adcQueue), NULL);
 800611e:	4621      	mov	r1, r4
 8006120:	4630      	mov	r0, r6
 8006122:	f7fd ff6c 	bl	8003ffe <osMessageCreate>
 8006126:	4b27      	ldr	r3, [pc, #156]	; (80061c4 <main+0x318>)
  osThreadDef(ADC_Task, ADC_Thread, osPriorityRealtime, 0, 128);
 8006128:	eb05 0709 	add.w	r7, r5, r9
  adcQueueHandle = osMessageCreate(osMessageQ(adcQueue), NULL);
 800612c:	6018      	str	r0, [r3, #0]
  osThreadDef(ADC_Task, ADC_Thread, osPriorityRealtime, 0, 128);
 800612e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8006130:	ae0e      	add	r6, sp, #56	; 0x38
 8006132:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006134:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8006138:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  ADC_TaskHandle = osThreadCreate(osThread(ADC_Task), NULL);
 800613c:	4621      	mov	r1, r4
 800613e:	a80e      	add	r0, sp, #56	; 0x38
 8006140:	f7fd ff0f 	bl	8003f62 <osThreadCreate>
 8006144:	4b20      	ldr	r3, [pc, #128]	; (80061c8 <main+0x31c>)
  osThreadDef(FFT_Task, FFT_Thread, osPriorityHigh, 0, 128);
 8006146:	352c      	adds	r5, #44	; 0x2c
  ADC_TaskHandle = osThreadCreate(osThread(ADC_Task), NULL);
 8006148:	6018      	str	r0, [r3, #0]
  osThreadDef(FFT_Task, FFT_Thread, osPriorityHigh, 0, 128);
 800614a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800614c:	ae15      	add	r6, sp, #84	; 0x54
 800614e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006150:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006154:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  FFT_TaskHandle = osThreadCreate(osThread(FFT_Task), NULL);
 8006158:	4621      	mov	r1, r4
 800615a:	a815      	add	r0, sp, #84	; 0x54
 800615c:	f7fd ff01 	bl	8003f62 <osThreadCreate>
 8006160:	4b1a      	ldr	r3, [pc, #104]	; (80061cc <main+0x320>)
 8006162:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8006164:	f7fd fef8 	bl	8003f58 <osKernelStart>
 8006168:	e7fe      	b.n	8006168 <main+0x2bc>
 800616a:	bf00      	nop
 800616c:	40023800 	.word	0x40023800
 8006170:	20004188 	.word	0x20004188
 8006174:	40020000 	.word	0x40020000
 8006178:	40020c00 	.word	0x40020c00
 800617c:	10210000 	.word	0x10210000
 8006180:	20018268 	.word	0x20018268
 8006184:	40013000 	.word	0x40013000
 8006188:	000186a0 	.word	0x000186a0
 800618c:	2000c1fc 	.word	0x2000c1fc
 8006190:	20004120 	.word	0x20004120
 8006194:	2000c208 	.word	0x2000c208
 8006198:	200041f0 	.word	0x200041f0
 800619c:	20004070 	.word	0x20004070
 80061a0:	2001c384 	.word	0x2001c384
 80061a4:	3fba7525 	.word	0x3fba7525
 80061a8:	20004078 	.word	0x20004078
 80061ac:	2001c38c 	.word	0x2001c38c
 80061b0:	20004058 	.word	0x20004058
 80061b4:	2000000c 	.word	0x2000000c
 80061b8:	200041e0 	.word	0x200041e0
 80061bc:	08006808 	.word	0x08006808
 80061c0:	2001c388 	.word	0x2001c388
 80061c4:	2000c200 	.word	0x2000c200
 80061c8:	200041ec 	.word	0x200041ec
 80061cc:	200041dc 	.word	0x200041dc
 80061d0:	40005400 	.word	0x40005400

080061d4 <I2C1_EV_IRQHandler>:
{
 80061d4:	b508      	push	{r3, lr}
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80061d6:	484e      	ldr	r0, [pc, #312]	; (8006310 <I2C1_EV_IRQHandler+0x13c>)
 80061d8:	f7fb fc1e 	bl	8001a18 <HAL_I2C_EV_IRQHandler>
    if(buffer[0] == 0x50 && buffer[1] == 0x30)
 80061dc:	494d      	ldr	r1, [pc, #308]	; (8006314 <I2C1_EV_IRQHandler+0x140>)
 80061de:	780a      	ldrb	r2, [r1, #0]
 80061e0:	2a50      	cmp	r2, #80	; 0x50
 80061e2:	460b      	mov	r3, r1
 80061e4:	d150      	bne.n	8006288 <I2C1_EV_IRQHandler+0xb4>
 80061e6:	784b      	ldrb	r3, [r1, #1]
 80061e8:	2b30      	cmp	r3, #48	; 0x30
 80061ea:	d146      	bne.n	800627a <I2C1_EV_IRQHandler+0xa6>
    	pData[9] = 123;
 80061ec:	494a      	ldr	r1, [pc, #296]	; (8006318 <I2C1_EV_IRQHandler+0x144>)
        if(HAL_I2C_Slave_Transmit_DMA(&hi2c1, pData, 10) == HAL_OK)
 80061ee:	4848      	ldr	r0, [pc, #288]	; (8006310 <I2C1_EV_IRQHandler+0x13c>)
    	pData[9] = 123;
 80061f0:	237b      	movs	r3, #123	; 0x7b
 80061f2:	724b      	strb	r3, [r1, #9]
    	pData[0] = statistic_value.Statistic_max;
 80061f4:	4b49      	ldr	r3, [pc, #292]	; (800631c <I2C1_EV_IRQHandler+0x148>)
 80061f6:	edd3 7a00 	vldr	s15, [r3]
 80061fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061fe:	ee17 2a90 	vmov	r2, s15
    	pData[1] = statistic_value.Statistic_min;
 8006202:	edd3 7a01 	vldr	s15, [r3, #4]
    	pData[0] = statistic_value.Statistic_max;
 8006206:	700a      	strb	r2, [r1, #0]
    	pData[1] = statistic_value.Statistic_min;
 8006208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800620c:	ee17 2a90 	vmov	r2, s15
    	pData[2] = statistic_value.Statistic_var;
 8006210:	edd3 7a02 	vldr	s15, [r3, #8]
    	pData[1] = statistic_value.Statistic_min;
 8006214:	704a      	strb	r2, [r1, #1]
    	pData[2] = statistic_value.Statistic_var;
 8006216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800621a:	ee17 2a90 	vmov	r2, s15
    	pData[3] = statistic_value.Statistic_rms;
 800621e:	edd3 7a03 	vldr	s15, [r3, #12]
    	pData[2] = statistic_value.Statistic_var;
 8006222:	708a      	strb	r2, [r1, #2]
    	pData[3] = statistic_value.Statistic_rms;
 8006224:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006228:	ee17 2a90 	vmov	r2, s15
    	pData[4] = statistic_value.Statistic_mean;
 800622c:	edd3 7a04 	vldr	s15, [r3, #16]
    	pData[3] = statistic_value.Statistic_rms;
 8006230:	70ca      	strb	r2, [r1, #3]
    	pData[4] = statistic_value.Statistic_mean;
 8006232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006236:	ee17 2a90 	vmov	r2, s15
    	pData[5] = statistic_value.Statistic_std;
 800623a:	edd3 7a05 	vldr	s15, [r3, #20]
    	pData[4] = statistic_value.Statistic_mean;
 800623e:	710a      	strb	r2, [r1, #4]
    	pData[5] = statistic_value.Statistic_std;
 8006240:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006244:	ee17 2a90 	vmov	r2, s15
    	pData[6] = statistic_value.Statistic_FreqOvall;
 8006248:	edd3 7a06 	vldr	s15, [r3, #24]
    	pData[5] = statistic_value.Statistic_std;
 800624c:	714a      	strb	r2, [r1, #5]
    	pData[6] = statistic_value.Statistic_FreqOvall;
 800624e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006252:	ee17 2a90 	vmov	r2, s15
    	pData[7] = statistic_value.Statistic_FreqPeak[0];
 8006256:	edd3 7a07 	vldr	s15, [r3, #28]
    	pData[6] = statistic_value.Statistic_FreqOvall;
 800625a:	718a      	strb	r2, [r1, #6]
    	pData[7] = statistic_value.Statistic_FreqPeak[0];
 800625c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006260:	ee17 2a90 	vmov	r2, s15
    	pData[8] = statistic_value.Statistic_FreqPeak[1];
 8006264:	edd3 7a08 	vldr	s15, [r3, #32]
    	pData[7] = statistic_value.Statistic_FreqPeak[0];
 8006268:	71ca      	strb	r2, [r1, #7]
    	pData[8] = statistic_value.Statistic_FreqPeak[1];
 800626a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
        if(HAL_I2C_Slave_Transmit_DMA(&hi2c1, pData, 10) == HAL_OK)
 800626e:	220a      	movs	r2, #10
    	pData[8] = statistic_value.Statistic_FreqPeak[1];
 8006270:	ee17 3a90 	vmov	r3, s15
 8006274:	720b      	strb	r3, [r1, #8]
        if(HAL_I2C_Slave_Transmit_DMA(&hi2c1, pData, 10) == HAL_OK)
 8006276:	f7fb f9e9 	bl	800164c <HAL_I2C_Slave_Transmit_DMA>
    HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 2);
 800627a:	2202      	movs	r2, #2
 800627c:	4925      	ldr	r1, [pc, #148]	; (8006314 <I2C1_EV_IRQHandler+0x140>)
 800627e:	4824      	ldr	r0, [pc, #144]	; (8006310 <I2C1_EV_IRQHandler+0x13c>)
}
 8006280:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 2);
 8006284:	f7fb b9a6 	b.w	80015d4 <HAL_I2C_Slave_Receive_IT>
    	  switch(buffer[0])
 8006288:	3a01      	subs	r2, #1
 800628a:	2a0d      	cmp	r2, #13
 800628c:	d8f5      	bhi.n	800627a <I2C1_EV_IRQHandler+0xa6>
 800628e:	e8df f002 	tbb	[pc, r2]
 8006292:	0b07      	.short	0x0b07
 8006294:	1b17130f 	.word	0x1b17130f
 8006298:	2b27231f 	.word	0x2b27231f
 800629c:	3b37332f 	.word	0x3b37332f
				  freq_settingValue.freq1 = buffer[1];
 80062a0:	785a      	ldrb	r2, [r3, #1]
 80062a2:	4b1f      	ldr	r3, [pc, #124]	; (8006320 <I2C1_EV_IRQHandler+0x14c>)
 80062a4:	601a      	str	r2, [r3, #0]
				  break;
 80062a6:	e7e8      	b.n	800627a <I2C1_EV_IRQHandler+0xa6>
				  freq_settingValue.freq2 = buffer[1];
 80062a8:	785a      	ldrb	r2, [r3, #1]
 80062aa:	4b1d      	ldr	r3, [pc, #116]	; (8006320 <I2C1_EV_IRQHandler+0x14c>)
 80062ac:	605a      	str	r2, [r3, #4]
				  break;
 80062ae:	e7e4      	b.n	800627a <I2C1_EV_IRQHandler+0xa6>
				  freq_settingValue.freq3 = buffer[1];
 80062b0:	785a      	ldrb	r2, [r3, #1]
 80062b2:	4b1b      	ldr	r3, [pc, #108]	; (8006320 <I2C1_EV_IRQHandler+0x14c>)
 80062b4:	609a      	str	r2, [r3, #8]
				  break;
 80062b6:	e7e0      	b.n	800627a <I2C1_EV_IRQHandler+0xa6>
				  freq_settingValue.freq4 = buffer[1];
 80062b8:	785a      	ldrb	r2, [r3, #1]
 80062ba:	4b19      	ldr	r3, [pc, #100]	; (8006320 <I2C1_EV_IRQHandler+0x14c>)
 80062bc:	60da      	str	r2, [r3, #12]
				  break;
 80062be:	e7dc      	b.n	800627a <I2C1_EV_IRQHandler+0xa6>
				  freq_settingValue.freq5 = buffer[1];
 80062c0:	785a      	ldrb	r2, [r3, #1]
 80062c2:	4b17      	ldr	r3, [pc, #92]	; (8006320 <I2C1_EV_IRQHandler+0x14c>)
 80062c4:	611a      	str	r2, [r3, #16]
				  break;
 80062c6:	e7d8      	b.n	800627a <I2C1_EV_IRQHandler+0xa6>
				  freq_settingValue.freq6 = buffer[1];
 80062c8:	785a      	ldrb	r2, [r3, #1]
 80062ca:	4b15      	ldr	r3, [pc, #84]	; (8006320 <I2C1_EV_IRQHandler+0x14c>)
 80062cc:	615a      	str	r2, [r3, #20]
				  break;
 80062ce:	e7d4      	b.n	800627a <I2C1_EV_IRQHandler+0xa6>
				  freq_settingValue.freq7 = buffer[1];
 80062d0:	785a      	ldrb	r2, [r3, #1]
 80062d2:	4b13      	ldr	r3, [pc, #76]	; (8006320 <I2C1_EV_IRQHandler+0x14c>)
 80062d4:	619a      	str	r2, [r3, #24]
				  break;
 80062d6:	e7d0      	b.n	800627a <I2C1_EV_IRQHandler+0xa6>
				  freq_settingValue.freq8 = buffer[1];
 80062d8:	785a      	ldrb	r2, [r3, #1]
 80062da:	4b11      	ldr	r3, [pc, #68]	; (8006320 <I2C1_EV_IRQHandler+0x14c>)
 80062dc:	61da      	str	r2, [r3, #28]
				  break;
 80062de:	e7cc      	b.n	800627a <I2C1_EV_IRQHandler+0xa6>
				  freq_settingValue.freq9 = buffer[1];
 80062e0:	785a      	ldrb	r2, [r3, #1]
 80062e2:	4b0f      	ldr	r3, [pc, #60]	; (8006320 <I2C1_EV_IRQHandler+0x14c>)
 80062e4:	621a      	str	r2, [r3, #32]
				  break;
 80062e6:	e7c8      	b.n	800627a <I2C1_EV_IRQHandler+0xa6>
				  freq_settingValue.freq10 = buffer[1];
 80062e8:	785a      	ldrb	r2, [r3, #1]
 80062ea:	4b0d      	ldr	r3, [pc, #52]	; (8006320 <I2C1_EV_IRQHandler+0x14c>)
 80062ec:	625a      	str	r2, [r3, #36]	; 0x24
				  break;
 80062ee:	e7c4      	b.n	800627a <I2C1_EV_IRQHandler+0xa6>
				  freq_settingValue.freq11 = buffer[1];
 80062f0:	785a      	ldrb	r2, [r3, #1]
 80062f2:	4b0b      	ldr	r3, [pc, #44]	; (8006320 <I2C1_EV_IRQHandler+0x14c>)
 80062f4:	629a      	str	r2, [r3, #40]	; 0x28
				  break;
 80062f6:	e7c0      	b.n	800627a <I2C1_EV_IRQHandler+0xa6>
				  freq_settingValue.freq12 = buffer[1];
 80062f8:	785a      	ldrb	r2, [r3, #1]
 80062fa:	4b09      	ldr	r3, [pc, #36]	; (8006320 <I2C1_EV_IRQHandler+0x14c>)
 80062fc:	62da      	str	r2, [r3, #44]	; 0x2c
				  break;
 80062fe:	e7bc      	b.n	800627a <I2C1_EV_IRQHandler+0xa6>
				  freq_settingValue.freq13 = buffer[1];
 8006300:	785a      	ldrb	r2, [r3, #1]
 8006302:	4b07      	ldr	r3, [pc, #28]	; (8006320 <I2C1_EV_IRQHandler+0x14c>)
 8006304:	631a      	str	r2, [r3, #48]	; 0x30
				  break;
 8006306:	e7b8      	b.n	800627a <I2C1_EV_IRQHandler+0xa6>
				  freq_settingValue.freq14 = buffer[1];
 8006308:	785a      	ldrb	r2, [r3, #1]
 800630a:	4b05      	ldr	r3, [pc, #20]	; (8006320 <I2C1_EV_IRQHandler+0x14c>)
 800630c:	635a      	str	r2, [r3, #52]	; 0x34
				  break;
 800630e:	e7b4      	b.n	800627a <I2C1_EV_IRQHandler+0xa6>
 8006310:	20004188 	.word	0x20004188
 8006314:	2000c1fc 	.word	0x2000c1fc
 8006318:	20000018 	.word	0x20000018
 800631c:	200040b0 	.word	0x200040b0
 8006320:	20004078 	.word	0x20004078

08006324 <HAL_GPIO_EXTI_Callback>:
	if(GPIO_Pin == GPIO_PIN_3 && id == 3 && ADS1256.data_startFlag == 1 && I2cC.i2cRecive == 0)
 8006324:	2808      	cmp	r0, #8
{
 8006326:	b507      	push	{r0, r1, r2, lr}
	if(GPIO_Pin == GPIO_PIN_3 && id == 3 && ADS1256.data_startFlag == 1 && I2cC.i2cRecive == 0)
 8006328:	d11e      	bne.n	8006368 <HAL_GPIO_EXTI_Callback+0x44>
 800632a:	4b11      	ldr	r3, [pc, #68]	; (8006370 <HAL_GPIO_EXTI_Callback+0x4c>)
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	2b03      	cmp	r3, #3
 8006330:	d11a      	bne.n	8006368 <HAL_GPIO_EXTI_Callback+0x44>
 8006332:	4a10      	ldr	r2, [pc, #64]	; (8006374 <HAL_GPIO_EXTI_Callback+0x50>)
 8006334:	f244 0308 	movw	r3, #16392	; 0x4008
 8006338:	5cd3      	ldrb	r3, [r2, r3]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d114      	bne.n	8006368 <HAL_GPIO_EXTI_Callback+0x44>
 800633e:	4b0e      	ldr	r3, [pc, #56]	; (8006378 <HAL_GPIO_EXTI_Callback+0x54>)
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	b98b      	cbnz	r3, 8006368 <HAL_GPIO_EXTI_Callback+0x44>
		xHigherPriorityTaskWoken = pdFALSE;
 8006344:	a902      	add	r1, sp, #8
 8006346:	f841 3d04 	str.w	r3, [r1, #-4]!
		xSemaphoreGiveFromISR(adcBinarySemHandle,&xHigherPriorityTaskWoken);
 800634a:	4b0c      	ldr	r3, [pc, #48]	; (800637c <HAL_GPIO_EXTI_Callback+0x58>)
 800634c:	6818      	ldr	r0, [r3, #0]
 800634e:	f7fe f89f 	bl	8004490 <xQueueGiveFromISR>
		if(xHigherPriorityTaskWoken == pdTRUE)
 8006352:	9b01      	ldr	r3, [sp, #4]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d107      	bne.n	8006368 <HAL_GPIO_EXTI_Callback+0x44>
			portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 8006358:	4b09      	ldr	r3, [pc, #36]	; (8006380 <HAL_GPIO_EXTI_Callback+0x5c>)
 800635a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800635e:	601a      	str	r2, [r3, #0]
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	f3bf 8f6f 	isb	sy
}
 8006368:	b003      	add	sp, #12
 800636a:	f85d fb04 	ldr.w	pc, [sp], #4
 800636e:	bf00      	nop
 8006370:	20004058 	.word	0x20004058
 8006374:	200041f0 	.word	0x200041f0
 8006378:	200182c0 	.word	0x200182c0
 800637c:	200041e0 	.word	0x200041e0
 8006380:	e000ed04 	.word	0xe000ed04

08006384 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006384:	4770      	bx	lr
	...

08006388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006388:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800638a:	4b0e      	ldr	r3, [pc, #56]	; (80063c4 <HAL_MspInit+0x3c>)
 800638c:	2200      	movs	r2, #0
 800638e:	9200      	str	r2, [sp, #0]
 8006390:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8006392:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8006396:	6459      	str	r1, [r3, #68]	; 0x44
 8006398:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800639a:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800639e:	9100      	str	r1, [sp, #0]
 80063a0:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80063a2:	9201      	str	r2, [sp, #4]
 80063a4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80063a6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80063aa:	6419      	str	r1, [r3, #64]	; 0x40
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063b2:	9301      	str	r3, [sp, #4]
 80063b4:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80063b6:	210f      	movs	r1, #15
 80063b8:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80063bc:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80063be:	f7fa bd67 	b.w	8000e90 <HAL_NVIC_SetPriority>
 80063c2:	bf00      	nop
 80063c4:	40023800 	.word	0x40023800

080063c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80063c8:	b570      	push	{r4, r5, r6, lr}
 80063ca:	4606      	mov	r6, r0
 80063cc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063ce:	2214      	movs	r2, #20
 80063d0:	2100      	movs	r1, #0
 80063d2:	a803      	add	r0, sp, #12
 80063d4:	f000 f9ad 	bl	8006732 <memset>
  if(hi2c->Instance==I2C1)
 80063d8:	6832      	ldr	r2, [r6, #0]
 80063da:	4b38      	ldr	r3, [pc, #224]	; (80064bc <HAL_I2C_MspInit+0xf4>)
 80063dc:	429a      	cmp	r2, r3
 80063de:	d16b      	bne.n	80064b8 <HAL_I2C_MspInit+0xf0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063e0:	4c37      	ldr	r4, [pc, #220]	; (80064c0 <HAL_I2C_MspInit+0xf8>)
 80063e2:	2500      	movs	r5, #0
 80063e4:	9501      	str	r5, [sp, #4]
 80063e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80063e8:	f043 0302 	orr.w	r3, r3, #2
 80063ec:	6323      	str	r3, [r4, #48]	; 0x30
 80063ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80063f0:	f003 0302 	and.w	r3, r3, #2
 80063f4:	9301      	str	r3, [sp, #4]
 80063f6:	9b01      	ldr	r3, [sp, #4]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80063f8:	20c0      	movs	r0, #192	; 0xc0
 80063fa:	2312      	movs	r3, #18
 80063fc:	e9cd 0303 	strd	r0, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006400:	f04f 0c01 	mov.w	ip, #1
 8006404:	2303      	movs	r3, #3
 8006406:	e9cd c305 	strd	ip, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800640a:	482e      	ldr	r0, [pc, #184]	; (80064c4 <HAL_I2C_MspInit+0xfc>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800640c:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800640e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006410:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006412:	f7fa ff3d 	bl	8001290 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006416:	9502      	str	r5, [sp, #8]
 8006418:	6c23      	ldr	r3, [r4, #64]	; 0x40
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800641a:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 80064d4 <HAL_I2C_MspInit+0x10c>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800641e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006422:	6423      	str	r3, [r4, #64]	; 0x40
 8006424:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8006426:	4c28      	ldr	r4, [pc, #160]	; (80064c8 <HAL_I2C_MspInit+0x100>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800642c:	9302      	str	r3, [sp, #8]
 800642e:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006430:	61a5      	str	r5, [r4, #24]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8006432:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006436:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800643a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800643e:	e9c4 3504 	strd	r3, r5, [r4, #16]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006442:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006446:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800644a:	4620      	mov	r0, r4
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800644c:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006450:	e9c4 2307 	strd	r2, r3, [r4, #28]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006454:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8006456:	f7fa fd89 	bl	8000f6c <HAL_DMA_Init>
 800645a:	b108      	cbz	r0, 8006460 <HAL_I2C_MspInit+0x98>
    {
      Error_Handler();
 800645c:	f7ff ff92 	bl	8006384 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8006460:	63b4      	str	r4, [r6, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8006462:	4a1a      	ldr	r2, [pc, #104]	; (80064cc <HAL_I2C_MspInit+0x104>)
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8006464:	63a6      	str	r6, [r4, #56]	; 0x38
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8006466:	4c1a      	ldr	r4, [pc, #104]	; (80064d0 <HAL_I2C_MspInit+0x108>)
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8006468:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800646c:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006470:	2140      	movs	r1, #64	; 0x40
 8006472:	2300      	movs	r3, #0
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006474:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8006478:	4620      	mov	r0, r4
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800647a:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800647e:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8006482:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006486:	e9c4 3308 	strd	r3, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800648a:	f7fa fd6f 	bl	8000f6c <HAL_DMA_Init>
 800648e:	b108      	cbz	r0, 8006494 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8006490:	f7ff ff78 	bl	8006384 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8006494:	2200      	movs	r2, #0
 8006496:	2105      	movs	r1, #5
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8006498:	6374      	str	r4, [r6, #52]	; 0x34
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800649a:	201f      	movs	r0, #31
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800649c:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800649e:	f7fa fcf7 	bl	8000e90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80064a2:	201f      	movs	r0, #31
 80064a4:	f7fa fd28 	bl	8000ef8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80064a8:	2020      	movs	r0, #32
 80064aa:	2200      	movs	r2, #0
 80064ac:	2105      	movs	r1, #5
 80064ae:	f7fa fcef 	bl	8000e90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80064b2:	2020      	movs	r0, #32
 80064b4:	f7fa fd20 	bl	8000ef8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80064b8:	b008      	add	sp, #32
 80064ba:	bd70      	pop	{r4, r5, r6, pc}
 80064bc:	40005400 	.word	0x40005400
 80064c0:	40023800 	.word	0x40023800
 80064c4:	40020400 	.word	0x40020400
 80064c8:	20010208 	.word	0x20010208
 80064cc:	400260a0 	.word	0x400260a0
 80064d0:	20004128 	.word	0x20004128
 80064d4:	40026010 	.word	0x40026010

080064d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80064d8:	b570      	push	{r4, r5, r6, lr}
 80064da:	4606      	mov	r6, r0
 80064dc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064de:	2214      	movs	r2, #20
 80064e0:	2100      	movs	r1, #0
 80064e2:	a803      	add	r0, sp, #12
 80064e4:	f000 f925 	bl	8006732 <memset>
  if(hspi->Instance==SPI1)
 80064e8:	6832      	ldr	r2, [r6, #0]
 80064ea:	4b2d      	ldr	r3, [pc, #180]	; (80065a0 <HAL_SPI_MspInit+0xc8>)
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d155      	bne.n	800659c <HAL_SPI_MspInit+0xc4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80064f0:	2500      	movs	r5, #0
 80064f2:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80064f6:	9501      	str	r5, [sp, #4]
 80064f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80064fe:	645a      	str	r2, [r3, #68]	; 0x44
 8006500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006502:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006506:	9201      	str	r2, [sp, #4]
 8006508:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800650a:	9502      	str	r5, [sp, #8]
 800650c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800650e:	f042 0201 	orr.w	r2, r2, #1
 8006512:	631a      	str	r2, [r3, #48]	; 0x30
 8006514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	9302      	str	r3, [sp, #8]
 800651c:	9b02      	ldr	r3, [sp, #8]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800651e:	20e0      	movs	r0, #224	; 0xe0
 8006520:	2302      	movs	r3, #2
 8006522:	e9cd 0303 	strd	r0, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006526:	2403      	movs	r4, #3
 8006528:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800652a:	481e      	ldr	r0, [pc, #120]	; (80065a4 <HAL_SPI_MspInit+0xcc>)
 800652c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800652e:	e9cd 4306 	strd	r4, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006532:	f7fa fead 	bl	8001290 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8006536:	4c1c      	ldr	r4, [pc, #112]	; (80065a8 <HAL_SPI_MspInit+0xd0>)
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8006538:	f8df c078 	ldr.w	ip, [pc, #120]	; 80065b4 <HAL_SPI_MspInit+0xdc>
 800653c:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8006540:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8006544:	4620      	mov	r0, r4
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006546:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800654a:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800654e:	e9c4 3504 	strd	r3, r5, [r4, #16]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8006552:	e9c4 5506 	strd	r5, r5, [r4, #24]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006556:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800655a:	f7fa fd07 	bl	8000f6c <HAL_DMA_Init>
 800655e:	b108      	cbz	r0, 8006564 <HAL_SPI_MspInit+0x8c>
    {
      Error_Handler();
 8006560:	f7ff ff10 	bl	8006384 <Error_Handler>

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8006564:	4a11      	ldr	r2, [pc, #68]	; (80065ac <HAL_SPI_MspInit+0xd4>)
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8006566:	64f4      	str	r4, [r6, #76]	; 0x4c
 8006568:	63a6      	str	r6, [r4, #56]	; 0x38
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800656a:	4c11      	ldr	r4, [pc, #68]	; (80065b0 <HAL_SPI_MspInit+0xd8>)
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800656c:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8006570:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006574:	2140      	movs	r1, #64	; 0x40
 8006576:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006578:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800657c:	4620      	mov	r0, r4
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800657e:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006582:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8006586:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800658a:	e9c4 3308 	strd	r3, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800658e:	f7fa fced 	bl	8000f6c <HAL_DMA_Init>
 8006592:	b108      	cbz	r0, 8006598 <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 8006594:	f7ff fef6 	bl	8006384 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8006598:	64b4      	str	r4, [r6, #72]	; 0x48
 800659a:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800659c:	b008      	add	sp, #32
 800659e:	bd70      	pop	{r4, r5, r6, pc}
 80065a0:	40013000 	.word	0x40013000
 80065a4:	40020000 	.word	0x40020000
 80065a8:	200182c4 	.word	0x200182c4
 80065ac:	40026458 	.word	0x40026458
 80065b0:	2001c324 	.word	0x2001c324
 80065b4:	40026410 	.word	0x40026410

080065b8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80065b8:	4770      	bx	lr

080065ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80065ba:	e7fe      	b.n	80065ba <HardFault_Handler>

080065bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80065bc:	e7fe      	b.n	80065bc <MemManage_Handler>

080065be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80065be:	e7fe      	b.n	80065be <BusFault_Handler>

080065c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80065c0:	e7fe      	b.n	80065c0 <UsageFault_Handler>

080065c2 <DebugMon_Handler>:
 80065c2:	4770      	bx	lr

080065c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80065c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80065c6:	f7fa fc3f 	bl	8000e48 <HAL_IncTick>
  osSystickHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80065ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  osSystickHandler();
 80065ce:	f7fd bd28 	b.w	8004022 <osSystickHandler>

080065d2 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80065d2:	2008      	movs	r0, #8
 80065d4:	f7fa bf4e 	b.w	8001474 <HAL_GPIO_EXTI_IRQHandler>

080065d8 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80065d8:	4801      	ldr	r0, [pc, #4]	; (80065e0 <DMA1_Stream0_IRQHandler+0x8>)
 80065da:	f7fa bd95 	b.w	8001108 <HAL_DMA_IRQHandler>
 80065de:	bf00      	nop
 80065e0:	20010208 	.word	0x20010208

080065e4 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80065e4:	4801      	ldr	r0, [pc, #4]	; (80065ec <DMA1_Stream6_IRQHandler+0x8>)
 80065e6:	f7fa bd8f 	b.w	8001108 <HAL_DMA_IRQHandler>
 80065ea:	bf00      	nop
 80065ec:	20004128 	.word	0x20004128

080065f0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80065f0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80065f2:	4c05      	ldr	r4, [pc, #20]	; (8006608 <I2C1_ER_IRQHandler+0x18>)
 80065f4:	4620      	mov	r0, r4
 80065f6:	f7fb fe2f 	bl	8002258 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */
  HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 2);
 80065fa:	4620      	mov	r0, r4
 80065fc:	2202      	movs	r2, #2
 80065fe:	4903      	ldr	r1, [pc, #12]	; (800660c <I2C1_ER_IRQHandler+0x1c>)
  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8006600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 2);
 8006604:	f7fa bfe6 	b.w	80015d4 <HAL_I2C_Slave_Receive_IT>
 8006608:	20004188 	.word	0x20004188
 800660c:	2000c1fc 	.word	0x2000c1fc

08006610 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8006610:	4801      	ldr	r0, [pc, #4]	; (8006618 <DMA2_Stream0_IRQHandler+0x8>)
 8006612:	f7fa bd79 	b.w	8001108 <HAL_DMA_IRQHandler>
 8006616:	bf00      	nop
 8006618:	200182c4 	.word	0x200182c4

0800661c <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800661c:	4801      	ldr	r0, [pc, #4]	; (8006624 <DMA2_Stream3_IRQHandler+0x8>)
 800661e:	f7fa bd73 	b.w	8001108 <HAL_DMA_IRQHandler>
 8006622:	bf00      	nop
 8006624:	2001c324 	.word	0x2001c324

08006628 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006628:	490f      	ldr	r1, [pc, #60]	; (8006668 <SystemInit+0x40>)
 800662a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800662e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006636:	4b0d      	ldr	r3, [pc, #52]	; (800666c <SystemInit+0x44>)
 8006638:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800663a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800663c:	f042 0201 	orr.w	r2, r2, #1
 8006640:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8006642:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800664a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800664e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006650:	4a07      	ldr	r2, [pc, #28]	; (8006670 <SystemInit+0x48>)
 8006652:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800665a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800665c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800665e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006662:	608b      	str	r3, [r1, #8]
#endif
}
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	e000ed00 	.word	0xe000ed00
 800666c:	40023800 	.word	0x40023800
 8006670:	24003010 	.word	0x24003010

08006674 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006674:	f8df d034 	ldr.w	sp, [pc, #52]	; 80066ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006678:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800667a:	e003      	b.n	8006684 <LoopCopyDataInit>

0800667c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800667c:	4b0c      	ldr	r3, [pc, #48]	; (80066b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800667e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006680:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006682:	3104      	adds	r1, #4

08006684 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006684:	480b      	ldr	r0, [pc, #44]	; (80066b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006686:	4b0c      	ldr	r3, [pc, #48]	; (80066b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006688:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800668a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800668c:	d3f6      	bcc.n	800667c <CopyDataInit>
  ldr  r2, =_sbss
 800668e:	4a0b      	ldr	r2, [pc, #44]	; (80066bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006690:	e002      	b.n	8006698 <LoopFillZerobss>

08006692 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006692:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006694:	f842 3b04 	str.w	r3, [r2], #4

08006698 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006698:	4b09      	ldr	r3, [pc, #36]	; (80066c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800669a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800669c:	d3f9      	bcc.n	8006692 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800669e:	f7ff ffc3 	bl	8006628 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80066a2:	f000 f817 	bl	80066d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80066a6:	f7ff fc01 	bl	8005eac <main>
  bx  lr    
 80066aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80066ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80066b0:	08010890 	.word	0x08010890
  ldr  r0, =_sdata
 80066b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80066b8:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 80066bc:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 80066c0:	2001c390 	.word	0x2001c390

080066c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80066c4:	e7fe      	b.n	80066c4 <ADC_IRQHandler>
	...

080066c8 <__errno>:
 80066c8:	4b01      	ldr	r3, [pc, #4]	; (80066d0 <__errno+0x8>)
 80066ca:	6818      	ldr	r0, [r3, #0]
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	2000002c 	.word	0x2000002c

080066d4 <__libc_init_array>:
 80066d4:	b570      	push	{r4, r5, r6, lr}
 80066d6:	4e0d      	ldr	r6, [pc, #52]	; (800670c <__libc_init_array+0x38>)
 80066d8:	4c0d      	ldr	r4, [pc, #52]	; (8006710 <__libc_init_array+0x3c>)
 80066da:	1ba4      	subs	r4, r4, r6
 80066dc:	10a4      	asrs	r4, r4, #2
 80066de:	2500      	movs	r5, #0
 80066e0:	42a5      	cmp	r5, r4
 80066e2:	d109      	bne.n	80066f8 <__libc_init_array+0x24>
 80066e4:	4e0b      	ldr	r6, [pc, #44]	; (8006714 <__libc_init_array+0x40>)
 80066e6:	4c0c      	ldr	r4, [pc, #48]	; (8006718 <__libc_init_array+0x44>)
 80066e8:	f000 f882 	bl	80067f0 <_init>
 80066ec:	1ba4      	subs	r4, r4, r6
 80066ee:	10a4      	asrs	r4, r4, #2
 80066f0:	2500      	movs	r5, #0
 80066f2:	42a5      	cmp	r5, r4
 80066f4:	d105      	bne.n	8006702 <__libc_init_array+0x2e>
 80066f6:	bd70      	pop	{r4, r5, r6, pc}
 80066f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80066fc:	4798      	blx	r3
 80066fe:	3501      	adds	r5, #1
 8006700:	e7ee      	b.n	80066e0 <__libc_init_array+0xc>
 8006702:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006706:	4798      	blx	r3
 8006708:	3501      	adds	r5, #1
 800670a:	e7f2      	b.n	80066f2 <__libc_init_array+0x1e>
 800670c:	08010888 	.word	0x08010888
 8006710:	08010888 	.word	0x08010888
 8006714:	08010888 	.word	0x08010888
 8006718:	0801088c 	.word	0x0801088c

0800671c <memcpy>:
 800671c:	b510      	push	{r4, lr}
 800671e:	1e43      	subs	r3, r0, #1
 8006720:	440a      	add	r2, r1
 8006722:	4291      	cmp	r1, r2
 8006724:	d100      	bne.n	8006728 <memcpy+0xc>
 8006726:	bd10      	pop	{r4, pc}
 8006728:	f811 4b01 	ldrb.w	r4, [r1], #1
 800672c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006730:	e7f7      	b.n	8006722 <memcpy+0x6>

08006732 <memset>:
 8006732:	4402      	add	r2, r0
 8006734:	4603      	mov	r3, r0
 8006736:	4293      	cmp	r3, r2
 8006738:	d100      	bne.n	800673c <memset+0xa>
 800673a:	4770      	bx	lr
 800673c:	f803 1b01 	strb.w	r1, [r3], #1
 8006740:	e7f9      	b.n	8006736 <memset+0x4>
	...

08006744 <sqrtf>:
 8006744:	b510      	push	{r4, lr}
 8006746:	ed2d 8b02 	vpush	{d8}
 800674a:	b08a      	sub	sp, #40	; 0x28
 800674c:	eeb0 8a40 	vmov.f32	s16, s0
 8006750:	f000 f848 	bl	80067e4 <__ieee754_sqrtf>
 8006754:	4b21      	ldr	r3, [pc, #132]	; (80067dc <sqrtf+0x98>)
 8006756:	f993 4000 	ldrsb.w	r4, [r3]
 800675a:	1c63      	adds	r3, r4, #1
 800675c:	d02c      	beq.n	80067b8 <sqrtf+0x74>
 800675e:	eeb4 8a48 	vcmp.f32	s16, s16
 8006762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006766:	d627      	bvs.n	80067b8 <sqrtf+0x74>
 8006768:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800676c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006770:	d522      	bpl.n	80067b8 <sqrtf+0x74>
 8006772:	2301      	movs	r3, #1
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	4b1a      	ldr	r3, [pc, #104]	; (80067e0 <sqrtf+0x9c>)
 8006778:	9301      	str	r3, [sp, #4]
 800677a:	ee18 0a10 	vmov	r0, s16
 800677e:	2300      	movs	r3, #0
 8006780:	9308      	str	r3, [sp, #32]
 8006782:	f7f9 fee9 	bl	8000558 <__aeabi_f2d>
 8006786:	2200      	movs	r2, #0
 8006788:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800678c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006790:	2300      	movs	r3, #0
 8006792:	b9ac      	cbnz	r4, 80067c0 <sqrtf+0x7c>
 8006794:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006798:	4668      	mov	r0, sp
 800679a:	f000 f826 	bl	80067ea <matherr>
 800679e:	b1b8      	cbz	r0, 80067d0 <sqrtf+0x8c>
 80067a0:	9b08      	ldr	r3, [sp, #32]
 80067a2:	b11b      	cbz	r3, 80067ac <sqrtf+0x68>
 80067a4:	f7ff ff90 	bl	80066c8 <__errno>
 80067a8:	9b08      	ldr	r3, [sp, #32]
 80067aa:	6003      	str	r3, [r0, #0]
 80067ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067b0:	f7fa f93c 	bl	8000a2c <__aeabi_d2f>
 80067b4:	ee00 0a10 	vmov	s0, r0
 80067b8:	b00a      	add	sp, #40	; 0x28
 80067ba:	ecbd 8b02 	vpop	{d8}
 80067be:	bd10      	pop	{r4, pc}
 80067c0:	4610      	mov	r0, r2
 80067c2:	4619      	mov	r1, r3
 80067c4:	f7fa f84a 	bl	800085c <__aeabi_ddiv>
 80067c8:	2c02      	cmp	r4, #2
 80067ca:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80067ce:	d1e3      	bne.n	8006798 <sqrtf+0x54>
 80067d0:	f7ff ff7a 	bl	80066c8 <__errno>
 80067d4:	2321      	movs	r3, #33	; 0x21
 80067d6:	6003      	str	r3, [r0, #0]
 80067d8:	e7e2      	b.n	80067a0 <sqrtf+0x5c>
 80067da:	bf00      	nop
 80067dc:	20000090 	.word	0x20000090
 80067e0:	08010878 	.word	0x08010878

080067e4 <__ieee754_sqrtf>:
 80067e4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80067e8:	4770      	bx	lr

080067ea <matherr>:
 80067ea:	2000      	movs	r0, #0
 80067ec:	4770      	bx	lr
	...

080067f0 <_init>:
 80067f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067f2:	bf00      	nop
 80067f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067f6:	bc08      	pop	{r3}
 80067f8:	469e      	mov	lr, r3
 80067fa:	4770      	bx	lr

080067fc <_fini>:
 80067fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067fe:	bf00      	nop
 8006800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006802:	bc08      	pop	{r3}
 8006804:	469e      	mov	lr, r3
 8006806:	4770      	bx	lr
