
Differential-Continous_ISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dd0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003f58  08003f58  00013f58  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003f80  08003f80  00013f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003f88  08003f88  00013f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003f8c  08003f8c  00013f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000000  08003f90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
  8 .bss          000042cc  20000084  20000084  00020084  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20004350  20004350  00020084  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 11 .debug_info   000157e5  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003059  00000000  00000000  00035899  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000a2c7  00000000  00000000  000388f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c48  00000000  00000000  00042bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001188  00000000  00000000  00043808  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020f3a  00000000  00000000  00044990  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cbcc  00000000  00000000  000658ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cac3d  00000000  00000000  00072496  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013d0d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002768  00000000  00000000  0013d150  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000084 	.word	0x20000084
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003f40 	.word	0x08003f40

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000088 	.word	0x20000088
 80001c4:	08003f40 	.word	0x08003f40

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b972 	b.w	8000d00 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9e08      	ldr	r6, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	4688      	mov	r8, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d14b      	bne.n	8000ada <__udivmoddi4+0xa6>
 8000a42:	428a      	cmp	r2, r1
 8000a44:	4615      	mov	r5, r2
 8000a46:	d967      	bls.n	8000b18 <__udivmoddi4+0xe4>
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	b14a      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a4e:	f1c2 0720 	rsb	r7, r2, #32
 8000a52:	fa01 f302 	lsl.w	r3, r1, r2
 8000a56:	fa20 f707 	lsr.w	r7, r0, r7
 8000a5a:	4095      	lsls	r5, r2
 8000a5c:	ea47 0803 	orr.w	r8, r7, r3
 8000a60:	4094      	lsls	r4, r2
 8000a62:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a66:	0c23      	lsrs	r3, r4, #16
 8000a68:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a6c:	fa1f fc85 	uxth.w	ip, r5
 8000a70:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a74:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a78:	fb07 f10c 	mul.w	r1, r7, ip
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	d909      	bls.n	8000a94 <__udivmoddi4+0x60>
 8000a80:	18eb      	adds	r3, r5, r3
 8000a82:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a86:	f080 811b 	bcs.w	8000cc0 <__udivmoddi4+0x28c>
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	f240 8118 	bls.w	8000cc0 <__udivmoddi4+0x28c>
 8000a90:	3f02      	subs	r7, #2
 8000a92:	442b      	add	r3, r5
 8000a94:	1a5b      	subs	r3, r3, r1
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000aa0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aa8:	45a4      	cmp	ip, r4
 8000aaa:	d909      	bls.n	8000ac0 <__udivmoddi4+0x8c>
 8000aac:	192c      	adds	r4, r5, r4
 8000aae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab2:	f080 8107 	bcs.w	8000cc4 <__udivmoddi4+0x290>
 8000ab6:	45a4      	cmp	ip, r4
 8000ab8:	f240 8104 	bls.w	8000cc4 <__udivmoddi4+0x290>
 8000abc:	3802      	subs	r0, #2
 8000abe:	442c      	add	r4, r5
 8000ac0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ac4:	eba4 040c 	sub.w	r4, r4, ip
 8000ac8:	2700      	movs	r7, #0
 8000aca:	b11e      	cbz	r6, 8000ad4 <__udivmoddi4+0xa0>
 8000acc:	40d4      	lsrs	r4, r2
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e9c6 4300 	strd	r4, r3, [r6]
 8000ad4:	4639      	mov	r1, r7
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d909      	bls.n	8000af2 <__udivmoddi4+0xbe>
 8000ade:	2e00      	cmp	r6, #0
 8000ae0:	f000 80eb 	beq.w	8000cba <__udivmoddi4+0x286>
 8000ae4:	2700      	movs	r7, #0
 8000ae6:	e9c6 0100 	strd	r0, r1, [r6]
 8000aea:	4638      	mov	r0, r7
 8000aec:	4639      	mov	r1, r7
 8000aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af2:	fab3 f783 	clz	r7, r3
 8000af6:	2f00      	cmp	r7, #0
 8000af8:	d147      	bne.n	8000b8a <__udivmoddi4+0x156>
 8000afa:	428b      	cmp	r3, r1
 8000afc:	d302      	bcc.n	8000b04 <__udivmoddi4+0xd0>
 8000afe:	4282      	cmp	r2, r0
 8000b00:	f200 80fa 	bhi.w	8000cf8 <__udivmoddi4+0x2c4>
 8000b04:	1a84      	subs	r4, r0, r2
 8000b06:	eb61 0303 	sbc.w	r3, r1, r3
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	4698      	mov	r8, r3
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d0e0      	beq.n	8000ad4 <__udivmoddi4+0xa0>
 8000b12:	e9c6 4800 	strd	r4, r8, [r6]
 8000b16:	e7dd      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000b18:	b902      	cbnz	r2, 8000b1c <__udivmoddi4+0xe8>
 8000b1a:	deff      	udf	#255	; 0xff
 8000b1c:	fab2 f282 	clz	r2, r2
 8000b20:	2a00      	cmp	r2, #0
 8000b22:	f040 808f 	bne.w	8000c44 <__udivmoddi4+0x210>
 8000b26:	1b49      	subs	r1, r1, r5
 8000b28:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b2c:	fa1f f885 	uxth.w	r8, r5
 8000b30:	2701      	movs	r7, #1
 8000b32:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b36:	0c23      	lsrs	r3, r4, #16
 8000b38:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b40:	fb08 f10c 	mul.w	r1, r8, ip
 8000b44:	4299      	cmp	r1, r3
 8000b46:	d907      	bls.n	8000b58 <__udivmoddi4+0x124>
 8000b48:	18eb      	adds	r3, r5, r3
 8000b4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x122>
 8000b50:	4299      	cmp	r1, r3
 8000b52:	f200 80cd 	bhi.w	8000cf0 <__udivmoddi4+0x2bc>
 8000b56:	4684      	mov	ip, r0
 8000b58:	1a59      	subs	r1, r3, r1
 8000b5a:	b2a3      	uxth	r3, r4
 8000b5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b60:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b64:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b68:	fb08 f800 	mul.w	r8, r8, r0
 8000b6c:	45a0      	cmp	r8, r4
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0x14c>
 8000b70:	192c      	adds	r4, r5, r4
 8000b72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x14a>
 8000b78:	45a0      	cmp	r8, r4
 8000b7a:	f200 80b6 	bhi.w	8000cea <__udivmoddi4+0x2b6>
 8000b7e:	4618      	mov	r0, r3
 8000b80:	eba4 0408 	sub.w	r4, r4, r8
 8000b84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b88:	e79f      	b.n	8000aca <__udivmoddi4+0x96>
 8000b8a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b8e:	40bb      	lsls	r3, r7
 8000b90:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b94:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b98:	fa01 f407 	lsl.w	r4, r1, r7
 8000b9c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ba0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ba4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ba8:	4325      	orrs	r5, r4
 8000baa:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bae:	0c2c      	lsrs	r4, r5, #16
 8000bb0:	fb08 3319 	mls	r3, r8, r9, r3
 8000bb4:	fa1f fa8e 	uxth.w	sl, lr
 8000bb8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bbc:	fb09 f40a 	mul.w	r4, r9, sl
 8000bc0:	429c      	cmp	r4, r3
 8000bc2:	fa02 f207 	lsl.w	r2, r2, r7
 8000bc6:	fa00 f107 	lsl.w	r1, r0, r7
 8000bca:	d90b      	bls.n	8000be4 <__udivmoddi4+0x1b0>
 8000bcc:	eb1e 0303 	adds.w	r3, lr, r3
 8000bd0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bd4:	f080 8087 	bcs.w	8000ce6 <__udivmoddi4+0x2b2>
 8000bd8:	429c      	cmp	r4, r3
 8000bda:	f240 8084 	bls.w	8000ce6 <__udivmoddi4+0x2b2>
 8000bde:	f1a9 0902 	sub.w	r9, r9, #2
 8000be2:	4473      	add	r3, lr
 8000be4:	1b1b      	subs	r3, r3, r4
 8000be6:	b2ad      	uxth	r5, r5
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000bf4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000bf8:	45a2      	cmp	sl, r4
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x1da>
 8000bfc:	eb1e 0404 	adds.w	r4, lr, r4
 8000c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c04:	d26b      	bcs.n	8000cde <__udivmoddi4+0x2aa>
 8000c06:	45a2      	cmp	sl, r4
 8000c08:	d969      	bls.n	8000cde <__udivmoddi4+0x2aa>
 8000c0a:	3802      	subs	r0, #2
 8000c0c:	4474      	add	r4, lr
 8000c0e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c12:	fba0 8902 	umull	r8, r9, r0, r2
 8000c16:	eba4 040a 	sub.w	r4, r4, sl
 8000c1a:	454c      	cmp	r4, r9
 8000c1c:	46c2      	mov	sl, r8
 8000c1e:	464b      	mov	r3, r9
 8000c20:	d354      	bcc.n	8000ccc <__udivmoddi4+0x298>
 8000c22:	d051      	beq.n	8000cc8 <__udivmoddi4+0x294>
 8000c24:	2e00      	cmp	r6, #0
 8000c26:	d069      	beq.n	8000cfc <__udivmoddi4+0x2c8>
 8000c28:	ebb1 050a 	subs.w	r5, r1, sl
 8000c2c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c30:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c34:	40fd      	lsrs	r5, r7
 8000c36:	40fc      	lsrs	r4, r7
 8000c38:	ea4c 0505 	orr.w	r5, ip, r5
 8000c3c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c40:	2700      	movs	r7, #0
 8000c42:	e747      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000c44:	f1c2 0320 	rsb	r3, r2, #32
 8000c48:	fa20 f703 	lsr.w	r7, r0, r3
 8000c4c:	4095      	lsls	r5, r2
 8000c4e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c52:	fa21 f303 	lsr.w	r3, r1, r3
 8000c56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c5a:	4338      	orrs	r0, r7
 8000c5c:	0c01      	lsrs	r1, r0, #16
 8000c5e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c62:	fa1f f885 	uxth.w	r8, r5
 8000c66:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c6e:	fb07 f308 	mul.w	r3, r7, r8
 8000c72:	428b      	cmp	r3, r1
 8000c74:	fa04 f402 	lsl.w	r4, r4, r2
 8000c78:	d907      	bls.n	8000c8a <__udivmoddi4+0x256>
 8000c7a:	1869      	adds	r1, r5, r1
 8000c7c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c80:	d22f      	bcs.n	8000ce2 <__udivmoddi4+0x2ae>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d92d      	bls.n	8000ce2 <__udivmoddi4+0x2ae>
 8000c86:	3f02      	subs	r7, #2
 8000c88:	4429      	add	r1, r5
 8000c8a:	1acb      	subs	r3, r1, r3
 8000c8c:	b281      	uxth	r1, r0
 8000c8e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c92:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c96:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c9a:	fb00 f308 	mul.w	r3, r0, r8
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x27e>
 8000ca2:	1869      	adds	r1, r5, r1
 8000ca4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ca8:	d217      	bcs.n	8000cda <__udivmoddi4+0x2a6>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d915      	bls.n	8000cda <__udivmoddi4+0x2a6>
 8000cae:	3802      	subs	r0, #2
 8000cb0:	4429      	add	r1, r5
 8000cb2:	1ac9      	subs	r1, r1, r3
 8000cb4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cb8:	e73b      	b.n	8000b32 <__udivmoddi4+0xfe>
 8000cba:	4637      	mov	r7, r6
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	e709      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000cc0:	4607      	mov	r7, r0
 8000cc2:	e6e7      	b.n	8000a94 <__udivmoddi4+0x60>
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	e6fb      	b.n	8000ac0 <__udivmoddi4+0x8c>
 8000cc8:	4541      	cmp	r1, r8
 8000cca:	d2ab      	bcs.n	8000c24 <__udivmoddi4+0x1f0>
 8000ccc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cd0:	eb69 020e 	sbc.w	r2, r9, lr
 8000cd4:	3801      	subs	r0, #1
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	e7a4      	b.n	8000c24 <__udivmoddi4+0x1f0>
 8000cda:	4660      	mov	r0, ip
 8000cdc:	e7e9      	b.n	8000cb2 <__udivmoddi4+0x27e>
 8000cde:	4618      	mov	r0, r3
 8000ce0:	e795      	b.n	8000c0e <__udivmoddi4+0x1da>
 8000ce2:	4667      	mov	r7, ip
 8000ce4:	e7d1      	b.n	8000c8a <__udivmoddi4+0x256>
 8000ce6:	4681      	mov	r9, r0
 8000ce8:	e77c      	b.n	8000be4 <__udivmoddi4+0x1b0>
 8000cea:	3802      	subs	r0, #2
 8000cec:	442c      	add	r4, r5
 8000cee:	e747      	b.n	8000b80 <__udivmoddi4+0x14c>
 8000cf0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cf4:	442b      	add	r3, r5
 8000cf6:	e72f      	b.n	8000b58 <__udivmoddi4+0x124>
 8000cf8:	4638      	mov	r0, r7
 8000cfa:	e708      	b.n	8000b0e <__udivmoddi4+0xda>
 8000cfc:	4637      	mov	r7, r6
 8000cfe:	e6e9      	b.n	8000ad4 <__udivmoddi4+0xa0>

08000d00 <__aeabi_idiv0>:
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d04:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d06:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <HAL_InitTick+0x3c>)
 8000d08:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <HAL_InitTick+0x40>)
{
 8000d0a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d0c:	7818      	ldrb	r0, [r3, #0]
 8000d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d12:	fbb3 f3f0 	udiv	r3, r3, r0
 8000d16:	6810      	ldr	r0, [r2, #0]
 8000d18:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d1c:	f000 f896 	bl	8000e4c <HAL_SYSTICK_Config>
 8000d20:	4604      	mov	r4, r0
 8000d22:	b958      	cbnz	r0, 8000d3c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d24:	2d0f      	cmp	r5, #15
 8000d26:	d809      	bhi.n	8000d3c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d28:	4602      	mov	r2, r0
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f000 f84a 	bl	8000dc8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <HAL_InitTick+0x44>)
 8000d36:	4620      	mov	r0, r4
 8000d38:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000d3a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	e7fc      	b.n	8000d3a <HAL_InitTick+0x36>
 8000d40:	20000018 	.word	0x20000018
 8000d44:	20000000 	.word	0x20000000
 8000d48:	20000004 	.word	0x20000004

08000d4c <HAL_Init>:
{
 8000d4c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <HAL_Init+0x30>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d56:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d5e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d66:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d68:	2003      	movs	r0, #3
 8000d6a:	f000 f81b 	bl	8000da4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f7ff ffc8 	bl	8000d04 <HAL_InitTick>
  HAL_MspInit();
 8000d74:	f002 fe9e 	bl	8003ab4 <HAL_MspInit>
}
 8000d78:	2000      	movs	r0, #0
 8000d7a:	bd08      	pop	{r3, pc}
 8000d7c:	40023c00 	.word	0x40023c00

08000d80 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d80:	4a03      	ldr	r2, [pc, #12]	; (8000d90 <HAL_IncTick+0x10>)
 8000d82:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <HAL_IncTick+0x14>)
 8000d84:	6811      	ldr	r1, [r2, #0]
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	440b      	add	r3, r1
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	200000b4 	.word	0x200000b4
 8000d94:	20000000 	.word	0x20000000

08000d98 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d98:	4b01      	ldr	r3, [pc, #4]	; (8000da0 <HAL_GetTick+0x8>)
 8000d9a:	6818      	ldr	r0, [r3, #0]
}
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	200000b4 	.word	0x200000b4

08000da4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da4:	4a07      	ldr	r2, [pc, #28]	; (8000dc4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000da6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000da8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000dac:	041b      	lsls	r3, r3, #16
 8000dae:	0c1b      	lsrs	r3, r3, #16
 8000db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db4:	0200      	lsls	r0, r0, #8
 8000db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dba:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000dbe:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000dc0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc8:	4b17      	ldr	r3, [pc, #92]	; (8000e28 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dca:	b570      	push	{r4, r5, r6, lr}
 8000dcc:	68dc      	ldr	r4, [r3, #12]
 8000dce:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd2:	f1c4 0507 	rsb	r5, r4, #7
 8000dd6:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd8:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ddc:	bf28      	it	cs
 8000dde:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de4:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de6:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dea:	bf8c      	ite	hi
 8000dec:	3c03      	subhi	r4, #3
 8000dee:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	ea21 0303 	bic.w	r3, r1, r3
 8000df4:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df6:	fa06 f404 	lsl.w	r4, r6, r4
 8000dfa:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000dfe:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e04:	bfa8      	it	ge
 8000e06:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8000e0a:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0e:	bfbc      	itt	lt
 8000e10:	f000 000f 	andlt.w	r0, r0, #15
 8000e14:	4a05      	ldrlt	r2, [pc, #20]	; (8000e2c <HAL_NVIC_SetPriority+0x64>)
 8000e16:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e18:	bfaa      	itet	ge
 8000e1a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e20:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000e24:	bd70      	pop	{r4, r5, r6, pc}
 8000e26:	bf00      	nop
 8000e28:	e000ed00 	.word	0xe000ed00
 8000e2c:	e000ed14 	.word	0xe000ed14

08000e30 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000e30:	2800      	cmp	r0, #0
 8000e32:	db08      	blt.n	8000e46 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e34:	0942      	lsrs	r2, r0, #5
 8000e36:	2301      	movs	r3, #1
 8000e38:	f000 001f 	and.w	r0, r0, #31
 8000e3c:	fa03 f000 	lsl.w	r0, r3, r0
 8000e40:	4b01      	ldr	r3, [pc, #4]	; (8000e48 <HAL_NVIC_EnableIRQ+0x18>)
 8000e42:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000e46:	4770      	bx	lr
 8000e48:	e000e100 	.word	0xe000e100

08000e4c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e4c:	3801      	subs	r0, #1
 8000e4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e52:	d20a      	bcs.n	8000e6a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e56:	4a07      	ldr	r2, [pc, #28]	; (8000e74 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e58:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5a:	21f0      	movs	r1, #240	; 0xf0
 8000e5c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e60:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e62:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e64:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e6a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000e010 	.word	0xe000e010
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000e78:	6803      	ldr	r3, [r0, #0]
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000e80:	f023 0303 	bic.w	r3, r3, #3
 8000e84:	2118      	movs	r1, #24
 8000e86:	3a10      	subs	r2, #16
 8000e88:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000e8c:	4904      	ldr	r1, [pc, #16]	; (8000ea0 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000e8e:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000e90:	bf88      	it	hi
 8000e92:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000e94:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000e96:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000e98:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8000e9a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	08003f58 	.word	0x08003f58

08000ea4 <HAL_DMA_Init>:
{
 8000ea4:	b570      	push	{r4, r5, r6, lr}
 8000ea6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ea8:	f7ff ff76 	bl	8000d98 <HAL_GetTick>
 8000eac:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000eae:	2c00      	cmp	r4, #0
 8000eb0:	d071      	beq.n	8000f96 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000eb8:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000ec0:	6813      	ldr	r3, [r2, #0]
 8000ec2:	f023 0301 	bic.w	r3, r3, #1
 8000ec6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ec8:	6821      	ldr	r1, [r4, #0]
 8000eca:	680b      	ldr	r3, [r1, #0]
 8000ecc:	07d8      	lsls	r0, r3, #31
 8000ece:	d43c      	bmi.n	8000f4a <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000ed0:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ed2:	4d32      	ldr	r5, [pc, #200]	; (8000f9c <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ed4:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ed6:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ed8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	68e2      	ldr	r2, [r4, #12]
 8000ee0:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ee2:	6922      	ldr	r2, [r4, #16]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	6962      	ldr	r2, [r4, #20]
 8000ee8:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eea:	69e2      	ldr	r2, [r4, #28]
 8000eec:	4303      	orrs	r3, r0
 8000eee:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ef0:	6a22      	ldr	r2, [r4, #32]
 8000ef2:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ef4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ef6:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ef8:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000efc:	bf02      	ittt	eq
 8000efe:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8000f02:	4335      	orreq	r5, r6
 8000f04:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8000f06:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000f08:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f0a:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f0c:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000f10:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f14:	d10b      	bne.n	8000f2e <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8000f16:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f18:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000f1a:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f1c:	b13d      	cbz	r5, 8000f2e <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000f1e:	b9f8      	cbnz	r0, 8000f60 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8000f20:	2a01      	cmp	r2, #1
 8000f22:	d02d      	beq.n	8000f80 <HAL_DMA_Init+0xdc>
 8000f24:	d301      	bcc.n	8000f2a <HAL_DMA_Init+0x86>
 8000f26:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000f28:	d101      	bne.n	8000f2e <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f2a:	01ea      	lsls	r2, r5, #7
 8000f2c:	d42b      	bmi.n	8000f86 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8000f2e:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f30:	4620      	mov	r0, r4
 8000f32:	f7ff ffa1 	bl	8000e78 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f36:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000f38:	233f      	movs	r3, #63	; 0x3f
 8000f3a:	4093      	lsls	r3, r2
 8000f3c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f3e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000f40:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f42:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000f44:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000f48:	e009      	b.n	8000f5e <HAL_DMA_Init+0xba>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f4a:	f7ff ff25 	bl	8000d98 <HAL_GetTick>
 8000f4e:	1b40      	subs	r0, r0, r5
 8000f50:	2805      	cmp	r0, #5
 8000f52:	d9b9      	bls.n	8000ec8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f54:	2320      	movs	r3, #32
 8000f56:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f58:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8000f5a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000f5e:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000f60:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000f64:	d113      	bne.n	8000f8e <HAL_DMA_Init+0xea>
    switch (tmp)
 8000f66:	2a03      	cmp	r2, #3
 8000f68:	d8e1      	bhi.n	8000f2e <HAL_DMA_Init+0x8a>
 8000f6a:	a001      	add	r0, pc, #4	; (adr r0, 8000f70 <HAL_DMA_Init+0xcc>)
 8000f6c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000f70:	08000f87 	.word	0x08000f87
 8000f74:	08000f2b 	.word	0x08000f2b
 8000f78:	08000f87 	.word	0x08000f87
 8000f7c:	08000f81 	.word	0x08000f81
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f80:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000f84:	d1d3      	bne.n	8000f2e <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f86:	2340      	movs	r3, #64	; 0x40
 8000f88:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	e7e5      	b.n	8000f5a <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000f8e:	2a02      	cmp	r2, #2
 8000f90:	d9f9      	bls.n	8000f86 <HAL_DMA_Init+0xe2>
 8000f92:	2a03      	cmp	r2, #3
 8000f94:	e7c8      	b.n	8000f28 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8000f96:	2001      	movs	r0, #1
 8000f98:	e7e1      	b.n	8000f5e <HAL_DMA_Init+0xba>
 8000f9a:	bf00      	nop
 8000f9c:	f010803f 	.word	0xf010803f

08000fa0 <HAL_DMA_Start_IT>:
{
 8000fa0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000fa2:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000fa6:	2c01      	cmp	r4, #1
 8000fa8:	d036      	beq.n	8001018 <HAL_DMA_Start_IT+0x78>
 8000faa:	2401      	movs	r4, #1
 8000fac:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000fb0:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fb4:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 8000fb6:	2c01      	cmp	r4, #1
 8000fb8:	f04f 0500 	mov.w	r5, #0
 8000fbc:	f04f 0402 	mov.w	r4, #2
 8000fc0:	d128      	bne.n	8001014 <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fc2:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000fc6:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fc8:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000fca:	6825      	ldr	r5, [r4, #0]
 8000fcc:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000fd0:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000fd2:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fd4:	6883      	ldr	r3, [r0, #8]
 8000fd6:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8000fd8:	bf0e      	itee	eq
 8000fda:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8000fdc:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8000fde:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fe0:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8000fe2:	bf08      	it	eq
 8000fe4:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fe6:	233f      	movs	r3, #63	; 0x3f
 8000fe8:	4093      	lsls	r3, r2
 8000fea:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000fec:	6823      	ldr	r3, [r4, #0]
 8000fee:	f043 0316 	orr.w	r3, r3, #22
 8000ff2:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000ff4:	6963      	ldr	r3, [r4, #20]
 8000ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ffa:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8000ffc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000ffe:	b11b      	cbz	r3, 8001008 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001000:	6823      	ldr	r3, [r4, #0]
 8001002:	f043 0308 	orr.w	r3, r3, #8
 8001006:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001008:	6823      	ldr	r3, [r4, #0]
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001010:	2000      	movs	r0, #0
}
 8001012:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8001014:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8001018:	2002      	movs	r0, #2
 800101a:	e7fa      	b.n	8001012 <HAL_DMA_Start_IT+0x72>

0800101c <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800101c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001020:	2b02      	cmp	r3, #2
 8001022:	d003      	beq.n	800102c <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001028:	2001      	movs	r0, #1
 800102a:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 800102c:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800102e:	2305      	movs	r3, #5
 8001030:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001034:	6813      	ldr	r3, [r2, #0]
 8001036:	f023 0301 	bic.w	r3, r3, #1
 800103a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800103c:	2000      	movs	r0, #0
}
 800103e:	4770      	bx	lr

08001040 <HAL_DMA_IRQHandler>:
{
 8001040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8001042:	2300      	movs	r3, #0
 8001044:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001046:	4b5c      	ldr	r3, [pc, #368]	; (80011b8 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001048:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800104a:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800104c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800104e:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001050:	2208      	movs	r2, #8
 8001052:	409a      	lsls	r2, r3
 8001054:	4232      	tst	r2, r6
{
 8001056:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001058:	d00c      	beq.n	8001074 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800105a:	6801      	ldr	r1, [r0, #0]
 800105c:	6808      	ldr	r0, [r1, #0]
 800105e:	0740      	lsls	r0, r0, #29
 8001060:	d508      	bpl.n	8001074 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001062:	6808      	ldr	r0, [r1, #0]
 8001064:	f020 0004 	bic.w	r0, r0, #4
 8001068:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800106a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800106c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800106e:	f042 0201 	orr.w	r2, r2, #1
 8001072:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001074:	2201      	movs	r2, #1
 8001076:	409a      	lsls	r2, r3
 8001078:	4232      	tst	r2, r6
 800107a:	d008      	beq.n	800108e <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800107c:	6821      	ldr	r1, [r4, #0]
 800107e:	6949      	ldr	r1, [r1, #20]
 8001080:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001082:	bf41      	itttt	mi
 8001084:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001086:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8001088:	f042 0202 	orrmi.w	r2, r2, #2
 800108c:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800108e:	2204      	movs	r2, #4
 8001090:	409a      	lsls	r2, r3
 8001092:	4232      	tst	r2, r6
 8001094:	d008      	beq.n	80010a8 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001096:	6821      	ldr	r1, [r4, #0]
 8001098:	6809      	ldr	r1, [r1, #0]
 800109a:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800109c:	bf41      	itttt	mi
 800109e:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80010a0:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80010a2:	f042 0204 	orrmi.w	r2, r2, #4
 80010a6:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80010a8:	2210      	movs	r2, #16
 80010aa:	409a      	lsls	r2, r3
 80010ac:	4232      	tst	r2, r6
 80010ae:	d010      	beq.n	80010d2 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80010b0:	6823      	ldr	r3, [r4, #0]
 80010b2:	6819      	ldr	r1, [r3, #0]
 80010b4:	0709      	lsls	r1, r1, #28
 80010b6:	d50c      	bpl.n	80010d2 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80010b8:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	0350      	lsls	r0, r2, #13
 80010be:	d537      	bpl.n	8001130 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	0319      	lsls	r1, r3, #12
 80010c4:	d401      	bmi.n	80010ca <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80010c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010c8:	e000      	b.n	80010cc <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80010ca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80010cc:	b10b      	cbz	r3, 80010d2 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80010ce:	4620      	mov	r0, r4
 80010d0:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80010d2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80010d4:	2220      	movs	r2, #32
 80010d6:	408a      	lsls	r2, r1
 80010d8:	4232      	tst	r2, r6
 80010da:	d03a      	beq.n	8001152 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80010dc:	6823      	ldr	r3, [r4, #0]
 80010de:	6818      	ldr	r0, [r3, #0]
 80010e0:	06c6      	lsls	r6, r0, #27
 80010e2:	d536      	bpl.n	8001152 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80010e4:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80010e6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80010ea:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010ec:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80010ee:	d127      	bne.n	8001140 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010f0:	f022 0216 	bic.w	r2, r2, #22
 80010f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010f6:	695a      	ldr	r2, [r3, #20]
 80010f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010fc:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001100:	b90a      	cbnz	r2, 8001106 <HAL_DMA_IRQHandler+0xc6>
 8001102:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001104:	b11a      	cbz	r2, 800110e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	f022 0208 	bic.w	r2, r2, #8
 800110c:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800110e:	233f      	movs	r3, #63	; 0x3f
 8001110:	408b      	lsls	r3, r1
 8001112:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8001114:	2300      	movs	r3, #0
 8001116:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800111a:	2301      	movs	r3, #1
 800111c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001120:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8001122:	2b00      	cmp	r3, #0
 8001124:	d045      	beq.n	80011b2 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8001126:	4620      	mov	r0, r4
}
 8001128:	b003      	add	sp, #12
 800112a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800112e:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001134:	bf5e      	ittt	pl
 8001136:	681a      	ldrpl	r2, [r3, #0]
 8001138:	f022 0208 	bicpl.w	r2, r2, #8
 800113c:	601a      	strpl	r2, [r3, #0]
 800113e:	e7c2      	b.n	80010c6 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001140:	0350      	lsls	r0, r2, #13
 8001142:	d527      	bpl.n	8001194 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	0319      	lsls	r1, r3, #12
 8001148:	d431      	bmi.n	80011ae <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 800114a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 800114c:	b10b      	cbz	r3, 8001152 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 800114e:	4620      	mov	r0, r4
 8001150:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001152:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001154:	b36b      	cbz	r3, 80011b2 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001156:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001158:	07da      	lsls	r2, r3, #31
 800115a:	d519      	bpl.n	8001190 <HAL_DMA_IRQHandler+0x150>
      hdma->State = HAL_DMA_STATE_ABORT;
 800115c:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 800115e:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8001160:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001164:	6813      	ldr	r3, [r2, #0]
 8001166:	f023 0301 	bic.w	r3, r3, #1
 800116a:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800116c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001170:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8001174:	9b01      	ldr	r3, [sp, #4]
 8001176:	3301      	adds	r3, #1
 8001178:	42bb      	cmp	r3, r7
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	d802      	bhi.n	8001184 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800117e:	6813      	ldr	r3, [r2, #0]
 8001180:	07db      	lsls	r3, r3, #31
 8001182:	d4f7      	bmi.n	8001174 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 8001184:	2300      	movs	r3, #0
 8001186:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800118a:	2301      	movs	r3, #1
 800118c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001190:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001192:	e7c6      	b.n	8001122 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800119a:	d108      	bne.n	80011ae <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800119c:	6819      	ldr	r1, [r3, #0]
 800119e:	f021 0110 	bic.w	r1, r1, #16
 80011a2:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80011a4:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80011a6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80011aa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80011ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80011b0:	e7cc      	b.n	800114c <HAL_DMA_IRQHandler+0x10c>
}
 80011b2:	b003      	add	sp, #12
 80011b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000018 	.word	0x20000018

080011bc <HAL_DMA_GetState>:
  return hdma->State;
 80011bc:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 80011c0:	4770      	bx	lr

080011c2 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80011c2:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 80011c4:	4770      	bx	lr
	...

080011c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011cc:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ce:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001380 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011d4:	4a68      	ldr	r2, [pc, #416]	; (8001378 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011d6:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001384 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011da:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011dc:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80011de:	f04f 0c01 	mov.w	ip, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011e2:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80011e4:	fa0c fc03 	lsl.w	ip, ip, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011e8:	ea04 060c 	and.w	r6, r4, ip
    if(iocurrent == ioposition)
 80011ec:	45b4      	cmp	ip, r6
 80011ee:	f040 80ae 	bne.w	800134e <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011f2:	684c      	ldr	r4, [r1, #4]
 80011f4:	f024 0710 	bic.w	r7, r4, #16
 80011f8:	2f02      	cmp	r7, #2
 80011fa:	d116      	bne.n	800122a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80011fc:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001200:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001204:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001208:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800120c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001210:	f04f 0e0f 	mov.w	lr, #15
 8001214:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001218:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800121c:	690d      	ldr	r5, [r1, #16]
 800121e:	fa05 f50b 	lsl.w	r5, r5, fp
 8001222:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001226:	f8ca 5020 	str.w	r5, [sl, #32]
 800122a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800122e:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001230:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001234:	fa05 f50a 	lsl.w	r5, r5, sl
 8001238:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800123a:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800123e:	ea05 0b0b 	and.w	fp, r5, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001242:	fa0e fe0a 	lsl.w	lr, lr, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001246:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001248:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800124c:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800124e:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001252:	d811      	bhi.n	8001278 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001254:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001256:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800125a:	68cf      	ldr	r7, [r1, #12]
 800125c:	fa07 fe0a 	lsl.w	lr, r7, sl
 8001260:	ea4e 070b 	orr.w	r7, lr, fp
        GPIOx->OSPEEDR = temp;
 8001264:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001266:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001268:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800126c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001270:	409f      	lsls	r7, r3
 8001272:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8001276:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001278:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800127a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800127c:	688f      	ldr	r7, [r1, #8]
 800127e:	fa07 f70a 	lsl.w	r7, r7, sl
 8001282:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001284:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001286:	00e5      	lsls	r5, r4, #3
 8001288:	d561      	bpl.n	800134e <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128a:	f04f 0b00 	mov.w	fp, #0
 800128e:	f8cd b00c 	str.w	fp, [sp, #12]
 8001292:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001296:	4d39      	ldr	r5, [pc, #228]	; (800137c <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001298:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800129c:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80012a0:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80012a4:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80012a8:	9703      	str	r7, [sp, #12]
 80012aa:	9f03      	ldr	r7, [sp, #12]
 80012ac:	f023 0703 	bic.w	r7, r3, #3
 80012b0:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80012b4:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012b8:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80012bc:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012c0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80012c4:	f04f 0c0f 	mov.w	ip, #15
 80012c8:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012cc:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012ce:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012d2:	d043      	beq.n	800135c <HAL_GPIO_Init+0x194>
 80012d4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80012d8:	42a8      	cmp	r0, r5
 80012da:	d041      	beq.n	8001360 <HAL_GPIO_Init+0x198>
 80012dc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80012e0:	42a8      	cmp	r0, r5
 80012e2:	d03f      	beq.n	8001364 <HAL_GPIO_Init+0x19c>
 80012e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80012e8:	42a8      	cmp	r0, r5
 80012ea:	d03d      	beq.n	8001368 <HAL_GPIO_Init+0x1a0>
 80012ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80012f0:	42a8      	cmp	r0, r5
 80012f2:	d03b      	beq.n	800136c <HAL_GPIO_Init+0x1a4>
 80012f4:	4548      	cmp	r0, r9
 80012f6:	d03b      	beq.n	8001370 <HAL_GPIO_Init+0x1a8>
 80012f8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80012fc:	42a8      	cmp	r0, r5
 80012fe:	d039      	beq.n	8001374 <HAL_GPIO_Init+0x1ac>
 8001300:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001304:	42a8      	cmp	r0, r5
 8001306:	bf14      	ite	ne
 8001308:	2508      	movne	r5, #8
 800130a:	2507      	moveq	r5, #7
 800130c:	fa05 f50e 	lsl.w	r5, r5, lr
 8001310:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001314:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001316:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001318:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800131a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800131e:	bf0c      	ite	eq
 8001320:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001322:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001324:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001326:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001328:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800132c:	bf0c      	ite	eq
 800132e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001330:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001332:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001334:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001336:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800133a:	bf0c      	ite	eq
 800133c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800133e:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001340:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001342:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001344:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001346:	bf54      	ite	pl
 8001348:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800134a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800134c:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800134e:	3301      	adds	r3, #1
 8001350:	2b10      	cmp	r3, #16
 8001352:	f47f af44 	bne.w	80011de <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001356:	b005      	add	sp, #20
 8001358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800135c:	465d      	mov	r5, fp
 800135e:	e7d5      	b.n	800130c <HAL_GPIO_Init+0x144>
 8001360:	2501      	movs	r5, #1
 8001362:	e7d3      	b.n	800130c <HAL_GPIO_Init+0x144>
 8001364:	2502      	movs	r5, #2
 8001366:	e7d1      	b.n	800130c <HAL_GPIO_Init+0x144>
 8001368:	2503      	movs	r5, #3
 800136a:	e7cf      	b.n	800130c <HAL_GPIO_Init+0x144>
 800136c:	2504      	movs	r5, #4
 800136e:	e7cd      	b.n	800130c <HAL_GPIO_Init+0x144>
 8001370:	2505      	movs	r5, #5
 8001372:	e7cb      	b.n	800130c <HAL_GPIO_Init+0x144>
 8001374:	2506      	movs	r5, #6
 8001376:	e7c9      	b.n	800130c <HAL_GPIO_Init+0x144>
 8001378:	40013c00 	.word	0x40013c00
 800137c:	40020000 	.word	0x40020000
 8001380:	40023800 	.word	0x40023800
 8001384:	40021400 	.word	0x40021400

08001388 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001388:	6903      	ldr	r3, [r0, #16]
 800138a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800138c:	bf14      	ite	ne
 800138e:	2001      	movne	r0, #1
 8001390:	2000      	moveq	r0, #0
 8001392:	4770      	bx	lr

08001394 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001394:	b10a      	cbz	r2, 800139a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001396:	6181      	str	r1, [r0, #24]
  }
}
 8001398:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800139a:	0409      	lsls	r1, r1, #16
 800139c:	e7fb      	b.n	8001396 <HAL_GPIO_WritePin+0x2>
	...

080013a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013a0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013a2:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80013a4:	6959      	ldr	r1, [r3, #20]
 80013a6:	4201      	tst	r1, r0
 80013a8:	d002      	beq.n	80013b0 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013aa:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013ac:	f002 fac2 	bl	8003934 <HAL_GPIO_EXTI_Callback>
  }
}
 80013b0:	bd08      	pop	{r3, pc}
 80013b2:	bf00      	nop
 80013b4:	40013c00 	.word	0x40013c00

080013b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013b8:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013ba:	4604      	mov	r4, r0
 80013bc:	b908      	cbnz	r0, 80013c2 <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 80013be:	2001      	movs	r0, #1
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
}
 80013c0:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013c2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80013c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80013ca:	b91b      	cbnz	r3, 80013d4 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80013cc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80013d0:	f002 fb8c 	bl	8003aec <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 80013d4:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80013d6:	2324      	movs	r3, #36	; 0x24
 80013d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80013dc:	6813      	ldr	r3, [r2, #0]
 80013de:	f023 0301 	bic.w	r3, r3, #1
 80013e2:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013e4:	f001 f9ac 	bl	8002740 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013e8:	6863      	ldr	r3, [r4, #4]
 80013ea:	4a41      	ldr	r2, [pc, #260]	; (80014f0 <HAL_I2C_Init+0x138>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d84d      	bhi.n	800148c <HAL_I2C_Init+0xd4>
 80013f0:	4a40      	ldr	r2, [pc, #256]	; (80014f4 <HAL_I2C_Init+0x13c>)
 80013f2:	4290      	cmp	r0, r2
 80013f4:	d9e3      	bls.n	80013be <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013f6:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80013f8:	493f      	ldr	r1, [pc, #252]	; (80014f8 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013fa:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80013fc:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001400:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001404:	430d      	orrs	r5, r1
 8001406:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001408:	6a15      	ldr	r5, [r2, #32]
 800140a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800140e:	3101      	adds	r1, #1
 8001410:	4329      	orrs	r1, r5
 8001412:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001414:	69d1      	ldr	r1, [r2, #28]
 8001416:	4d36      	ldr	r5, [pc, #216]	; (80014f0 <HAL_I2C_Init+0x138>)
 8001418:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800141c:	42ab      	cmp	r3, r5
 800141e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001422:	f100 30ff 	add.w	r0, r0, #4294967295
 8001426:	d848      	bhi.n	80014ba <HAL_I2C_Init+0x102>
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	fbb0 f0f3 	udiv	r0, r0, r3
 800142e:	1c43      	adds	r3, r0, #1
 8001430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001434:	2b04      	cmp	r3, #4
 8001436:	bf38      	it	cc
 8001438:	2304      	movcc	r3, #4
 800143a:	430b      	orrs	r3, r1
 800143c:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800143e:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8001442:	6811      	ldr	r1, [r2, #0]
 8001444:	4303      	orrs	r3, r0
 8001446:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800144a:	430b      	orrs	r3, r1
 800144c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800144e:	6891      	ldr	r1, [r2, #8]
 8001450:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8001454:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8001458:	4303      	orrs	r3, r0
 800145a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800145e:	430b      	orrs	r3, r1
 8001460:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001462:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8001466:	68d1      	ldr	r1, [r2, #12]
 8001468:	4303      	orrs	r3, r0
 800146a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800146e:	430b      	orrs	r3, r1
 8001470:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001472:	6813      	ldr	r3, [r2, #0]
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800147a:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800147c:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800147e:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001480:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001484:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001486:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 800148a:	e799      	b.n	80013c0 <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800148c:	4a1b      	ldr	r2, [pc, #108]	; (80014fc <HAL_I2C_Init+0x144>)
 800148e:	4290      	cmp	r0, r2
 8001490:	d995      	bls.n	80013be <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001492:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001494:	4e18      	ldr	r6, [pc, #96]	; (80014f8 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001496:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001498:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800149c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80014a0:	4335      	orrs	r5, r6
 80014a2:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014a4:	6a15      	ldr	r5, [r2, #32]
 80014a6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80014aa:	4371      	muls	r1, r6
 80014ac:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80014b0:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80014b4:	fbb1 f1f6 	udiv	r1, r1, r6
 80014b8:	e7a9      	b.n	800140e <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014ba:	68a5      	ldr	r5, [r4, #8]
 80014bc:	b955      	cbnz	r5, 80014d4 <HAL_I2C_Init+0x11c>
 80014be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80014c2:	fbb0 f0f3 	udiv	r0, r0, r3
 80014c6:	1c43      	adds	r3, r0, #1
 80014c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014cc:	b16b      	cbz	r3, 80014ea <HAL_I2C_Init+0x132>
 80014ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014d2:	e7b2      	b.n	800143a <HAL_I2C_Init+0x82>
 80014d4:	2519      	movs	r5, #25
 80014d6:	436b      	muls	r3, r5
 80014d8:	fbb0 f0f3 	udiv	r0, r0, r3
 80014dc:	1c43      	adds	r3, r0, #1
 80014de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014e2:	b113      	cbz	r3, 80014ea <HAL_I2C_Init+0x132>
 80014e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014e8:	e7a7      	b.n	800143a <HAL_I2C_Init+0x82>
 80014ea:	2301      	movs	r3, #1
 80014ec:	e7a5      	b.n	800143a <HAL_I2C_Init+0x82>
 80014ee:	bf00      	nop
 80014f0:	000186a0 	.word	0x000186a0
 80014f4:	001e847f 	.word	0x001e847f
 80014f8:	000f4240 	.word	0x000f4240
 80014fc:	003d08ff 	.word	0x003d08ff

08001500 <HAL_I2C_Slave_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001500:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001504:	2b20      	cmp	r3, #32
{
 8001506:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001508:	d132      	bne.n	8001570 <HAL_I2C_Slave_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 800150a:	2900      	cmp	r1, #0
 800150c:	d02e      	beq.n	800156c <HAL_I2C_Slave_Receive_IT+0x6c>
 800150e:	2a00      	cmp	r2, #0
 8001510:	d02c      	beq.n	800156c <HAL_I2C_Slave_Receive_IT+0x6c>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001512:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001516:	2b01      	cmp	r3, #1
 8001518:	d02a      	beq.n	8001570 <HAL_I2C_Slave_Receive_IT+0x70>

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800151a:	6804      	ldr	r4, [r0, #0]
    __HAL_LOCK(hi2c);
 800151c:	2301      	movs	r3, #1
 800151e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001522:	6823      	ldr	r3, [r4, #0]
 8001524:	07db      	lsls	r3, r3, #31
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001526:	bf5e      	ittt	pl
 8001528:	6823      	ldrpl	r3, [r4, #0]
 800152a:	f043 0301 	orrpl.w	r3, r3, #1
 800152e:	6023      	strpl	r3, [r4, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001530:	6823      	ldr	r3, [r4, #0]
 8001532:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001536:	6023      	str	r3, [r4, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001538:	2322      	movs	r3, #34	; 0x22
 800153a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800153e:	2320      	movs	r3, #32
 8001540:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001544:	2300      	movs	r3, #0
 8001546:	6403      	str	r3, [r0, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
 8001548:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800154a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800154c:	8502      	strh	r2, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800154e:	4a09      	ldr	r2, [pc, #36]	; (8001574 <HAL_I2C_Slave_Receive_IT+0x74>)
 8001550:	62c2      	str	r2, [r0, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001552:	6822      	ldr	r2, [r4, #0]
    hi2c->pBuffPtr    = pData;
 8001554:	6241      	str	r1, [r0, #36]	; 0x24
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001556:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800155a:	6022      	str	r2, [r4, #0]
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800155c:	6862      	ldr	r2, [r4, #4]
    __HAL_UNLOCK(hi2c);
 800155e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001562:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001566:	6062      	str	r2, [r4, #4]

    return HAL_OK;
 8001568:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800156a:	bd10      	pop	{r4, pc}
      return  HAL_ERROR;
 800156c:	2001      	movs	r0, #1
 800156e:	e7fc      	b.n	800156a <HAL_I2C_Slave_Receive_IT+0x6a>
    return HAL_BUSY;
 8001570:	2002      	movs	r0, #2
 8001572:	e7fa      	b.n	800156a <HAL_I2C_Slave_Receive_IT+0x6a>
 8001574:	ffff0000 	.word	0xffff0000

08001578 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800157a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800157e:	2b20      	cmp	r3, #32
{
 8001580:	4604      	mov	r4, r0
 8001582:	4617      	mov	r7, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001584:	d14f      	bne.n	8001626 <HAL_I2C_Slave_Transmit_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8001586:	2900      	cmp	r1, #0
 8001588:	d04b      	beq.n	8001622 <HAL_I2C_Slave_Transmit_DMA+0xaa>
 800158a:	2a00      	cmp	r2, #0
 800158c:	d049      	beq.n	8001622 <HAL_I2C_Slave_Transmit_DMA+0xaa>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800158e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001592:	2b01      	cmp	r3, #1
 8001594:	d047      	beq.n	8001626 <HAL_I2C_Slave_Transmit_DMA+0xae>
 8001596:	2301      	movs	r3, #1
 8001598:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800159c:	6803      	ldr	r3, [r0, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	07d2      	lsls	r2, r2, #31
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015a2:	bf5e      	ittt	pl
 80015a4:	6818      	ldrpl	r0, [r3, #0]
 80015a6:	f040 0001 	orrpl.w	r0, r0, #1
 80015aa:	6018      	strpl	r0, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015ac:	6818      	ldr	r0, [r3, #0]
 80015ae:	461a      	mov	r2, r3
 80015b0:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 80015b4:	f842 0b10 	str.w	r0, [r2], #16

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015b8:	2500      	movs	r5, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80015ba:	2321      	movs	r3, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80015bc:	2620      	movs	r6, #32
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80015be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80015c2:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015c6:	6425      	str	r5, [r4, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
 80015c8:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015cc:	4817      	ldr	r0, [pc, #92]	; (800162c <HAL_I2C_Slave_Transmit_DMA+0xb4>)
 80015ce:	62e0      	str	r0, [r4, #44]	; 0x2c

    /* Set the I2C DMA transfer complete callback */
    hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80015d0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80015d2:	4f17      	ldr	r7, [pc, #92]	; (8001630 <HAL_I2C_Slave_Transmit_DMA+0xb8>)
    hi2c->pBuffPtr    = pData;
 80015d4:	6261      	str	r1, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80015da:	63c7      	str	r7, [r0, #60]	; 0x3c

    /* Set the DMA error callback */
    hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80015dc:	4f15      	ldr	r7, [pc, #84]	; (8001634 <HAL_I2C_Slave_Transmit_DMA+0xbc>)
 80015de:	64c7      	str	r7, [r0, #76]	; 0x4c

    /* Set the unused DMA callbacks to NULL */
    hi2c->hdmatx->XferHalfCpltCallback = NULL;
    hi2c->hdmatx->XferM1CpltCallback = NULL;
 80015e0:	e9c0 5510 	strd	r5, r5, [r0, #64]	; 0x40
    hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80015e4:	6485      	str	r5, [r0, #72]	; 0x48
    hi2c->hdmatx->XferAbortCallback = NULL;
 80015e6:	6505      	str	r5, [r0, #80]	; 0x50

    /* Enable the DMA stream */
    dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80015e8:	f7ff fcda 	bl	8000fa0 <HAL_DMA_Start_IT>

    if (dmaxferstatus == HAL_OK)
 80015ec:	b978      	cbnz	r0, 800160e <HAL_I2C_Slave_Transmit_DMA+0x96>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015ee:	6823      	ldr	r3, [r4, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80015f6:	601a      	str	r2, [r3, #0]

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80015f8:	685a      	ldr	r2, [r3, #4]
      __HAL_UNLOCK(hi2c);
 80015fa:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80015fe:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001602:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800160a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    return HAL_BUSY;
  }
}
 800160c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->State     = HAL_I2C_STATE_READY;
 800160e:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001612:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001616:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001618:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800161c:	f043 0310 	orr.w	r3, r3, #16
 8001620:	6423      	str	r3, [r4, #64]	; 0x40
      return  HAL_ERROR;
 8001622:	2001      	movs	r0, #1
 8001624:	e7f2      	b.n	800160c <HAL_I2C_Slave_Transmit_DMA+0x94>
    return HAL_BUSY;
 8001626:	2002      	movs	r0, #2
 8001628:	e7f0      	b.n	800160c <HAL_I2C_Slave_Transmit_DMA+0x94>
 800162a:	bf00      	nop
 800162c:	ffff0000 	.word	0xffff0000
 8001630:	08001685 	.word	0x08001685
 8001634:	08001649 	.word	0x08001649

08001638 <HAL_I2C_MasterTxCpltCallback>:
 8001638:	4770      	bx	lr

0800163a <HAL_I2C_MasterRxCpltCallback>:
 800163a:	4770      	bx	lr

0800163c <HAL_I2C_SlaveTxCpltCallback>:
 800163c:	4770      	bx	lr

0800163e <HAL_I2C_AddrCallback>:
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800163e:	4770      	bx	lr

08001640 <HAL_I2C_ListenCpltCallback>:
 8001640:	4770      	bx	lr

08001642 <HAL_I2C_MemTxCpltCallback>:
 8001642:	4770      	bx	lr

08001644 <HAL_I2C_MemRxCpltCallback>:
 8001644:	4770      	bx	lr

08001646 <HAL_I2C_ErrorCallback>:
 8001646:	4770      	bx	lr

08001648 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8001648:	b538      	push	{r3, r4, r5, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800164a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 800164c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800164e:	2500      	movs	r5, #0
 8001650:	63dd      	str	r5, [r3, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 8001652:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001654:	63dd      	str	r5, [r3, #60]	; 0x3c

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8001656:	f7ff fdb4 	bl	80011c2 <HAL_DMA_GetError>
 800165a:	2802      	cmp	r0, #2
 800165c:	d011      	beq.n	8001682 <I2C_DMAError+0x3a>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800165e:	6822      	ldr	r2, [r4, #0]
 8001660:	6813      	ldr	r3, [r2, #0]
 8001662:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001666:	6013      	str	r3, [r2, #0]

    hi2c->XferCount = 0U;

    hi2c->State = HAL_I2C_STATE_READY;
 8001668:	2320      	movs	r3, #32
    hi2c->XferCount = 0U;
 800166a:	8565      	strh	r5, [r4, #42]	; 0x2a
    hi2c->State = HAL_I2C_STATE_READY;
 800166c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001670:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001674:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001676:	f043 0310 	orr.w	r3, r3, #16
 800167a:	6423      	str	r3, [r4, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800167c:	4620      	mov	r0, r4
 800167e:	f7ff ffe2 	bl	8001646 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001682:	bd38      	pop	{r3, r4, r5, pc}

08001684 <I2C_DMAXferCplt>:
{
 8001684:	b570      	push	{r4, r5, r6, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001686:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001688:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800168a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800168e:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001692:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001694:	685d      	ldr	r5, [r3, #4]
  hi2c->hdmatx->XferCpltCallback = NULL;
 8001696:	6b66      	ldr	r6, [r4, #52]	; 0x34
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001698:	f425 7540 	bic.w	r5, r5, #768	; 0x300
 800169c:	605d      	str	r5, [r3, #4]
  hi2c->hdmatx->XferCpltCallback = NULL;
 800169e:	2500      	movs	r5, #0
 80016a0:	63f5      	str	r5, [r6, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 80016a2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80016a4:	b2d2      	uxtb	r2, r2
  hi2c->hdmarx->XferCpltCallback = NULL;
 80016a6:	63f5      	str	r5, [r6, #60]	; 0x3c
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80016a8:	f002 0521 	and.w	r5, r2, #33	; 0x21
 80016ac:	2d21      	cmp	r5, #33	; 0x21
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80016ae:	b2c0      	uxtb	r0, r0
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80016b0:	d005      	beq.n	80016be <I2C_DMAXferCplt+0x3a>
 80016b2:	f002 0522 	and.w	r5, r2, #34	; 0x22
 80016b6:	2d22      	cmp	r5, #34	; 0x22
 80016b8:	d123      	bne.n	8001702 <I2C_DMAXferCplt+0x7e>
 80016ba:	2820      	cmp	r0, #32
 80016bc:	d121      	bne.n	8001702 <I2C_DMAXferCplt+0x7e>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80016be:	6859      	ldr	r1, [r3, #4]
 80016c0:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80016c4:	6059      	str	r1, [r3, #4]
    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80016c6:	2a29      	cmp	r2, #41	; 0x29
    hi2c->XferCount = 0U;
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80016ce:	d10d      	bne.n	80016ec <I2C_DMAXferCplt+0x68>
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80016d0:	2321      	movs	r3, #33	; 0x21
 80016d2:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80016d4:	2328      	movs	r3, #40	; 0x28
 80016d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80016da:	4620      	mov	r0, r4
 80016dc:	f7ff ffae 	bl	800163c <HAL_I2C_SlaveTxCpltCallback>
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80016e0:	6822      	ldr	r2, [r4, #0]
 80016e2:	6853      	ldr	r3, [r2, #4]
 80016e4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80016e8:	6053      	str	r3, [r2, #4]
}
 80016ea:	bd70      	pop	{r4, r5, r6, pc}
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80016ec:	2a2a      	cmp	r2, #42	; 0x2a
 80016ee:	d1f7      	bne.n	80016e0 <I2C_DMAXferCplt+0x5c>
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80016f0:	2322      	movs	r3, #34	; 0x22
 80016f2:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80016f4:	2328      	movs	r3, #40	; 0x28
 80016f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80016fa:	4620      	mov	r0, r4
 80016fc:	f002 f9c6 	bl	8003a8c <HAL_I2C_SlaveRxCpltCallback>
 8001700:	e7ee      	b.n	80016e0 <I2C_DMAXferCplt+0x5c>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8001702:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8001706:	2a00      	cmp	r2, #0
 8001708:	d0ef      	beq.n	80016ea <I2C_DMAXferCplt+0x66>
    if (hi2c->XferCount == (uint16_t)1)
 800170a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800170c:	b292      	uxth	r2, r2
 800170e:	2a01      	cmp	r2, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001710:	bf02      	ittt	eq
 8001712:	681a      	ldreq	r2, [r3, #0]
 8001714:	f422 6280 	biceq.w	r2, r2, #1024	; 0x400
 8001718:	601a      	streq	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800171a:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800171c:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001720:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001724:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8001726:	d006      	beq.n	8001736 <I2C_DMAXferCplt+0xb2>
 8001728:	2908      	cmp	r1, #8
 800172a:	d004      	beq.n	8001736 <I2C_DMAXferCplt+0xb2>
 800172c:	f1b1 4f2a 	cmp.w	r1, #2852126720	; 0xaa000000
 8001730:	d001      	beq.n	8001736 <I2C_DMAXferCplt+0xb2>
 8001732:	2920      	cmp	r1, #32
 8001734:	d103      	bne.n	800173e <I2C_DMAXferCplt+0xba>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800173c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001744:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800174c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800174e:	2300      	movs	r3, #0
 8001750:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001752:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001754:	b11b      	cbz	r3, 800175e <I2C_DMAXferCplt+0xda>
      HAL_I2C_ErrorCallback(hi2c);
 8001756:	4620      	mov	r0, r4
 8001758:	f7ff ff75 	bl	8001646 <HAL_I2C_ErrorCallback>
 800175c:	e7c5      	b.n	80016ea <I2C_DMAXferCplt+0x66>
      hi2c->State = HAL_I2C_STATE_READY;
 800175e:	2220      	movs	r2, #32
 8001760:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001764:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001768:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800176c:	2a40      	cmp	r2, #64	; 0x40
 800176e:	d104      	bne.n	800177a <I2C_DMAXferCplt+0xf6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001770:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8001772:	4620      	mov	r0, r4
 8001774:	f7ff ff66 	bl	8001644 <HAL_I2C_MemRxCpltCallback>
 8001778:	e7b7      	b.n	80016ea <I2C_DMAXferCplt+0x66>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800177a:	2312      	movs	r3, #18
 800177c:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800177e:	4620      	mov	r0, r4
 8001780:	f7ff ff5b 	bl	800163a <HAL_I2C_MasterRxCpltCallback>
}
 8001784:	e7b1      	b.n	80016ea <I2C_DMAXferCplt+0x66>

08001786 <HAL_I2C_AbortCpltCallback>:
 8001786:	4770      	bx	lr

08001788 <I2C_DMAAbort>:
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001788:	6b80      	ldr	r0, [r0, #56]	; 0x38
  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
  hi2c->hdmarx->XferCpltCallback = NULL;

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800178a:	6802      	ldr	r2, [r0, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800178c:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
{
 8001790:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001792:	6814      	ldr	r4, [r2, #0]
  hi2c->hdmatx->XferCpltCallback = NULL;
 8001794:	6b46      	ldr	r6, [r0, #52]	; 0x34
  hi2c->hdmarx->XferCpltCallback = NULL;
 8001796:	6b85      	ldr	r5, [r0, #56]	; 0x38
  hi2c->hdmatx->XferCpltCallback = NULL;
 8001798:	2300      	movs	r3, #0
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800179a:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
  hi2c->hdmatx->XferCpltCallback = NULL;
 800179e:	63f3      	str	r3, [r6, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 80017a0:	63eb      	str	r3, [r5, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017a2:	6014      	str	r4, [r2, #0]

  hi2c->XferCount = 0U;
 80017a4:	8543      	strh	r3, [r0, #42]	; 0x2a
  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
  hi2c->hdmarx->XferAbortCallback = NULL;

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80017a6:	6814      	ldr	r4, [r2, #0]
  hi2c->hdmatx->XferAbortCallback = NULL;
 80017a8:	6533      	str	r3, [r6, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 80017aa:	f024 0401 	bic.w	r4, r4, #1
  hi2c->hdmarx->XferAbortCallback = NULL;
 80017ae:	652b      	str	r3, [r5, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 80017b0:	6014      	str	r4, [r2, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80017b2:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 80017b6:	2c60      	cmp	r4, #96	; 0x60
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80017b8:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80017ba:	d108      	bne.n	80017ce <I2C_DMAAbort+0x46>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80017bc:	2220      	movs	r2, #32
 80017be:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80017c2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80017c6:	6403      	str	r3, [r0, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80017c8:	f7ff ffdd 	bl	8001786 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80017cc:	bd70      	pop	{r4, r5, r6, pc}
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80017ce:	f001 0128 	and.w	r1, r1, #40	; 0x28
 80017d2:	2928      	cmp	r1, #40	; 0x28
 80017d4:	d10d      	bne.n	80017f2 <I2C_DMAAbort+0x6a>
      __HAL_I2C_ENABLE(hi2c);
 80017d6:	6814      	ldr	r4, [r2, #0]
 80017d8:	f044 0401 	orr.w	r4, r4, #1
 80017dc:	6014      	str	r4, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017de:	6814      	ldr	r4, [r2, #0]
 80017e0:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 80017e4:	6014      	str	r4, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80017e6:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80017e8:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
    HAL_I2C_ErrorCallback(hi2c);
 80017ec:	f7ff ff2b 	bl	8001646 <HAL_I2C_ErrorCallback>
}
 80017f0:	e7ec      	b.n	80017cc <I2C_DMAAbort+0x44>
      hi2c->State = HAL_I2C_STATE_READY;
 80017f2:	2220      	movs	r2, #32
 80017f4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80017f8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 80017fc:	e7f6      	b.n	80017ec <I2C_DMAAbort+0x64>
	...

08001800 <I2C_ITError>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001800:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8001804:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 8001808:	6803      	ldr	r3, [r0, #0]
 800180a:	2910      	cmp	r1, #16
{
 800180c:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800180e:	b2d2      	uxtb	r2, r2
{
 8001810:	4604      	mov	r4, r0
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8001812:	d105      	bne.n	8001820 <I2C_ITError+0x20>
 8001814:	2a22      	cmp	r2, #34	; 0x22
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001816:	bf02      	ittt	eq
 8001818:	6819      	ldreq	r1, [r3, #0]
 800181a:	f421 6100 	biceq.w	r1, r1, #2048	; 0x800
 800181e:	6019      	streq	r1, [r3, #0]
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001820:	f002 0128 	and.w	r1, r2, #40	; 0x28
 8001824:	2928      	cmp	r1, #40	; 0x28
 8001826:	d13a      	bne.n	800189e <I2C_ITError+0x9e>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001828:	2200      	movs	r2, #0
 800182a:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800182c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8001836:	d059      	beq.n	80018ec <I2C_ITError+0xec>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001838:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800183a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800183c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001840:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8001842:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001846:	2b01      	cmp	r3, #1
 8001848:	4b3c      	ldr	r3, [pc, #240]	; (800193c <I2C_ITError+0x13c>)
 800184a:	d035      	beq.n	80018b8 <I2C_ITError+0xb8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800184c:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800184e:	f7ff fbe5 	bl	800101c <HAL_DMA_Abort_IT>
 8001852:	b150      	cbz	r0, 800186a <I2C_ITError+0x6a>
        __HAL_I2C_DISABLE(hi2c);
 8001854:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001856:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8001858:	6813      	ldr	r3, [r2, #0]
 800185a:	f023 0301 	bic.w	r3, r3, #1
 800185e:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8001860:	2320      	movs	r3, #32
 8001862:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001866:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001868:	4798      	blx	r3
  CurrentState = hi2c->State;
 800186a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800186e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001870:	0752      	lsls	r2, r2, #29
  CurrentState = hi2c->State;
 8001872:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8001874:	d512      	bpl.n	800189c <I2C_ITError+0x9c>
 8001876:	2b28      	cmp	r3, #40	; 0x28
 8001878:	d110      	bne.n	800189c <I2C_ITError+0x9c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800187a:	6822      	ldr	r2, [r4, #0]
 800187c:	6853      	ldr	r3, [r2, #4]
 800187e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001882:	6053      	str	r3, [r2, #4]
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001884:	4b2e      	ldr	r3, [pc, #184]	; (8001940 <I2C_ITError+0x140>)
 8001886:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State         = HAL_I2C_STATE_READY;
 8001888:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 800188a:	2300      	movs	r3, #0
 800188c:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 800188e:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 8001890:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001894:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8001898:	f7ff fed2 	bl	8001640 <HAL_I2C_ListenCpltCallback>
}
 800189c:	bd10      	pop	{r4, pc}
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800189e:	6859      	ldr	r1, [r3, #4]
 80018a0:	0509      	lsls	r1, r1, #20
 80018a2:	d404      	bmi.n	80018ae <I2C_ITError+0xae>
 80018a4:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State = HAL_I2C_STATE_READY;
 80018a6:	bf1c      	itt	ne
 80018a8:	2220      	movne	r2, #32
 80018aa:	f884 203d 	strbne.w	r2, [r4, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 80018ae:	2200      	movs	r2, #0
 80018b0:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018b2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 80018b6:	e7bb      	b.n	8001830 <I2C_ITError+0x30>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80018b8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80018ba:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80018bc:	f7ff fbae 	bl	800101c <HAL_DMA_Abort_IT>
 80018c0:	2800      	cmp	r0, #0
 80018c2:	d0d2      	beq.n	800186a <I2C_ITError+0x6a>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80018c4:	6823      	ldr	r3, [r4, #0]
 80018c6:	695a      	ldr	r2, [r3, #20]
 80018c8:	0652      	lsls	r2, r2, #25
 80018ca:	d505      	bpl.n	80018d8 <I2C_ITError+0xd8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018cc:	691a      	ldr	r2, [r3, #16]
 80018ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018d0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80018d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018d4:	3301      	adds	r3, #1
 80018d6:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 80018d8:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80018da:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 80018dc:	6813      	ldr	r3, [r2, #0]
 80018de:	f023 0301 	bic.w	r3, r3, #1
 80018e2:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80018e4:	2320      	movs	r3, #32
 80018e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80018ea:	e7bc      	b.n	8001866 <I2C_ITError+0x66>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80018ec:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80018f0:	2960      	cmp	r1, #96	; 0x60
 80018f2:	d115      	bne.n	8001920 <I2C_ITError+0x120>
    hi2c->State = HAL_I2C_STATE_READY;
 80018f4:	2120      	movs	r1, #32
 80018f6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018fa:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80018fc:	695a      	ldr	r2, [r3, #20]
 80018fe:	0650      	lsls	r0, r2, #25
 8001900:	d505      	bpl.n	800190e <I2C_ITError+0x10e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001902:	691a      	ldr	r2, [r3, #16]
 8001904:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001906:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001908:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800190a:	3301      	adds	r3, #1
 800190c:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 800190e:	6822      	ldr	r2, [r4, #0]
 8001910:	6813      	ldr	r3, [r2, #0]
 8001912:	f023 0301 	bic.w	r3, r3, #1
 8001916:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8001918:	4620      	mov	r0, r4
 800191a:	f7ff ff34 	bl	8001786 <HAL_I2C_AbortCpltCallback>
 800191e:	e7a4      	b.n	800186a <I2C_ITError+0x6a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001920:	695a      	ldr	r2, [r3, #20]
 8001922:	0651      	lsls	r1, r2, #25
 8001924:	d505      	bpl.n	8001932 <I2C_ITError+0x132>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001926:	691a      	ldr	r2, [r3, #16]
 8001928:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800192a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800192c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800192e:	3301      	adds	r3, #1
 8001930:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8001932:	4620      	mov	r0, r4
 8001934:	f7ff fe87 	bl	8001646 <HAL_I2C_ErrorCallback>
 8001938:	e797      	b.n	800186a <I2C_ITError+0x6a>
 800193a:	bf00      	nop
 800193c:	08001789 	.word	0x08001789
 8001940:	ffff0000 	.word	0xffff0000

08001944 <HAL_I2C_EV_IRQHandler>:
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001944:	6803      	ldr	r3, [r0, #0]
{
 8001946:	b530      	push	{r4, r5, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001948:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800194a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800194c:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
{
 8001950:	4604      	mov	r4, r0
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001952:	b2c9      	uxtb	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001954:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001958:	2910      	cmp	r1, #16
{
 800195a:	b08d      	sub	sp, #52	; 0x34
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800195c:	b2c0      	uxtb	r0, r0
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800195e:	d002      	beq.n	8001966 <HAL_I2C_EV_IRQHandler+0x22>
 8001960:	2940      	cmp	r1, #64	; 0x40
 8001962:	f040 82b0 	bne.w	8001ec6 <HAL_I2C_EV_IRQHandler+0x582>
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001966:	6999      	ldr	r1, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001968:	6958      	ldr	r0, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800196a:	f010 0f01 	tst.w	r0, #1
 800196e:	d107      	bne.n	8001980 <HAL_I2C_EV_IRQHandler+0x3c>
 8001970:	f5b5 0f2a 	cmp.w	r5, #11141120	; 0xaa0000
 8001974:	d002      	beq.n	800197c <HAL_I2C_EV_IRQHandler+0x38>
 8001976:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 800197a:	d152      	bne.n	8001a22 <HAL_I2C_EV_IRQHandler+0xde>
}
 800197c:	b00d      	add	sp, #52	; 0x34
 800197e:	bd30      	pop	{r4, r5, pc}
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001980:	0595      	lsls	r5, r2, #22
 8001982:	d54e      	bpl.n	8001a22 <HAL_I2C_EV_IRQHandler+0xde>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8001984:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001986:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 800198a:	d10c      	bne.n	80019a6 <HAL_I2C_EV_IRQHandler+0x62>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800198c:	2201      	movs	r2, #1
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800198e:	62e2      	str	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001990:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8001994:	2a40      	cmp	r2, #64	; 0x40
 8001996:	d111      	bne.n	80019bc <HAL_I2C_EV_IRQHandler+0x78>
    if (hi2c->EventCount == 0U)
 8001998:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800199a:	b952      	cbnz	r2, 80019b2 <HAL_I2C_EV_IRQHandler+0x6e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800199c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800199e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80019a2:	611a      	str	r2, [r3, #16]
 80019a4:	e7ea      	b.n	800197c <HAL_I2C_EV_IRQHandler+0x38>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80019a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80019a8:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
 80019ac:	d1f0      	bne.n	8001990 <HAL_I2C_EV_IRQHandler+0x4c>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80019ae:	2208      	movs	r2, #8
 80019b0:	e7ed      	b.n	800198e <HAL_I2C_EV_IRQHandler+0x4a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80019b2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80019b4:	f042 0201 	orr.w	r2, r2, #1
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	e7f2      	b.n	80019a2 <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019bc:	6922      	ldr	r2, [r4, #16]
 80019be:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80019c2:	d11b      	bne.n	80019fc <HAL_I2C_EV_IRQHandler+0xb8>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80019c4:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80019c8:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80019ca:	6c62      	ldr	r2, [r4, #68]	; 0x44
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80019cc:	d112      	bne.n	80019f4 <HAL_I2C_EV_IRQHandler+0xb0>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80019ce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80019d2:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80019d4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80019d6:	b912      	cbnz	r2, 80019de <HAL_I2C_EV_IRQHandler+0x9a>
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80019d8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80019da:	2900      	cmp	r1, #0
 80019dc:	d0ce      	beq.n	800197c <HAL_I2C_EV_IRQHandler+0x38>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80019de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019e0:	b91a      	cbnz	r2, 80019ea <HAL_I2C_EV_IRQHandler+0xa6>
 80019e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80019e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019e6:	2a00      	cmp	r2, #0
 80019e8:	d0c8      	beq.n	800197c <HAL_I2C_EV_IRQHandler+0x38>
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	e7c3      	b.n	800197c <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80019f4:	f042 0201 	orr.w	r2, r2, #1
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	e7ea      	b.n	80019d2 <HAL_I2C_EV_IRQHandler+0x8e>
      if (hi2c->EventCount == 0U)
 80019fc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80019fe:	b932      	cbnz	r2, 8001a0e <HAL_I2C_EV_IRQHandler+0xca>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001a00:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001a02:	11d2      	asrs	r2, r2, #7
 8001a04:	f002 0206 	and.w	r2, r2, #6
 8001a08:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8001a0c:	e7c9      	b.n	80019a2 <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 8001a0e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001a10:	2a01      	cmp	r2, #1
 8001a12:	d1b3      	bne.n	800197c <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001a14:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001a16:	11d2      	asrs	r2, r2, #7
 8001a18:	f002 0206 	and.w	r2, r2, #6
 8001a1c:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 8001a20:	e7bf      	b.n	80019a2 <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a22:	0705      	lsls	r5, r0, #28
 8001a24:	d503      	bpl.n	8001a2e <HAL_I2C_EV_IRQHandler+0xea>
 8001a26:	0595      	lsls	r5, r2, #22
 8001a28:	d501      	bpl.n	8001a2e <HAL_I2C_EV_IRQHandler+0xea>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001a2a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001a2c:	e7e4      	b.n	80019f8 <HAL_I2C_EV_IRQHandler+0xb4>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a2e:	0785      	lsls	r5, r0, #30
 8001a30:	f140 80dd 	bpl.w	8001bee <HAL_I2C_EV_IRQHandler+0x2aa>
 8001a34:	0595      	lsls	r5, r2, #22
 8001a36:	f140 80da 	bpl.w	8001bee <HAL_I2C_EV_IRQHandler+0x2aa>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001a3a:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8001a3e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8001a40:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001a42:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8001a46:	2822      	cmp	r0, #34	; 0x22
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001a48:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001a4a:	f040 80c8 	bne.w	8001bde <HAL_I2C_EV_IRQHandler+0x29a>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001a4e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001a50:	b940      	cbnz	r0, 8001a64 <HAL_I2C_EV_IRQHandler+0x120>
 8001a52:	2940      	cmp	r1, #64	; 0x40
 8001a54:	d106      	bne.n	8001a64 <HAL_I2C_EV_IRQHandler+0x120>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a56:	9001      	str	r0, [sp, #4]
 8001a58:	695a      	ldr	r2, [r3, #20]
 8001a5a:	9201      	str	r2, [sp, #4]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	9301      	str	r3, [sp, #4]
 8001a60:	9b01      	ldr	r3, [sp, #4]
 8001a62:	e78b      	b.n	800197c <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001a64:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001a66:	b981      	cbnz	r1, 8001a8a <HAL_I2C_EV_IRQHandler+0x146>
 8001a68:	6920      	ldr	r0, [r4, #16]
 8001a6a:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8001a6e:	d10c      	bne.n	8001a8a <HAL_I2C_EV_IRQHandler+0x146>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a70:	9102      	str	r1, [sp, #8]
 8001a72:	695a      	ldr	r2, [r3, #20]
 8001a74:	9202      	str	r2, [sp, #8]
 8001a76:	699a      	ldr	r2, [r3, #24]
 8001a78:	9202      	str	r2, [sp, #8]
 8001a7a:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a82:	601a      	str	r2, [r3, #0]
            hi2c->EventCount++;
 8001a84:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001a86:	3301      	adds	r3, #1
 8001a88:	e028      	b.n	8001adc <HAL_I2C_EV_IRQHandler+0x198>
      if (hi2c->XferCount == 0U)
 8001a8a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8001a8c:	b289      	uxth	r1, r1
 8001a8e:	b951      	cbnz	r1, 8001aa6 <HAL_I2C_EV_IRQHandler+0x162>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a90:	9103      	str	r1, [sp, #12]
 8001a92:	695a      	ldr	r2, [r3, #20]
 8001a94:	9203      	str	r2, [sp, #12]
 8001a96:	699a      	ldr	r2, [r3, #24]
 8001a98:	9203      	str	r2, [sp, #12]
 8001a9a:	9a03      	ldr	r2, [sp, #12]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	e019      	b.n	8001ada <HAL_I2C_EV_IRQHandler+0x196>
      else if (hi2c->XferCount == 1U)
 8001aa6:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8001aa8:	b289      	uxth	r1, r1
 8001aaa:	2901      	cmp	r1, #1
 8001aac:	d14a      	bne.n	8001b44 <HAL_I2C_EV_IRQHandler+0x200>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8001aae:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001ab2:	d11c      	bne.n	8001aee <HAL_I2C_EV_IRQHandler+0x1aa>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aba:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8001ac2:	d00d      	beq.n	8001ae0 <HAL_I2C_EV_IRQHandler+0x19c>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aca:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001acc:	2200      	movs	r2, #0
 8001ace:	9204      	str	r2, [sp, #16]
 8001ad0:	695a      	ldr	r2, [r3, #20]
 8001ad2:	9204      	str	r2, [sp, #16]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	9304      	str	r3, [sp, #16]
 8001ad8:	9b04      	ldr	r3, [sp, #16]
      hi2c->EventCount = 0U;
 8001ada:	2300      	movs	r3, #0
 8001adc:	6523      	str	r3, [r4, #80]	; 0x50
 8001ade:	e74d      	b.n	800197c <HAL_I2C_EV_IRQHandler+0x38>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ae0:	9205      	str	r2, [sp, #20]
 8001ae2:	695a      	ldr	r2, [r3, #20]
 8001ae4:	9205      	str	r2, [sp, #20]
 8001ae6:	699a      	ldr	r2, [r3, #24]
 8001ae8:	9205      	str	r2, [sp, #20]
 8001aea:	9a05      	ldr	r2, [sp, #20]
 8001aec:	e7d6      	b.n	8001a9c <HAL_I2C_EV_IRQHandler+0x158>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8001aee:	2a08      	cmp	r2, #8
 8001af0:	d01c      	beq.n	8001b2c <HAL_I2C_EV_IRQHandler+0x1e8>
 8001af2:	2a20      	cmp	r2, #32
 8001af4:	d01a      	beq.n	8001b2c <HAL_I2C_EV_IRQHandler+0x1e8>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8001af6:	2d12      	cmp	r5, #18
 8001af8:	d10d      	bne.n	8001b16 <HAL_I2C_EV_IRQHandler+0x1d2>
 8001afa:	2a01      	cmp	r2, #1
 8001afc:	d116      	bne.n	8001b2c <HAL_I2C_EV_IRQHandler+0x1e8>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b04:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b06:	2200      	movs	r2, #0
 8001b08:	9206      	str	r2, [sp, #24]
 8001b0a:	695a      	ldr	r2, [r3, #20]
 8001b0c:	9206      	str	r2, [sp, #24]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	9306      	str	r3, [sp, #24]
 8001b12:	9b06      	ldr	r3, [sp, #24]
 8001b14:	e7e1      	b.n	8001ada <HAL_I2C_EV_IRQHandler+0x196>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001b16:	2a10      	cmp	r2, #16
 8001b18:	d8f1      	bhi.n	8001afe <HAL_I2C_EV_IRQHandler+0x1ba>
 8001b1a:	49a0      	ldr	r1, [pc, #640]	; (8001d9c <HAL_I2C_EV_IRQHandler+0x458>)
 8001b1c:	fa21 f202 	lsr.w	r2, r1, r2
 8001b20:	07d0      	lsls	r0, r2, #31
 8001b22:	d5ec      	bpl.n	8001afe <HAL_I2C_EV_IRQHandler+0x1ba>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b2a:	e7eb      	b.n	8001b04 <HAL_I2C_EV_IRQHandler+0x1c0>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b32:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b34:	2200      	movs	r2, #0
 8001b36:	9207      	str	r2, [sp, #28]
 8001b38:	695a      	ldr	r2, [r3, #20]
 8001b3a:	9207      	str	r2, [sp, #28]
 8001b3c:	699a      	ldr	r2, [r3, #24]
 8001b3e:	9207      	str	r2, [sp, #28]
 8001b40:	9a07      	ldr	r2, [sp, #28]
 8001b42:	e7ab      	b.n	8001a9c <HAL_I2C_EV_IRQHandler+0x158>
      else if (hi2c->XferCount == 2U)
 8001b44:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8001b46:	b289      	uxth	r1, r1
 8001b48:	2902      	cmp	r1, #2
 8001b4a:	d12a      	bne.n	8001ba2 <HAL_I2C_EV_IRQHandler+0x25e>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001b4c:	2a10      	cmp	r2, #16
 8001b4e:	d803      	bhi.n	8001b58 <HAL_I2C_EV_IRQHandler+0x214>
 8001b50:	4992      	ldr	r1, [pc, #584]	; (8001d9c <HAL_I2C_EV_IRQHandler+0x458>)
 8001b52:	40d1      	lsrs	r1, r2
 8001b54:	07c9      	lsls	r1, r1, #31
 8001b56:	d420      	bmi.n	8001b9a <HAL_I2C_EV_IRQHandler+0x256>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b58:	6819      	ldr	r1, [r3, #0]
 8001b5a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001b5e:	6019      	str	r1, [r3, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b60:	6819      	ldr	r1, [r3, #0]
 8001b62:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b66:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001b68:	6859      	ldr	r1, [r3, #4]
 8001b6a:	050d      	lsls	r5, r1, #20
 8001b6c:	d50d      	bpl.n	8001b8a <HAL_I2C_EV_IRQHandler+0x246>
 8001b6e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001b72:	d006      	beq.n	8001b82 <HAL_I2C_EV_IRQHandler+0x23e>
 8001b74:	1e51      	subs	r1, r2, #1
 8001b76:	291f      	cmp	r1, #31
 8001b78:	d807      	bhi.n	8001b8a <HAL_I2C_EV_IRQHandler+0x246>
 8001b7a:	4a89      	ldr	r2, [pc, #548]	; (8001da0 <HAL_I2C_EV_IRQHandler+0x45c>)
 8001b7c:	40ca      	lsrs	r2, r1
 8001b7e:	07d0      	lsls	r0, r2, #31
 8001b80:	d503      	bpl.n	8001b8a <HAL_I2C_EV_IRQHandler+0x246>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001b88:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	9208      	str	r2, [sp, #32]
 8001b8e:	695a      	ldr	r2, [r3, #20]
 8001b90:	9208      	str	r2, [sp, #32]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	9308      	str	r3, [sp, #32]
 8001b96:	9b08      	ldr	r3, [sp, #32]
 8001b98:	e79f      	b.n	8001ada <HAL_I2C_EV_IRQHandler+0x196>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b9a:	6819      	ldr	r1, [r3, #0]
 8001b9c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001ba0:	e7e1      	b.n	8001b66 <HAL_I2C_EV_IRQHandler+0x222>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ba2:	6819      	ldr	r1, [r3, #0]
 8001ba4:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001ba8:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001baa:	6859      	ldr	r1, [r3, #4]
 8001bac:	0509      	lsls	r1, r1, #20
 8001bae:	d50e      	bpl.n	8001bce <HAL_I2C_EV_IRQHandler+0x28a>
 8001bb0:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001bb4:	d007      	beq.n	8001bc6 <HAL_I2C_EV_IRQHandler+0x282>
 8001bb6:	3a01      	subs	r2, #1
 8001bb8:	2a1f      	cmp	r2, #31
 8001bba:	d808      	bhi.n	8001bce <HAL_I2C_EV_IRQHandler+0x28a>
 8001bbc:	4978      	ldr	r1, [pc, #480]	; (8001da0 <HAL_I2C_EV_IRQHandler+0x45c>)
 8001bbe:	fa21 f202 	lsr.w	r2, r1, r2
 8001bc2:	07d2      	lsls	r2, r2, #31
 8001bc4:	d503      	bpl.n	8001bce <HAL_I2C_EV_IRQHandler+0x28a>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001bcc:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	9209      	str	r2, [sp, #36]	; 0x24
 8001bd2:	695a      	ldr	r2, [r3, #20]
 8001bd4:	9209      	str	r2, [sp, #36]	; 0x24
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8001bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001bdc:	e77d      	b.n	8001ada <HAL_I2C_EV_IRQHandler+0x196>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bde:	2200      	movs	r2, #0
 8001be0:	920a      	str	r2, [sp, #40]	; 0x28
 8001be2:	695a      	ldr	r2, [r3, #20]
 8001be4:	920a      	str	r2, [sp, #40]	; 0x28
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	930a      	str	r3, [sp, #40]	; 0x28
 8001bea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001bec:	e6c6      	b.n	800197c <HAL_I2C_EV_IRQHandler+0x38>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001bee:	f011 0f04 	tst.w	r1, #4
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001bf2:	6859      	ldr	r1, [r3, #4]
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001bf4:	f000 80a8 	beq.w	8001d48 <HAL_I2C_EV_IRQHandler+0x404>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001bf8:	050d      	lsls	r5, r1, #20
 8001bfa:	f53f aebf 	bmi.w	800197c <HAL_I2C_EV_IRQHandler+0x38>
 8001bfe:	f3c0 0180 	ubfx	r1, r0, #2, #1
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c02:	0600      	lsls	r0, r0, #24
 8001c04:	d569      	bpl.n	8001cda <HAL_I2C_EV_IRQHandler+0x396>
 8001c06:	0555      	lsls	r5, r2, #21
 8001c08:	d567      	bpl.n	8001cda <HAL_I2C_EV_IRQHandler+0x396>
 8001c0a:	2900      	cmp	r1, #0
 8001c0c:	d168      	bne.n	8001ce0 <HAL_I2C_EV_IRQHandler+0x39c>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c0e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001c12:	8d25      	ldrh	r5, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001c14:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001c18:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c1a:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001c1c:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001c1e:	b9c5      	cbnz	r5, 8001c52 <HAL_I2C_EV_IRQHandler+0x30e>
 8001c20:	2a21      	cmp	r2, #33	; 0x21
 8001c22:	d118      	bne.n	8001c56 <HAL_I2C_EV_IRQHandler+0x312>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c24:	2808      	cmp	r0, #8
 8001c26:	d078      	beq.n	8001d1a <HAL_I2C_EV_IRQHandler+0x3d6>
 8001c28:	2820      	cmp	r0, #32
 8001c2a:	d076      	beq.n	8001d1a <HAL_I2C_EV_IRQHandler+0x3d6>
 8001c2c:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8001c30:	d073      	beq.n	8001d1a <HAL_I2C_EV_IRQHandler+0x3d6>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c38:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001c3a:	2311      	movs	r3, #17
 8001c3c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001c44:	2320      	movs	r3, #32
 8001c46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	f7ff fcf4 	bl	8001638 <HAL_I2C_MasterTxCpltCallback>
 8001c50:	e694      	b.n	800197c <HAL_I2C_EV_IRQHandler+0x38>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001c52:	2a21      	cmp	r2, #33	; 0x21
 8001c54:	d005      	beq.n	8001c62 <HAL_I2C_EV_IRQHandler+0x31e>
 8001c56:	2940      	cmp	r1, #64	; 0x40
 8001c58:	f47f ae90 	bne.w	800197c <HAL_I2C_EV_IRQHandler+0x38>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001c5c:	2a22      	cmp	r2, #34	; 0x22
 8001c5e:	f47f ae8d 	bne.w	800197c <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount == 0U)
 8001c62:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001c64:	b292      	uxth	r2, r2
 8001c66:	b91a      	cbnz	r2, 8001c70 <HAL_I2C_EV_IRQHandler+0x32c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c6e:	e6bf      	b.n	80019f0 <HAL_I2C_EV_IRQHandler+0xac>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c70:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8001c74:	2a40      	cmp	r2, #64	; 0x40
 8001c76:	d126      	bne.n	8001cc6 <HAL_I2C_EV_IRQHandler+0x382>
        if (hi2c->EventCount == 0U)
 8001c78:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001c7a:	b962      	cbnz	r2, 8001c96 <HAL_I2C_EV_IRQHandler+0x352>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001c7c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8001c7e:	2a01      	cmp	r2, #1
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001c80:	6ca2      	ldr	r2, [r4, #72]	; 0x48
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001c82:	d104      	bne.n	8001c8e <HAL_I2C_EV_IRQHandler+0x34a>
 8001c84:	b2d2      	uxtb	r2, r2
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001c86:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 8001c88:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001c8a:	3302      	adds	r3, #2
 8001c8c:	e726      	b.n	8001adc <HAL_I2C_EV_IRQHandler+0x198>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001c8e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001c92:	611a      	str	r2, [r3, #16]
 8001c94:	e6f6      	b.n	8001a84 <HAL_I2C_EV_IRQHandler+0x140>
        else if (hi2c->EventCount == 1U)
 8001c96:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001c98:	2a01      	cmp	r2, #1
 8001c9a:	d102      	bne.n	8001ca2 <HAL_I2C_EV_IRQHandler+0x35e>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001c9c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	e7f7      	b.n	8001c92 <HAL_I2C_EV_IRQHandler+0x34e>
        else if (hi2c->EventCount == 2U)
 8001ca2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001ca4:	2a02      	cmp	r2, #2
 8001ca6:	f47f ae69 	bne.w	800197c <HAL_I2C_EV_IRQHandler+0x38>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001caa:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001cae:	2a22      	cmp	r2, #34	; 0x22
 8001cb0:	d104      	bne.n	8001cbc <HAL_I2C_EV_IRQHandler+0x378>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	e65f      	b.n	800197c <HAL_I2C_EV_IRQHandler+0x38>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001cbc:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001cc0:	2a21      	cmp	r2, #33	; 0x21
 8001cc2:	f47f ae5b 	bne.w	800197c <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cc6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001cc8:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001ccc:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 8001cce:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8001cd0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001cd8:	e650      	b.n	800197c <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cda:	2900      	cmp	r1, #0
 8001cdc:	f43f ae4e 	beq.w	800197c <HAL_I2C_EV_IRQHandler+0x38>
 8001ce0:	0590      	lsls	r0, r2, #22
 8001ce2:	f57f ae4b 	bpl.w	800197c <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ce6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001ce8:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001cec:	2a21      	cmp	r2, #33	; 0x21
 8001cee:	f47f ae45 	bne.w	800197c <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount != 0U)
 8001cf2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001cf4:	b292      	uxth	r2, r2
 8001cf6:	2a00      	cmp	r2, #0
 8001cf8:	d1e5      	bne.n	8001cc6 <HAL_I2C_EV_IRQHandler+0x382>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001cfa:	2908      	cmp	r1, #8
 8001cfc:	d00d      	beq.n	8001d1a <HAL_I2C_EV_IRQHandler+0x3d6>
 8001cfe:	2920      	cmp	r1, #32
 8001d00:	d00b      	beq.n	8001d1a <HAL_I2C_EV_IRQHandler+0x3d6>
 8001d02:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8001d06:	d008      	beq.n	8001d1a <HAL_I2C_EV_IRQHandler+0x3d6>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d08:	6859      	ldr	r1, [r3, #4]
 8001d0a:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8001d0e:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001d10:	2311      	movs	r3, #17
 8001d12:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d14:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8001d18:	e794      	b.n	8001c44 <HAL_I2C_EV_IRQHandler+0x300>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d20:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d28:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001d2a:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8001d2c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001d2e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001d30:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d34:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d38:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d3c:	2a40      	cmp	r2, #64	; 0x40
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001d3e:	4620      	mov	r0, r4
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d40:	d184      	bne.n	8001c4c <HAL_I2C_EV_IRQHandler+0x308>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001d42:	f7ff fc7e 	bl	8001642 <HAL_I2C_MemTxCpltCallback>
 8001d46:	e619      	b.n	800197c <HAL_I2C_EV_IRQHandler+0x38>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001d48:	0509      	lsls	r1, r1, #20
 8001d4a:	f53f ae17 	bmi.w	800197c <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d4e:	0645      	lsls	r5, r0, #25
 8001d50:	f3c0 0180 	ubfx	r1, r0, #2, #1
 8001d54:	d54d      	bpl.n	8001df2 <HAL_I2C_EV_IRQHandler+0x4ae>
 8001d56:	0550      	lsls	r0, r2, #21
 8001d58:	d54b      	bpl.n	8001df2 <HAL_I2C_EV_IRQHandler+0x4ae>
 8001d5a:	2900      	cmp	r1, #0
 8001d5c:	d14c      	bne.n	8001df8 <HAL_I2C_EV_IRQHandler+0x4b4>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d5e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001d62:	2a22      	cmp	r2, #34	; 0x22
 8001d64:	f47f ae0a 	bne.w	800197c <HAL_I2C_EV_IRQHandler+0x38>
    tmp = hi2c->XferCount;
 8001d68:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001d6a:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8001d6c:	2a03      	cmp	r2, #3
 8001d6e:	d919      	bls.n	8001da4 <HAL_I2C_EV_IRQHandler+0x460>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d70:	691a      	ldr	r2, [r3, #16]
 8001d72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d74:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001d76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d78:	3301      	adds	r3, #1
 8001d7a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001d7c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8001d84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	f47f adf7 	bne.w	800197c <HAL_I2C_EV_IRQHandler+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d8e:	6822      	ldr	r2, [r4, #0]
 8001d90:	6853      	ldr	r3, [r2, #4]
 8001d92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d96:	6053      	str	r3, [r2, #4]
 8001d98:	e5f0      	b.n	800197c <HAL_I2C_EV_IRQHandler+0x38>
 8001d9a:	bf00      	nop
 8001d9c:	00010014 	.word	0x00010014
 8001da0:	80008081 	.word	0x80008081
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001da4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001da6:	2802      	cmp	r0, #2
 8001da8:	f43f ade8 	beq.w	800197c <HAL_I2C_EV_IRQHandler+0x38>
 8001dac:	2a01      	cmp	r2, #1
 8001dae:	f63f ade5 	bhi.w	800197c <HAL_I2C_EV_IRQHandler+0x38>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001db8:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001dc0:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dc2:	691a      	ldr	r2, [r3, #16]
 8001dc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001dc6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001dc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001dca:	3301      	adds	r3, #1
 8001dcc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001dce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8001dd6:	2320      	movs	r3, #32
 8001dd8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ddc:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de0:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001de4:	2b40      	cmp	r3, #64	; 0x40
 8001de6:	d168      	bne.n	8001eba <HAL_I2C_EV_IRQHandler+0x576>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001de8:	6321      	str	r1, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001dea:	4620      	mov	r0, r4
 8001dec:	f7ff fc2a 	bl	8001644 <HAL_I2C_MemRxCpltCallback>
 8001df0:	e5c4      	b.n	800197c <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001df2:	2900      	cmp	r1, #0
 8001df4:	f43f adc2 	beq.w	800197c <HAL_I2C_EV_IRQHandler+0x38>
 8001df8:	0592      	lsls	r2, r2, #22
 8001dfa:	f57f adbf 	bpl.w	800197c <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001dfe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8001e00:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8001e02:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001e04:	b280      	uxth	r0, r0
 8001e06:	2804      	cmp	r0, #4
 8001e08:	d109      	bne.n	8001e1e <HAL_I2C_EV_IRQHandler+0x4da>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e10:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8001e16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e18:	3301      	adds	r3, #1
 8001e1a:	6263      	str	r3, [r4, #36]	; 0x24
 8001e1c:	e758      	b.n	8001cd0 <HAL_I2C_EV_IRQHandler+0x38c>
  else if (hi2c->XferCount == 3U)
 8001e1e:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8001e20:	b280      	uxth	r0, r0
 8001e22:	2803      	cmp	r0, #3
 8001e24:	d10c      	bne.n	8001e40 <HAL_I2C_EV_IRQHandler+0x4fc>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e26:	6858      	ldr	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001e28:	2a04      	cmp	r2, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e2a:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 8001e2e:	6058      	str	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001e30:	d0ef      	beq.n	8001e12 <HAL_I2C_EV_IRQHandler+0x4ce>
 8001e32:	2a02      	cmp	r2, #2
 8001e34:	d0ed      	beq.n	8001e12 <HAL_I2C_EV_IRQHandler+0x4ce>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	e7e8      	b.n	8001e12 <HAL_I2C_EV_IRQHandler+0x4ce>
  else if (hi2c->XferCount == 2U)
 8001e40:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8001e42:	b280      	uxth	r0, r0
 8001e44:	2802      	cmp	r0, #2
 8001e46:	d1e4      	bne.n	8001e12 <HAL_I2C_EV_IRQHandler+0x4ce>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001e48:	2a01      	cmp	r2, #1
 8001e4a:	d001      	beq.n	8001e50 <HAL_I2C_EV_IRQHandler+0x50c>
 8001e4c:	2a10      	cmp	r2, #16
 8001e4e:	d128      	bne.n	8001ea2 <HAL_I2C_EV_IRQHandler+0x55e>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e56:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8001e5c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001e5e:	1c53      	adds	r3, r2, #1
 8001e60:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8001e62:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e64:	3b01      	subs	r3, #1
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e6a:	6823      	ldr	r3, [r4, #0]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 8001e70:	6a63      	ldr	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001e72:	6822      	ldr	r2, [r4, #0]
    hi2c->pBuffPtr++;
 8001e74:	3301      	adds	r3, #1
 8001e76:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8001e78:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001e80:	6853      	ldr	r3, [r2, #4]
 8001e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e86:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001e88:	2320      	movs	r3, #32
 8001e8a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e8e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8001e92:	2b40      	cmp	r3, #64	; 0x40
 8001e94:	f04f 0300 	mov.w	r3, #0
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e98:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e9c:	d10d      	bne.n	8001eba <HAL_I2C_EV_IRQHandler+0x576>
      hi2c->PreviousState = I2C_STATE_NONE;
 8001e9e:	6323      	str	r3, [r4, #48]	; 0x30
 8001ea0:	e7a3      	b.n	8001dea <HAL_I2C_EV_IRQHandler+0x4a6>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001ea2:	2a04      	cmp	r2, #4
 8001ea4:	d001      	beq.n	8001eaa <HAL_I2C_EV_IRQHandler+0x566>
 8001ea6:	2a02      	cmp	r2, #2
 8001ea8:	d103      	bne.n	8001eb2 <HAL_I2C_EV_IRQHandler+0x56e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001eb0:	e7d1      	b.n	8001e56 <HAL_I2C_EV_IRQHandler+0x512>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eb8:	e7cd      	b.n	8001e56 <HAL_I2C_EV_IRQHandler+0x512>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001eba:	2312      	movs	r3, #18
 8001ebc:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	f7ff fbbb 	bl	800163a <HAL_I2C_MasterRxCpltCallback>
 8001ec4:	e55a      	b.n	800197c <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001ec6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001ec8:	b321      	cbz	r1, 8001f14 <HAL_I2C_EV_IRQHandler+0x5d0>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001eca:	6959      	ldr	r1, [r3, #20]
  uint32_t sr2itflags               = 0U;
 8001ecc:	2500      	movs	r5, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ece:	f011 0f02 	tst.w	r1, #2
 8001ed2:	d029      	beq.n	8001f28 <HAL_I2C_EV_IRQHandler+0x5e4>
 8001ed4:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001ed8:	d026      	beq.n	8001f28 <HAL_I2C_EV_IRQHandler+0x5e4>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001eda:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001edc:	b102      	cbz	r2, 8001ee0 <HAL_I2C_EV_IRQHandler+0x59c>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001ede:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001ee0:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001ee4:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8001ee8:	2a28      	cmp	r2, #40	; 0x28
 8001eea:	d116      	bne.n	8001f1a <HAL_I2C_EV_IRQHandler+0x5d6>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ef2:	605a      	str	r2, [r3, #4]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8001ef4:	ea6f 0195 	mvn.w	r1, r5, lsr #2
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8001ef8:	062b      	lsls	r3, r5, #24
    __HAL_UNLOCK(hi2c);
 8001efa:	f04f 0300 	mov.w	r3, #0
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8001efe:	f001 0101 	and.w	r1, r1, #1
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8001f02:	bf54      	ite	pl
 8001f04:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8001f06:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 8001f08:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	f7ff fb96 	bl	800163e <HAL_I2C_AddrCallback>
 8001f12:	e533      	b.n	800197c <HAL_I2C_EV_IRQHandler+0x38>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f14:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f16:	6959      	ldr	r1, [r3, #20]
 8001f18:	e7d9      	b.n	8001ece <HAL_I2C_EV_IRQHandler+0x58a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f1a:	f06f 0202 	mvn.w	r2, #2
 8001f1e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8001f20:	2300      	movs	r3, #0
 8001f22:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001f26:	e529      	b.n	800197c <HAL_I2C_EV_IRQHandler+0x38>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f28:	06cd      	lsls	r5, r1, #27
 8001f2a:	f140 80b1 	bpl.w	8002090 <HAL_I2C_EV_IRQHandler+0x74c>
 8001f2e:	0595      	lsls	r5, r2, #22
 8001f30:	f140 80ae 	bpl.w	8002090 <HAL_I2C_EV_IRQHandler+0x74c>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f34:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f3e:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8001f40:	2200      	movs	r2, #0
 8001f42:	920b      	str	r2, [sp, #44]	; 0x2c
 8001f44:	695a      	ldr	r2, [r3, #20]
 8001f46:	920b      	str	r2, [sp, #44]	; 0x2c
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	f042 0201 	orr.w	r2, r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f58:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	0511      	lsls	r1, r2, #20
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f5e:	b2ed      	uxtb	r5, r5
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001f60:	d520      	bpl.n	8001fa4 <HAL_I2C_EV_IRQHandler+0x660>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001f62:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8001f66:	2a22      	cmp	r2, #34	; 0x22
 8001f68:	d14a      	bne.n	8002000 <HAL_I2C_EV_IRQHandler+0x6bc>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8001f6a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001f6c:	6802      	ldr	r2, [r0, #0]
 8001f6e:	6852      	ldr	r2, [r2, #4]
 8001f70:	b292      	uxth	r2, r2
 8001f72:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8001f74:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001f76:	b292      	uxth	r2, r2
 8001f78:	b11a      	cbz	r2, 8001f82 <HAL_I2C_EV_IRQHandler+0x63e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f7a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001f7c:	f042 0204 	orr.w	r2, r2, #4
 8001f80:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f88:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001f8a:	f7ff f917 	bl	80011bc <HAL_DMA_GetState>
 8001f8e:	2801      	cmp	r0, #1
 8001f90:	d008      	beq.n	8001fa4 <HAL_I2C_EV_IRQHandler+0x660>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001f92:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001f94:	4b79      	ldr	r3, [pc, #484]	; (800217c <HAL_I2C_EV_IRQHandler+0x838>)
 8001f96:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001f98:	f7ff f840 	bl	800101c <HAL_DMA_Abort_IT>
 8001f9c:	b110      	cbz	r0, 8001fa4 <HAL_I2C_EV_IRQHandler+0x660>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001f9e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001fa0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001fa2:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8001fa4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	b313      	cbz	r3, 8001ff0 <HAL_I2C_EV_IRQHandler+0x6ac>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001faa:	6823      	ldr	r3, [r4, #0]
 8001fac:	695a      	ldr	r2, [r3, #20]
 8001fae:	0752      	lsls	r2, r2, #29
 8001fb0:	d509      	bpl.n	8001fc6 <HAL_I2C_EV_IRQHandler+0x682>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fb2:	691a      	ldr	r2, [r3, #16]
 8001fb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fb6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001fb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fba:	3301      	adds	r3, #1
 8001fbc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001fbe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001fc6:	6823      	ldr	r3, [r4, #0]
 8001fc8:	695a      	ldr	r2, [r3, #20]
 8001fca:	0650      	lsls	r0, r2, #25
 8001fcc:	d509      	bpl.n	8001fe2 <HAL_I2C_EV_IRQHandler+0x69e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fce:	691a      	ldr	r2, [r3, #16]
 8001fd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fd2:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001fd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001fda:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 8001fe2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	b11b      	cbz	r3, 8001ff0 <HAL_I2C_EV_IRQHandler+0x6ac>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001fe8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fea:	f043 0304 	orr.w	r3, r3, #4
 8001fee:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001ff0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ff2:	b313      	cbz	r3, 800203a <HAL_I2C_EV_IRQHandler+0x6f6>
    I2C_ITError(hi2c);
 8001ff4:	4620      	mov	r0, r4
}
 8001ff6:	b00d      	add	sp, #52	; 0x34
 8001ff8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    I2C_ITError(hi2c);
 8001ffc:	f7ff bc00 	b.w	8001800 <I2C_ITError>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002000:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002002:	6802      	ldr	r2, [r0, #0]
 8002004:	6852      	ldr	r2, [r2, #4]
 8002006:	b292      	uxth	r2, r2
 8002008:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 800200a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800200c:	b292      	uxth	r2, r2
 800200e:	b11a      	cbz	r2, 8002018 <HAL_I2C_EV_IRQHandler+0x6d4>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002010:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002012:	f042 0204 	orr.w	r2, r2, #4
 8002016:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800201e:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002020:	f7ff f8cc 	bl	80011bc <HAL_DMA_GetState>
 8002024:	2801      	cmp	r0, #1
 8002026:	d0bd      	beq.n	8001fa4 <HAL_I2C_EV_IRQHandler+0x660>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002028:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800202a:	4b54      	ldr	r3, [pc, #336]	; (800217c <HAL_I2C_EV_IRQHandler+0x838>)
 800202c:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800202e:	f7fe fff5 	bl	800101c <HAL_DMA_Abort_IT>
 8002032:	2800      	cmp	r0, #0
 8002034:	d0b6      	beq.n	8001fa4 <HAL_I2C_EV_IRQHandler+0x660>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002036:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002038:	e7b2      	b.n	8001fa0 <HAL_I2C_EV_IRQHandler+0x65c>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800203a:	2d2a      	cmp	r5, #42	; 0x2a
 800203c:	d106      	bne.n	800204c <HAL_I2C_EV_IRQHandler+0x708>
      hi2c->PreviousState = I2C_STATE_NONE;
 800203e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002040:	2328      	movs	r3, #40	; 0x28
 8002042:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002046:	4620      	mov	r0, r4
 8002048:	f001 fd20 	bl	8003a8c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800204c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002050:	2b28      	cmp	r3, #40	; 0x28
 8002052:	d10c      	bne.n	800206e <HAL_I2C_EV_IRQHandler+0x72a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002054:	4b4a      	ldr	r3, [pc, #296]	; (8002180 <HAL_I2C_EV_IRQHandler+0x83c>)
 8002056:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 8002058:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 800205a:	2300      	movs	r3, #0
 800205c:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_ListenCpltCallback(hi2c);
 800205e:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 8002060:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002064:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002068:	f7ff faea 	bl	8001640 <HAL_I2C_ListenCpltCallback>
 800206c:	e486      	b.n	800197c <HAL_I2C_EV_IRQHandler+0x38>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800206e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002070:	2b22      	cmp	r3, #34	; 0x22
 8002072:	d002      	beq.n	800207a <HAL_I2C_EV_IRQHandler+0x736>
 8002074:	2d22      	cmp	r5, #34	; 0x22
 8002076:	f47f ac81 	bne.w	800197c <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->PreviousState = I2C_STATE_NONE;
 800207a:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800207c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800207e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002080:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002084:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002088:	4620      	mov	r0, r4
 800208a:	f001 fcff 	bl	8003a8c <HAL_I2C_SlaveRxCpltCallback>
 800208e:	e475      	b.n	800197c <HAL_I2C_EV_IRQHandler+0x38>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002090:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
 8002094:	2821      	cmp	r0, #33	; 0x21
 8002096:	f3c1 0580 	ubfx	r5, r1, #2, #1
 800209a:	d135      	bne.n	8002108 <HAL_I2C_EV_IRQHandler+0x7c4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800209c:	0609      	lsls	r1, r1, #24
 800209e:	d527      	bpl.n	80020f0 <HAL_I2C_EV_IRQHandler+0x7ac>
 80020a0:	0551      	lsls	r1, r2, #21
 80020a2:	d525      	bpl.n	80020f0 <HAL_I2C_EV_IRQHandler+0x7ac>
 80020a4:	bb3d      	cbnz	r5, 80020f6 <HAL_I2C_EV_IRQHandler+0x7b2>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80020a6:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 80020aa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80020ac:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80020ae:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 80020b0:	2a00      	cmp	r2, #0
 80020b2:	f43f ac63 	beq.w	800197c <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80020b8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80020bc:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 80020be:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80020c0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80020c2:	3a01      	subs	r2, #1
 80020c4:	b292      	uxth	r2, r2
 80020c6:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80020c8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80020ca:	b292      	uxth	r2, r2
 80020cc:	2a00      	cmp	r2, #0
 80020ce:	f47f ac55 	bne.w	800197c <HAL_I2C_EV_IRQHandler+0x38>
 80020d2:	2929      	cmp	r1, #41	; 0x29
 80020d4:	f47f ac52 	bne.w	800197c <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020de:	605a      	str	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80020e0:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80020e2:	6320      	str	r0, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80020e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80020e8:	4620      	mov	r0, r4
 80020ea:	f7ff faa7 	bl	800163c <HAL_I2C_SlaveTxCpltCallback>
 80020ee:	e445      	b.n	800197c <HAL_I2C_EV_IRQHandler+0x38>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020f0:	2d00      	cmp	r5, #0
 80020f2:	f43f ac43 	beq.w	800197c <HAL_I2C_EV_IRQHandler+0x38>
 80020f6:	0595      	lsls	r5, r2, #22
 80020f8:	f57f ac40 	bpl.w	800197c <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 80020fc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80020fe:	b292      	uxth	r2, r2
 8002100:	2a00      	cmp	r2, #0
 8002102:	f47f ade0 	bne.w	8001cc6 <HAL_I2C_EV_IRQHandler+0x382>
 8002106:	e439      	b.n	800197c <HAL_I2C_EV_IRQHandler+0x38>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002108:	0648      	lsls	r0, r1, #25
 800210a:	d527      	bpl.n	800215c <HAL_I2C_EV_IRQHandler+0x818>
 800210c:	0551      	lsls	r1, r2, #21
 800210e:	d525      	bpl.n	800215c <HAL_I2C_EV_IRQHandler+0x818>
 8002110:	bb3d      	cbnz	r5, 8002162 <HAL_I2C_EV_IRQHandler+0x81e>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002112:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8002116:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8002118:	b289      	uxth	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800211a:	b2d2      	uxtb	r2, r2
  if (hi2c->XferCount != 0U)
 800211c:	2900      	cmp	r1, #0
 800211e:	f43f ac2d 	beq.w	800197c <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002122:	6919      	ldr	r1, [r3, #16]
 8002124:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002126:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 8002128:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800212a:	3301      	adds	r3, #1
 800212c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800212e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002130:	3b01      	subs	r3, #1
 8002132:	b29b      	uxth	r3, r3
 8002134:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002136:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002138:	b29b      	uxth	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	f47f ac1e 	bne.w	800197c <HAL_I2C_EV_IRQHandler+0x38>
 8002140:	2a2a      	cmp	r2, #42	; 0x2a
 8002142:	f47f ac1b 	bne.w	800197c <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002146:	6822      	ldr	r2, [r4, #0]
 8002148:	6853      	ldr	r3, [r2, #4]
 800214a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800214e:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002150:	2322      	movs	r3, #34	; 0x22
 8002152:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002154:	2328      	movs	r3, #40	; 0x28
 8002156:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 800215a:	e795      	b.n	8002088 <HAL_I2C_EV_IRQHandler+0x744>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800215c:	2d00      	cmp	r5, #0
 800215e:	f43f ac0d 	beq.w	800197c <HAL_I2C_EV_IRQHandler+0x38>
 8002162:	0592      	lsls	r2, r2, #22
 8002164:	f57f ac0a 	bpl.w	800197c <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8002168:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800216a:	b292      	uxth	r2, r2
 800216c:	2a00      	cmp	r2, #0
 800216e:	f43f ac05 	beq.w	800197c <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002172:	691a      	ldr	r2, [r3, #16]
 8002174:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002176:	701a      	strb	r2, [r3, #0]
 8002178:	e64d      	b.n	8001e16 <HAL_I2C_EV_IRQHandler+0x4d2>
 800217a:	bf00      	nop
 800217c:	08001789 	.word	0x08001789
 8002180:	ffff0000 	.word	0xffff0000

08002184 <HAL_I2C_ER_IRQHandler>:
{
 8002184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002186:	6803      	ldr	r3, [r0, #0]
 8002188:	695f      	ldr	r7, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800218a:	685e      	ldr	r6, [r3, #4]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800218c:	f3c7 2500 	ubfx	r5, r7, #8, #1
{
 8002190:	4604      	mov	r4, r0
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002192:	b135      	cbz	r5, 80021a2 <HAL_I2C_ER_IRQHandler+0x1e>
 8002194:	f3c6 2500 	ubfx	r5, r6, #8, #1
 8002198:	b11d      	cbz	r5, 80021a2 <HAL_I2C_ER_IRQHandler+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800219a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800219e:	615a      	str	r2, [r3, #20]
    error |= HAL_I2C_ERROR_BERR;
 80021a0:	2501      	movs	r5, #1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80021a2:	05b9      	lsls	r1, r7, #22
 80021a4:	d506      	bpl.n	80021b4 <HAL_I2C_ER_IRQHandler+0x30>
 80021a6:	05f2      	lsls	r2, r6, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80021a8:	bf42      	ittt	mi
 80021aa:	f46f 7200 	mvnmi.w	r2, #512	; 0x200
    error |= HAL_I2C_ERROR_ARLO;
 80021ae:	f045 0502 	orrmi.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80021b2:	615a      	strmi	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80021b4:	0578      	lsls	r0, r7, #21
 80021b6:	d537      	bpl.n	8002228 <HAL_I2C_ER_IRQHandler+0xa4>
 80021b8:	05f1      	lsls	r1, r6, #23
 80021ba:	d535      	bpl.n	8002228 <HAL_I2C_ER_IRQHandler+0xa4>
    tmp1 = hi2c->Mode;
 80021bc:	f894 c03e 	ldrb.w	ip, [r4, #62]	; 0x3e
    tmp2 = hi2c->XferCount;
 80021c0:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 80021c2:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    tmp4 = hi2c->PreviousState;
 80021c6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80021c8:	f1bc 0f20 	cmp.w	ip, #32
    tmp2 = hi2c->XferCount;
 80021cc:	b289      	uxth	r1, r1
    tmp3 = hi2c->State;
 80021ce:	b2d2      	uxtb	r2, r2
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80021d0:	d15a      	bne.n	8002288 <HAL_I2C_ER_IRQHandler+0x104>
 80021d2:	2900      	cmp	r1, #0
 80021d4:	d158      	bne.n	8002288 <HAL_I2C_ER_IRQHandler+0x104>
 80021d6:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
 80021da:	2921      	cmp	r1, #33	; 0x21
 80021dc:	d003      	beq.n	80021e6 <HAL_I2C_ER_IRQHandler+0x62>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80021de:	2a28      	cmp	r2, #40	; 0x28
 80021e0:	d152      	bne.n	8002288 <HAL_I2C_ER_IRQHandler+0x104>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80021e2:	2821      	cmp	r0, #33	; 0x21
 80021e4:	d150      	bne.n	8002288 <HAL_I2C_ER_IRQHandler+0x104>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80021e6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80021ea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80021ec:	2908      	cmp	r1, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80021ee:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80021f0:	d001      	beq.n	80021f6 <HAL_I2C_ER_IRQHandler+0x72>
 80021f2:	2920      	cmp	r1, #32
 80021f4:	d12a      	bne.n	800224c <HAL_I2C_ER_IRQHandler+0xc8>
 80021f6:	2a28      	cmp	r2, #40	; 0x28
 80021f8:	d128      	bne.n	800224c <HAL_I2C_ER_IRQHandler+0xc8>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021fa:	4a2c      	ldr	r2, [pc, #176]	; (80022ac <HAL_I2C_ER_IRQHandler+0x128>)
 80021fc:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002204:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002206:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800220a:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002212:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002214:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8002216:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8002218:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 800221a:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 800221c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002220:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8002224:	f7ff fa0c 	bl	8001640 <HAL_I2C_ListenCpltCallback>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002228:	053a      	lsls	r2, r7, #20
 800222a:	d53c      	bpl.n	80022a6 <HAL_I2C_ER_IRQHandler+0x122>
 800222c:	05f3      	lsls	r3, r6, #23
 800222e:	d53a      	bpl.n	80022a6 <HAL_I2C_ER_IRQHandler+0x122>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002230:	6823      	ldr	r3, [r4, #0]
 8002232:	f46f 6200 	mvn.w	r2, #2048	; 0x800
    error |= HAL_I2C_ERROR_OVR;
 8002236:	f045 0508 	orr.w	r5, r5, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800223a:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 800223c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800223e:	431d      	orrs	r5, r3
 8002240:	6425      	str	r5, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 8002242:	4620      	mov	r0, r4
}
 8002244:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8002248:	f7ff bada 	b.w	8001800 <I2C_ITError>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800224c:	2a21      	cmp	r2, #33	; 0x21
 800224e:	d117      	bne.n	8002280 <HAL_I2C_ER_IRQHandler+0xfc>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002250:	4916      	ldr	r1, [pc, #88]	; (80022ac <HAL_I2C_ER_IRQHandler+0x128>)
 8002252:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002254:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002256:	2220      	movs	r2, #32
 8002258:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800225c:	2200      	movs	r2, #0
 800225e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002268:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800226a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800226e:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002276:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002278:	4620      	mov	r0, r4
 800227a:	f7ff f9df 	bl	800163c <HAL_I2C_SlaveTxCpltCallback>
 800227e:	e7d3      	b.n	8002228 <HAL_I2C_ER_IRQHandler+0xa4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002280:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002284:	615a      	str	r2, [r3, #20]
 8002286:	e7cf      	b.n	8002228 <HAL_I2C_ER_IRQHandler+0xa4>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002288:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800228c:	615a      	str	r2, [r3, #20]
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 800228e:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8002292:	2a10      	cmp	r2, #16
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002294:	bf04      	itt	eq
 8002296:	681a      	ldreq	r2, [r3, #0]
 8002298:	f442 7200 	orreq.w	r2, r2, #512	; 0x200
      error |= HAL_I2C_ERROR_AF;
 800229c:	f045 0504 	orr.w	r5, r5, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a0:	bf08      	it	eq
 80022a2:	601a      	streq	r2, [r3, #0]
 80022a4:	e7c0      	b.n	8002228 <HAL_I2C_ER_IRQHandler+0xa4>
  if (error != HAL_I2C_ERROR_NONE)
 80022a6:	2d00      	cmp	r5, #0
 80022a8:	d1c8      	bne.n	800223c <HAL_I2C_ER_IRQHandler+0xb8>
}
 80022aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022ac:	ffff0000 	.word	0xffff0000

080022b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022b4:	4604      	mov	r4, r0
 80022b6:	b918      	cbnz	r0, 80022c0 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80022b8:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80022ba:	b002      	add	sp, #8
 80022bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022c0:	6803      	ldr	r3, [r0, #0]
 80022c2:	07dd      	lsls	r5, r3, #31
 80022c4:	d410      	bmi.n	80022e8 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022c6:	6823      	ldr	r3, [r4, #0]
 80022c8:	0798      	lsls	r0, r3, #30
 80022ca:	d458      	bmi.n	800237e <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022cc:	6823      	ldr	r3, [r4, #0]
 80022ce:	071a      	lsls	r2, r3, #28
 80022d0:	f100 809a 	bmi.w	8002408 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022d4:	6823      	ldr	r3, [r4, #0]
 80022d6:	075b      	lsls	r3, r3, #29
 80022d8:	f100 80b8 	bmi.w	800244c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022dc:	69a2      	ldr	r2, [r4, #24]
 80022de:	2a00      	cmp	r2, #0
 80022e0:	f040 8119 	bne.w	8002516 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80022e4:	2000      	movs	r0, #0
 80022e6:	e7e8      	b.n	80022ba <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022e8:	4ba6      	ldr	r3, [pc, #664]	; (8002584 <HAL_RCC_OscConfig+0x2d4>)
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	f002 020c 	and.w	r2, r2, #12
 80022f0:	2a04      	cmp	r2, #4
 80022f2:	d007      	beq.n	8002304 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022fa:	2a08      	cmp	r2, #8
 80022fc:	d10a      	bne.n	8002314 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	0259      	lsls	r1, r3, #9
 8002302:	d507      	bpl.n	8002314 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002304:	4b9f      	ldr	r3, [pc, #636]	; (8002584 <HAL_RCC_OscConfig+0x2d4>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	039a      	lsls	r2, r3, #14
 800230a:	d5dc      	bpl.n	80022c6 <HAL_RCC_OscConfig+0x16>
 800230c:	6863      	ldr	r3, [r4, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1d9      	bne.n	80022c6 <HAL_RCC_OscConfig+0x16>
 8002312:	e7d1      	b.n	80022b8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002314:	6863      	ldr	r3, [r4, #4]
 8002316:	4d9b      	ldr	r5, [pc, #620]	; (8002584 <HAL_RCC_OscConfig+0x2d4>)
 8002318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800231c:	d111      	bne.n	8002342 <HAL_RCC_OscConfig+0x92>
 800231e:	682b      	ldr	r3, [r5, #0]
 8002320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002324:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002326:	f7fe fd37 	bl	8000d98 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232a:	4d96      	ldr	r5, [pc, #600]	; (8002584 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800232c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232e:	682b      	ldr	r3, [r5, #0]
 8002330:	039b      	lsls	r3, r3, #14
 8002332:	d4c8      	bmi.n	80022c6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002334:	f7fe fd30 	bl	8000d98 <HAL_GetTick>
 8002338:	1b80      	subs	r0, r0, r6
 800233a:	2864      	cmp	r0, #100	; 0x64
 800233c:	d9f7      	bls.n	800232e <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800233e:	2003      	movs	r0, #3
 8002340:	e7bb      	b.n	80022ba <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002342:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002346:	d104      	bne.n	8002352 <HAL_RCC_OscConfig+0xa2>
 8002348:	682b      	ldr	r3, [r5, #0]
 800234a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800234e:	602b      	str	r3, [r5, #0]
 8002350:	e7e5      	b.n	800231e <HAL_RCC_OscConfig+0x6e>
 8002352:	682a      	ldr	r2, [r5, #0]
 8002354:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002358:	602a      	str	r2, [r5, #0]
 800235a:	682a      	ldr	r2, [r5, #0]
 800235c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002360:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1df      	bne.n	8002326 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8002366:	f7fe fd17 	bl	8000d98 <HAL_GetTick>
 800236a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800236c:	682b      	ldr	r3, [r5, #0]
 800236e:	039f      	lsls	r7, r3, #14
 8002370:	d5a9      	bpl.n	80022c6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002372:	f7fe fd11 	bl	8000d98 <HAL_GetTick>
 8002376:	1b80      	subs	r0, r0, r6
 8002378:	2864      	cmp	r0, #100	; 0x64
 800237a:	d9f7      	bls.n	800236c <HAL_RCC_OscConfig+0xbc>
 800237c:	e7df      	b.n	800233e <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800237e:	4b81      	ldr	r3, [pc, #516]	; (8002584 <HAL_RCC_OscConfig+0x2d4>)
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	f012 0f0c 	tst.w	r2, #12
 8002386:	d007      	beq.n	8002398 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800238e:	2a08      	cmp	r2, #8
 8002390:	d111      	bne.n	80023b6 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	025e      	lsls	r6, r3, #9
 8002396:	d40e      	bmi.n	80023b6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002398:	4b7a      	ldr	r3, [pc, #488]	; (8002584 <HAL_RCC_OscConfig+0x2d4>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	0795      	lsls	r5, r2, #30
 800239e:	d502      	bpl.n	80023a6 <HAL_RCC_OscConfig+0xf6>
 80023a0:	68e2      	ldr	r2, [r4, #12]
 80023a2:	2a01      	cmp	r2, #1
 80023a4:	d188      	bne.n	80022b8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	6921      	ldr	r1, [r4, #16]
 80023aa:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80023ae:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80023b2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b4:	e78a      	b.n	80022cc <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023b6:	68e2      	ldr	r2, [r4, #12]
 80023b8:	4b73      	ldr	r3, [pc, #460]	; (8002588 <HAL_RCC_OscConfig+0x2d8>)
 80023ba:	b1b2      	cbz	r2, 80023ea <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80023bc:	2201      	movs	r2, #1
 80023be:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80023c0:	f7fe fcea 	bl	8000d98 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c4:	4d6f      	ldr	r5, [pc, #444]	; (8002584 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80023c6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c8:	682b      	ldr	r3, [r5, #0]
 80023ca:	0798      	lsls	r0, r3, #30
 80023cc:	d507      	bpl.n	80023de <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ce:	682b      	ldr	r3, [r5, #0]
 80023d0:	6922      	ldr	r2, [r4, #16]
 80023d2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80023d6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80023da:	602b      	str	r3, [r5, #0]
 80023dc:	e776      	b.n	80022cc <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023de:	f7fe fcdb 	bl	8000d98 <HAL_GetTick>
 80023e2:	1b80      	subs	r0, r0, r6
 80023e4:	2802      	cmp	r0, #2
 80023e6:	d9ef      	bls.n	80023c8 <HAL_RCC_OscConfig+0x118>
 80023e8:	e7a9      	b.n	800233e <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80023ea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80023ec:	f7fe fcd4 	bl	8000d98 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f0:	4d64      	ldr	r5, [pc, #400]	; (8002584 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80023f2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f4:	682b      	ldr	r3, [r5, #0]
 80023f6:	0799      	lsls	r1, r3, #30
 80023f8:	f57f af68 	bpl.w	80022cc <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023fc:	f7fe fccc 	bl	8000d98 <HAL_GetTick>
 8002400:	1b80      	subs	r0, r0, r6
 8002402:	2802      	cmp	r0, #2
 8002404:	d9f6      	bls.n	80023f4 <HAL_RCC_OscConfig+0x144>
 8002406:	e79a      	b.n	800233e <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002408:	6962      	ldr	r2, [r4, #20]
 800240a:	4b60      	ldr	r3, [pc, #384]	; (800258c <HAL_RCC_OscConfig+0x2dc>)
 800240c:	b17a      	cbz	r2, 800242e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800240e:	2201      	movs	r2, #1
 8002410:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002412:	f7fe fcc1 	bl	8000d98 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002416:	4d5b      	ldr	r5, [pc, #364]	; (8002584 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002418:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800241c:	079f      	lsls	r7, r3, #30
 800241e:	f53f af59 	bmi.w	80022d4 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002422:	f7fe fcb9 	bl	8000d98 <HAL_GetTick>
 8002426:	1b80      	subs	r0, r0, r6
 8002428:	2802      	cmp	r0, #2
 800242a:	d9f6      	bls.n	800241a <HAL_RCC_OscConfig+0x16a>
 800242c:	e787      	b.n	800233e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 800242e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002430:	f7fe fcb2 	bl	8000d98 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002434:	4d53      	ldr	r5, [pc, #332]	; (8002584 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002436:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002438:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800243a:	0798      	lsls	r0, r3, #30
 800243c:	f57f af4a 	bpl.w	80022d4 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002440:	f7fe fcaa 	bl	8000d98 <HAL_GetTick>
 8002444:	1b80      	subs	r0, r0, r6
 8002446:	2802      	cmp	r0, #2
 8002448:	d9f6      	bls.n	8002438 <HAL_RCC_OscConfig+0x188>
 800244a:	e778      	b.n	800233e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800244c:	4b4d      	ldr	r3, [pc, #308]	; (8002584 <HAL_RCC_OscConfig+0x2d4>)
 800244e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002450:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002454:	d128      	bne.n	80024a8 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002456:	9201      	str	r2, [sp, #4]
 8002458:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800245a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800245e:	641a      	str	r2, [r3, #64]	; 0x40
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002466:	9301      	str	r3, [sp, #4]
 8002468:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800246a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246c:	4d48      	ldr	r5, [pc, #288]	; (8002590 <HAL_RCC_OscConfig+0x2e0>)
 800246e:	682b      	ldr	r3, [r5, #0]
 8002470:	05d9      	lsls	r1, r3, #23
 8002472:	d51b      	bpl.n	80024ac <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002474:	68a3      	ldr	r3, [r4, #8]
 8002476:	4d43      	ldr	r5, [pc, #268]	; (8002584 <HAL_RCC_OscConfig+0x2d4>)
 8002478:	2b01      	cmp	r3, #1
 800247a:	d127      	bne.n	80024cc <HAL_RCC_OscConfig+0x21c>
 800247c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002484:	f7fe fc88 	bl	8000d98 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002488:	4d3e      	ldr	r5, [pc, #248]	; (8002584 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800248a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800248c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002490:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002492:	079b      	lsls	r3, r3, #30
 8002494:	d539      	bpl.n	800250a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8002496:	2e00      	cmp	r6, #0
 8002498:	f43f af20 	beq.w	80022dc <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800249c:	4a39      	ldr	r2, [pc, #228]	; (8002584 <HAL_RCC_OscConfig+0x2d4>)
 800249e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80024a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024a4:	6413      	str	r3, [r2, #64]	; 0x40
 80024a6:	e719      	b.n	80022dc <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80024a8:	2600      	movs	r6, #0
 80024aa:	e7df      	b.n	800246c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ac:	682b      	ldr	r3, [r5, #0]
 80024ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80024b4:	f7fe fc70 	bl	8000d98 <HAL_GetTick>
 80024b8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ba:	682b      	ldr	r3, [r5, #0]
 80024bc:	05da      	lsls	r2, r3, #23
 80024be:	d4d9      	bmi.n	8002474 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c0:	f7fe fc6a 	bl	8000d98 <HAL_GetTick>
 80024c4:	1bc0      	subs	r0, r0, r7
 80024c6:	2802      	cmp	r0, #2
 80024c8:	d9f7      	bls.n	80024ba <HAL_RCC_OscConfig+0x20a>
 80024ca:	e738      	b.n	800233e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024cc:	2b05      	cmp	r3, #5
 80024ce:	d104      	bne.n	80024da <HAL_RCC_OscConfig+0x22a>
 80024d0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80024d2:	f043 0304 	orr.w	r3, r3, #4
 80024d6:	672b      	str	r3, [r5, #112]	; 0x70
 80024d8:	e7d0      	b.n	800247c <HAL_RCC_OscConfig+0x1cc>
 80024da:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80024dc:	f022 0201 	bic.w	r2, r2, #1
 80024e0:	672a      	str	r2, [r5, #112]	; 0x70
 80024e2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80024e4:	f022 0204 	bic.w	r2, r2, #4
 80024e8:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1ca      	bne.n	8002484 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80024ee:	f7fe fc53 	bl	8000d98 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024f2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80024f6:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80024fa:	0798      	lsls	r0, r3, #30
 80024fc:	d5cb      	bpl.n	8002496 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024fe:	f7fe fc4b 	bl	8000d98 <HAL_GetTick>
 8002502:	1bc0      	subs	r0, r0, r7
 8002504:	4540      	cmp	r0, r8
 8002506:	d9f7      	bls.n	80024f8 <HAL_RCC_OscConfig+0x248>
 8002508:	e719      	b.n	800233e <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800250a:	f7fe fc45 	bl	8000d98 <HAL_GetTick>
 800250e:	1bc0      	subs	r0, r0, r7
 8002510:	4540      	cmp	r0, r8
 8002512:	d9bd      	bls.n	8002490 <HAL_RCC_OscConfig+0x1e0>
 8002514:	e713      	b.n	800233e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002516:	4d1b      	ldr	r5, [pc, #108]	; (8002584 <HAL_RCC_OscConfig+0x2d4>)
 8002518:	68ab      	ldr	r3, [r5, #8]
 800251a:	f003 030c 	and.w	r3, r3, #12
 800251e:	2b08      	cmp	r3, #8
 8002520:	f43f aeca 	beq.w	80022b8 <HAL_RCC_OscConfig+0x8>
 8002524:	4e1b      	ldr	r6, [pc, #108]	; (8002594 <HAL_RCC_OscConfig+0x2e4>)
 8002526:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002528:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800252a:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800252c:	d134      	bne.n	8002598 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 800252e:	f7fe fc33 	bl	8000d98 <HAL_GetTick>
 8002532:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002534:	682b      	ldr	r3, [r5, #0]
 8002536:	0199      	lsls	r1, r3, #6
 8002538:	d41e      	bmi.n	8002578 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800253a:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800253e:	4313      	orrs	r3, r2
 8002540:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002542:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002546:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002548:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800254c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800254e:	4c0d      	ldr	r4, [pc, #52]	; (8002584 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002550:	0852      	lsrs	r2, r2, #1
 8002552:	3a01      	subs	r2, #1
 8002554:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002558:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800255a:	2301      	movs	r3, #1
 800255c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800255e:	f7fe fc1b 	bl	8000d98 <HAL_GetTick>
 8002562:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002564:	6823      	ldr	r3, [r4, #0]
 8002566:	019a      	lsls	r2, r3, #6
 8002568:	f53f aebc 	bmi.w	80022e4 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800256c:	f7fe fc14 	bl	8000d98 <HAL_GetTick>
 8002570:	1b40      	subs	r0, r0, r5
 8002572:	2802      	cmp	r0, #2
 8002574:	d9f6      	bls.n	8002564 <HAL_RCC_OscConfig+0x2b4>
 8002576:	e6e2      	b.n	800233e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002578:	f7fe fc0e 	bl	8000d98 <HAL_GetTick>
 800257c:	1bc0      	subs	r0, r0, r7
 800257e:	2802      	cmp	r0, #2
 8002580:	d9d8      	bls.n	8002534 <HAL_RCC_OscConfig+0x284>
 8002582:	e6dc      	b.n	800233e <HAL_RCC_OscConfig+0x8e>
 8002584:	40023800 	.word	0x40023800
 8002588:	42470000 	.word	0x42470000
 800258c:	42470e80 	.word	0x42470e80
 8002590:	40007000 	.word	0x40007000
 8002594:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8002598:	f7fe fbfe 	bl	8000d98 <HAL_GetTick>
 800259c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800259e:	682b      	ldr	r3, [r5, #0]
 80025a0:	019b      	lsls	r3, r3, #6
 80025a2:	f57f ae9f 	bpl.w	80022e4 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a6:	f7fe fbf7 	bl	8000d98 <HAL_GetTick>
 80025aa:	1b00      	subs	r0, r0, r4
 80025ac:	2802      	cmp	r0, #2
 80025ae:	d9f6      	bls.n	800259e <HAL_RCC_OscConfig+0x2ee>
 80025b0:	e6c5      	b.n	800233e <HAL_RCC_OscConfig+0x8e>
 80025b2:	bf00      	nop

080025b4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025b4:	4913      	ldr	r1, [pc, #76]	; (8002604 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80025b6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025b8:	688b      	ldr	r3, [r1, #8]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d003      	beq.n	80025ca <HAL_RCC_GetSysClockFreq+0x16>
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d003      	beq.n	80025ce <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025c6:	4810      	ldr	r0, [pc, #64]	; (8002608 <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 80025c8:	e000      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 80025ca:	4810      	ldr	r0, [pc, #64]	; (800260c <HAL_RCC_GetSysClockFreq+0x58>)
}
 80025cc:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025ce:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025d0:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025d2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025d4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025d8:	bf14      	ite	ne
 80025da:	480c      	ldrne	r0, [pc, #48]	; (800260c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025dc:	480a      	ldreq	r0, [pc, #40]	; (8002608 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025de:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80025e2:	bf18      	it	ne
 80025e4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025e6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ea:	fba1 0100 	umull	r0, r1, r1, r0
 80025ee:	f7fe fa09 	bl	8000a04 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025f2:	4b04      	ldr	r3, [pc, #16]	; (8002604 <HAL_RCC_GetSysClockFreq+0x50>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80025fa:	3301      	adds	r3, #1
 80025fc:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80025fe:	fbb0 f0f3 	udiv	r0, r0, r3
 8002602:	e7e3      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0x18>
 8002604:	40023800 	.word	0x40023800
 8002608:	00f42400 	.word	0x00f42400
 800260c:	017d7840 	.word	0x017d7840

08002610 <HAL_RCC_ClockConfig>:
{
 8002610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002614:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002616:	4604      	mov	r4, r0
 8002618:	b910      	cbnz	r0, 8002620 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800261a:	2001      	movs	r0, #1
}
 800261c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002620:	4b43      	ldr	r3, [pc, #268]	; (8002730 <HAL_RCC_ClockConfig+0x120>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	f002 020f 	and.w	r2, r2, #15
 8002628:	428a      	cmp	r2, r1
 800262a:	d327      	bcc.n	800267c <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800262c:	6821      	ldr	r1, [r4, #0]
 800262e:	078f      	lsls	r7, r1, #30
 8002630:	d42c      	bmi.n	800268c <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002632:	07c8      	lsls	r0, r1, #31
 8002634:	d43f      	bmi.n	80026b6 <HAL_RCC_ClockConfig+0xa6>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002636:	4b3e      	ldr	r3, [pc, #248]	; (8002730 <HAL_RCC_ClockConfig+0x120>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	f002 020f 	and.w	r2, r2, #15
 800263e:	42aa      	cmp	r2, r5
 8002640:	d864      	bhi.n	800270c <HAL_RCC_ClockConfig+0xfc>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002642:	6822      	ldr	r2, [r4, #0]
 8002644:	0751      	lsls	r1, r2, #29
 8002646:	d46a      	bmi.n	800271e <HAL_RCC_ClockConfig+0x10e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002648:	0713      	lsls	r3, r2, #28
 800264a:	d507      	bpl.n	800265c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800264c:	4a39      	ldr	r2, [pc, #228]	; (8002734 <HAL_RCC_ClockConfig+0x124>)
 800264e:	6921      	ldr	r1, [r4, #16]
 8002650:	6893      	ldr	r3, [r2, #8]
 8002652:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002656:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800265a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800265c:	f7ff ffaa 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 8002660:	4b34      	ldr	r3, [pc, #208]	; (8002734 <HAL_RCC_ClockConfig+0x124>)
 8002662:	4a35      	ldr	r2, [pc, #212]	; (8002738 <HAL_RCC_ClockConfig+0x128>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800266a:	5cd3      	ldrb	r3, [r2, r3]
 800266c:	40d8      	lsrs	r0, r3
 800266e:	4b33      	ldr	r3, [pc, #204]	; (800273c <HAL_RCC_ClockConfig+0x12c>)
 8002670:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002672:	2000      	movs	r0, #0
 8002674:	f7fe fb46 	bl	8000d04 <HAL_InitTick>
  return HAL_OK;
 8002678:	2000      	movs	r0, #0
 800267a:	e7cf      	b.n	800261c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267c:	b2ca      	uxtb	r2, r1
 800267e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	428b      	cmp	r3, r1
 8002688:	d1c7      	bne.n	800261a <HAL_RCC_ClockConfig+0xa>
 800268a:	e7cf      	b.n	800262c <HAL_RCC_ClockConfig+0x1c>
 800268c:	4b29      	ldr	r3, [pc, #164]	; (8002734 <HAL_RCC_ClockConfig+0x124>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800268e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002692:	bf1e      	ittt	ne
 8002694:	689a      	ldrne	r2, [r3, #8]
 8002696:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 800269a:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269c:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800269e:	bf42      	ittt	mi
 80026a0:	689a      	ldrmi	r2, [r3, #8]
 80026a2:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80026a6:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	68a0      	ldr	r0, [r4, #8]
 80026ac:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80026b0:	4302      	orrs	r2, r0
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	e7bd      	b.n	8002632 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b6:	6862      	ldr	r2, [r4, #4]
 80026b8:	4b1e      	ldr	r3, [pc, #120]	; (8002734 <HAL_RCC_ClockConfig+0x124>)
 80026ba:	2a01      	cmp	r2, #1
 80026bc:	d11c      	bne.n	80026f8 <HAL_RCC_ClockConfig+0xe8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c4:	d0a9      	beq.n	800261a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026c6:	4e1b      	ldr	r6, [pc, #108]	; (8002734 <HAL_RCC_ClockConfig+0x124>)
 80026c8:	68b3      	ldr	r3, [r6, #8]
 80026ca:	f023 0303 	bic.w	r3, r3, #3
 80026ce:	4313      	orrs	r3, r2
 80026d0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80026d2:	f7fe fb61 	bl	8000d98 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80026da:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026dc:	68b3      	ldr	r3, [r6, #8]
 80026de:	6862      	ldr	r2, [r4, #4]
 80026e0:	f003 030c 	and.w	r3, r3, #12
 80026e4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80026e8:	d0a5      	beq.n	8002636 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ea:	f7fe fb55 	bl	8000d98 <HAL_GetTick>
 80026ee:	1bc0      	subs	r0, r0, r7
 80026f0:	4540      	cmp	r0, r8
 80026f2:	d9f3      	bls.n	80026dc <HAL_RCC_ClockConfig+0xcc>
        return HAL_TIMEOUT;
 80026f4:	2003      	movs	r0, #3
 80026f6:	e791      	b.n	800261c <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026f8:	1e91      	subs	r1, r2, #2
 80026fa:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fc:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026fe:	d802      	bhi.n	8002706 <HAL_RCC_ClockConfig+0xf6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002700:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002704:	e7de      	b.n	80026c4 <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002706:	f013 0f02 	tst.w	r3, #2
 800270a:	e7db      	b.n	80026c4 <HAL_RCC_ClockConfig+0xb4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270c:	b2ea      	uxtb	r2, r5
 800270e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	42ab      	cmp	r3, r5
 8002718:	f47f af7f 	bne.w	800261a <HAL_RCC_ClockConfig+0xa>
 800271c:	e791      	b.n	8002642 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800271e:	4905      	ldr	r1, [pc, #20]	; (8002734 <HAL_RCC_ClockConfig+0x124>)
 8002720:	68e0      	ldr	r0, [r4, #12]
 8002722:	688b      	ldr	r3, [r1, #8]
 8002724:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002728:	4303      	orrs	r3, r0
 800272a:	608b      	str	r3, [r1, #8]
 800272c:	e78c      	b.n	8002648 <HAL_RCC_ClockConfig+0x38>
 800272e:	bf00      	nop
 8002730:	40023c00 	.word	0x40023c00
 8002734:	40023800 	.word	0x40023800
 8002738:	08003f60 	.word	0x08003f60
 800273c:	20000018 	.word	0x20000018

08002740 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002740:	4b04      	ldr	r3, [pc, #16]	; (8002754 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002742:	4a05      	ldr	r2, [pc, #20]	; (8002758 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800274a:	5cd3      	ldrb	r3, [r2, r3]
 800274c:	4a03      	ldr	r2, [pc, #12]	; (800275c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800274e:	6810      	ldr	r0, [r2, #0]
}
 8002750:	40d8      	lsrs	r0, r3
 8002752:	4770      	bx	lr
 8002754:	40023800 	.word	0x40023800
 8002758:	08003f70 	.word	0x08003f70
 800275c:	20000018 	.word	0x20000018

08002760 <SPI_WaitFlagStateUntilTimeout.constprop.7>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002762:	4604      	mov	r4, r0
 8002764:	460e      	mov	r6, r1
 8002766:	4615      	mov	r5, r2
 8002768:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800276a:	6821      	ldr	r1, [r4, #0]
 800276c:	688a      	ldr	r2, [r1, #8]
 800276e:	ea36 0302 	bics.w	r3, r6, r2
 8002772:	d001      	beq.n	8002778 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002774:	2000      	movs	r0, #0
 8002776:	e02d      	b.n	80027d4 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x74>
    if (Timeout != HAL_MAX_DELAY)
 8002778:	1c6b      	adds	r3, r5, #1
 800277a:	d0f7      	beq.n	800276c <SPI_WaitFlagStateUntilTimeout.constprop.7+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800277c:	f7fe fb0c 	bl	8000d98 <HAL_GetTick>
 8002780:	1bc0      	subs	r0, r0, r7
 8002782:	4285      	cmp	r5, r0
 8002784:	d8f1      	bhi.n	800276a <SPI_WaitFlagStateUntilTimeout.constprop.7+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002786:	6823      	ldr	r3, [r4, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800278e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002790:	6862      	ldr	r2, [r4, #4]
 8002792:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002796:	d10a      	bne.n	80027ae <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4e>
 8002798:	68a2      	ldr	r2, [r4, #8]
 800279a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800279e:	d002      	beq.n	80027a6 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027a0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80027a4:	d103      	bne.n	80027ae <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4e>
          __HAL_SPI_DISABLE(hspi);
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027ac:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027ae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80027b0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80027b4:	d107      	bne.n	80027c6 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x66>
          SPI_RESET_CRC(hspi);
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027c4:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80027c6:	2301      	movs	r3, #1
 80027c8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80027cc:	2300      	movs	r3, #0
 80027ce:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80027d2:	2003      	movs	r0, #3
}
 80027d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080027d6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80027d6:	b538      	push	{r3, r4, r5, lr}
 80027d8:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027da:	6842      	ldr	r2, [r0, #4]
 80027dc:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 80027e0:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027e2:	d11f      	bne.n	8002824 <SPI_EndRxTransaction+0x4e>
 80027e4:	6882      	ldr	r2, [r0, #8]
 80027e6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80027ea:	d002      	beq.n	80027f2 <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027ec:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80027f0:	d107      	bne.n	8002802 <SPI_EndRxTransaction+0x2c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80027f2:	6825      	ldr	r5, [r4, #0]
 80027f4:	6828      	ldr	r0, [r5, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80027f6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 80027fa:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80027fe:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002800:	d007      	beq.n	8002812 <SPI_EndRxTransaction+0x3c>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002802:	460a      	mov	r2, r1
 8002804:	2180      	movs	r1, #128	; 0x80
 8002806:	4620      	mov	r0, r4
 8002808:	f7ff ffaa 	bl	8002760 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 800280c:	b920      	cbnz	r0, 8002818 <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 800280e:	2000      	movs	r0, #0
}
 8002810:	bd38      	pop	{r3, r4, r5, pc}
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002812:	460a      	mov	r2, r1
 8002814:	2101      	movs	r1, #1
 8002816:	e7f6      	b.n	8002806 <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002818:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800281a:	f043 0320 	orr.w	r3, r3, #32
 800281e:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8002820:	2003      	movs	r0, #3
 8002822:	e7f5      	b.n	8002810 <SPI_EndRxTransaction+0x3a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002824:	460a      	mov	r2, r1
 8002826:	2101      	movs	r1, #1
 8002828:	e7ee      	b.n	8002808 <SPI_EndRxTransaction+0x32>
	...

0800282c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800282c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800282e:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002830:	4a12      	ldr	r2, [pc, #72]	; (800287c <SPI_EndRxTxTransaction+0x50>)
 8002832:	4e13      	ldr	r6, [pc, #76]	; (8002880 <SPI_EndRxTxTransaction+0x54>)
 8002834:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002836:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002838:	fbb5 f6f6 	udiv	r6, r5, r6
 800283c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8002840:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002842:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8002846:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002848:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800284a:	d10b      	bne.n	8002864 <SPI_EndRxTxTransaction+0x38>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800284c:	460a      	mov	r2, r1
 800284e:	2180      	movs	r1, #128	; 0x80
 8002850:	f7ff ff86 	bl	8002760 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 8002854:	b178      	cbz	r0, 8002876 <SPI_EndRxTxTransaction+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002856:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002858:	f043 0320 	orr.w	r3, r3, #32
 800285c:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800285e:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 8002860:	b002      	add	sp, #8
 8002862:	bd70      	pop	{r4, r5, r6, pc}
      if (count == 0U)
 8002864:	9b01      	ldr	r3, [sp, #4]
 8002866:	b133      	cbz	r3, 8002876 <SPI_EndRxTxTransaction+0x4a>
      count--;
 8002868:	9b01      	ldr	r3, [sp, #4]
 800286a:	3b01      	subs	r3, #1
 800286c:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800286e:	6823      	ldr	r3, [r4, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	061b      	lsls	r3, r3, #24
 8002874:	d4f6      	bmi.n	8002864 <SPI_EndRxTxTransaction+0x38>
  return HAL_OK;
 8002876:	2000      	movs	r0, #0
 8002878:	e7f2      	b.n	8002860 <SPI_EndRxTxTransaction+0x34>
 800287a:	bf00      	nop
 800287c:	20000018 	.word	0x20000018
 8002880:	016e3600 	.word	0x016e3600

08002884 <HAL_SPI_Init>:
{
 8002884:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8002886:	4604      	mov	r4, r0
 8002888:	2800      	cmp	r0, #0
 800288a:	d036      	beq.n	80028fa <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800288c:	2300      	movs	r3, #0
 800288e:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002890:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002894:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002898:	b91b      	cbnz	r3, 80028a2 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 800289a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800289e:	f001 f9a9 	bl	8003bf4 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80028a2:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80028a4:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 80028a6:	2302      	movs	r3, #2
 80028a8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80028ac:	680b      	ldr	r3, [r1, #0]
 80028ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028b2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80028b4:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 80028b8:	4303      	orrs	r3, r0
 80028ba:	68e0      	ldr	r0, [r4, #12]
 80028bc:	4303      	orrs	r3, r0
 80028be:	6920      	ldr	r0, [r4, #16]
 80028c0:	4303      	orrs	r3, r0
 80028c2:	6960      	ldr	r0, [r4, #20]
 80028c4:	4303      	orrs	r3, r0
 80028c6:	69e0      	ldr	r0, [r4, #28]
 80028c8:	4303      	orrs	r3, r0
 80028ca:	6a20      	ldr	r0, [r4, #32]
 80028cc:	4303      	orrs	r3, r0
 80028ce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80028d0:	4303      	orrs	r3, r0
 80028d2:	f402 7000 	and.w	r0, r2, #512	; 0x200
 80028d6:	4303      	orrs	r3, r0
 80028d8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80028da:	0c12      	lsrs	r2, r2, #16
 80028dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028de:	f002 0204 	and.w	r2, r2, #4
 80028e2:	431a      	orrs	r2, r3
 80028e4:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028e6:	69cb      	ldr	r3, [r1, #28]
 80028e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028ec:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028ee:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80028f0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028f2:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80028f4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80028f8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80028fa:	2001      	movs	r0, #1
 80028fc:	e7fc      	b.n	80028f8 <HAL_SPI_Init+0x74>

080028fe <HAL_SPI_Transmit>:
{
 80028fe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002902:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8002904:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002908:	2b01      	cmp	r3, #1
{
 800290a:	4604      	mov	r4, r0
 800290c:	460d      	mov	r5, r1
 800290e:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8002910:	f000 809b 	beq.w	8002a4a <HAL_SPI_Transmit+0x14c>
 8002914:	2301      	movs	r3, #1
 8002916:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800291a:	f7fe fa3d 	bl	8000d98 <HAL_GetTick>
 800291e:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002920:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002924:	b2c0      	uxtb	r0, r0
 8002926:	2801      	cmp	r0, #1
 8002928:	f040 808d 	bne.w	8002a46 <HAL_SPI_Transmit+0x148>
  if ((pData == NULL) || (Size == 0U))
 800292c:	2d00      	cmp	r5, #0
 800292e:	d05d      	beq.n	80029ec <HAL_SPI_Transmit+0xee>
 8002930:	f1b8 0f00 	cmp.w	r8, #0
 8002934:	d05a      	beq.n	80029ec <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002936:	2303      	movs	r3, #3
 8002938:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800293c:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800293e:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002940:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002942:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002944:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8002948:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800294a:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800294c:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
 8002950:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002952:	6325      	str	r5, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002954:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8002958:	bf08      	it	eq
 800295a:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 800295c:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8002960:	bf04      	itt	eq
 8002962:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8002966:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002968:	6803      	ldr	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800296a:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800296c:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800296e:	bf5e      	ittt	pl
 8002970:	6803      	ldrpl	r3, [r0, #0]
 8002972:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8002976:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002978:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800297c:	6863      	ldr	r3, [r4, #4]
 800297e:	d13e      	bne.n	80029fe <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002980:	b113      	cbz	r3, 8002988 <HAL_SPI_Transmit+0x8a>
 8002982:	f1b8 0f01 	cmp.w	r8, #1
 8002986:	d107      	bne.n	8002998 <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002988:	f835 3b02 	ldrh.w	r3, [r5], #2
 800298c:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800298e:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002990:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002992:	3b01      	subs	r3, #1
 8002994:	b29b      	uxth	r3, r3
 8002996:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002998:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800299a:	b29b      	uxth	r3, r3
 800299c:	b9a3      	cbnz	r3, 80029c8 <HAL_SPI_Transmit+0xca>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800299e:	463a      	mov	r2, r7
 80029a0:	4631      	mov	r1, r6
 80029a2:	4620      	mov	r0, r4
 80029a4:	f7ff ff42 	bl	800282c <SPI_EndRxTxTransaction>
 80029a8:	2800      	cmp	r0, #0
 80029aa:	d149      	bne.n	8002a40 <HAL_SPI_Transmit+0x142>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029ac:	68a3      	ldr	r3, [r4, #8]
 80029ae:	b933      	cbnz	r3, 80029be <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029b0:	9301      	str	r3, [sp, #4]
 80029b2:	6823      	ldr	r3, [r4, #0]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	9201      	str	r2, [sp, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	9301      	str	r3, [sp, #4]
 80029bc:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029be:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80029c0:	3000      	adds	r0, #0
 80029c2:	bf18      	it	ne
 80029c4:	2001      	movne	r0, #1
error:
 80029c6:	e011      	b.n	80029ec <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029c8:	6822      	ldr	r2, [r4, #0]
 80029ca:	6893      	ldr	r3, [r2, #8]
 80029cc:	0798      	lsls	r0, r3, #30
 80029ce:	d505      	bpl.n	80029dc <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80029d2:	f833 1b02 	ldrh.w	r1, [r3], #2
 80029d6:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029d8:	6323      	str	r3, [r4, #48]	; 0x30
 80029da:	e7d9      	b.n	8002990 <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029dc:	f7fe f9dc 	bl	8000d98 <HAL_GetTick>
 80029e0:	1bc0      	subs	r0, r0, r7
 80029e2:	42b0      	cmp	r0, r6
 80029e4:	d3d8      	bcc.n	8002998 <HAL_SPI_Transmit+0x9a>
 80029e6:	1c71      	adds	r1, r6, #1
 80029e8:	d0d6      	beq.n	8002998 <HAL_SPI_Transmit+0x9a>
          errorcode = HAL_TIMEOUT;
 80029ea:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80029ec:	2301      	movs	r3, #1
 80029ee:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80029f2:	2300      	movs	r3, #0
 80029f4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80029f8:	b002      	add	sp, #8
 80029fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029fe:	b113      	cbz	r3, 8002a06 <HAL_SPI_Transmit+0x108>
 8002a00:	f1b8 0f01 	cmp.w	r8, #1
 8002a04:	d108      	bne.n	8002a18 <HAL_SPI_Transmit+0x11a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a06:	782b      	ldrb	r3, [r5, #0]
 8002a08:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002a10:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002a12:	3b01      	subs	r3, #1
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002a18:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0be      	beq.n	800299e <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a20:	6823      	ldr	r3, [r4, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	0792      	lsls	r2, r2, #30
 8002a26:	d503      	bpl.n	8002a30 <HAL_SPI_Transmit+0x132>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a28:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002a2a:	7812      	ldrb	r2, [r2, #0]
 8002a2c:	731a      	strb	r2, [r3, #12]
 8002a2e:	e7ec      	b.n	8002a0a <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a30:	f7fe f9b2 	bl	8000d98 <HAL_GetTick>
 8002a34:	1bc0      	subs	r0, r0, r7
 8002a36:	42b0      	cmp	r0, r6
 8002a38:	d3ee      	bcc.n	8002a18 <HAL_SPI_Transmit+0x11a>
 8002a3a:	1c73      	adds	r3, r6, #1
 8002a3c:	d0ec      	beq.n	8002a18 <HAL_SPI_Transmit+0x11a>
 8002a3e:	e7d4      	b.n	80029ea <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a40:	2320      	movs	r3, #32
 8002a42:	6563      	str	r3, [r4, #84]	; 0x54
 8002a44:	e7b2      	b.n	80029ac <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 8002a46:	2002      	movs	r0, #2
 8002a48:	e7d0      	b.n	80029ec <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 8002a4a:	2002      	movs	r0, #2
 8002a4c:	e7d4      	b.n	80029f8 <HAL_SPI_Transmit+0xfa>

08002a4e <HAL_SPI_TransmitReceive>:
{
 8002a4e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002a52:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8002a54:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8002a58:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8002a5a:	2b01      	cmp	r3, #1
{
 8002a5c:	4604      	mov	r4, r0
 8002a5e:	460d      	mov	r5, r1
 8002a60:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8002a62:	f000 80e2 	beq.w	8002c2a <HAL_SPI_TransmitReceive+0x1dc>
 8002a66:	2301      	movs	r3, #1
 8002a68:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002a6c:	f7fe f994 	bl	8000d98 <HAL_GetTick>
  tmp_state           = hspi->State;
 8002a70:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8002a74:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8002a76:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a78:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8002a7a:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a7c:	d00a      	beq.n	8002a94 <HAL_SPI_TransmitReceive+0x46>
 8002a7e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8002a82:	f040 80d0 	bne.w	8002c26 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a86:	68a0      	ldr	r0, [r4, #8]
 8002a88:	2800      	cmp	r0, #0
 8002a8a:	f040 80cc 	bne.w	8002c26 <HAL_SPI_TransmitReceive+0x1d8>
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	f040 80c9 	bne.w	8002c26 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a94:	2d00      	cmp	r5, #0
 8002a96:	f000 80c4 	beq.w	8002c22 <HAL_SPI_TransmitReceive+0x1d4>
 8002a9a:	f1b9 0f00 	cmp.w	r9, #0
 8002a9e:	f000 80c0 	beq.w	8002c22 <HAL_SPI_TransmitReceive+0x1d4>
 8002aa2:	2e00      	cmp	r6, #0
 8002aa4:	f000 80bd 	beq.w	8002c22 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002aa8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002aac:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ab0:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ab2:	bf1c      	itt	ne
 8002ab4:	2305      	movne	r3, #5
 8002ab6:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002aba:	2300      	movs	r3, #0
 8002abc:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8002abe:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ac2:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8002ac4:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8002ac6:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ac8:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8002aca:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002acc:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8002ace:	bf58      	it	pl
 8002ad0:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ad2:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8002ad4:	bf58      	it	pl
 8002ad6:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8002ada:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8002adc:	bf58      	it	pl
 8002ade:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ae0:	68e2      	ldr	r2, [r4, #12]
 8002ae2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002ae6:	d158      	bne.n	8002b9a <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ae8:	b109      	cbz	r1, 8002aee <HAL_SPI_TransmitReceive+0xa0>
 8002aea:	2e01      	cmp	r6, #1
 8002aec:	d107      	bne.n	8002afe <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002aee:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002af2:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8002af4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002af6:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002af8:	3b01      	subs	r3, #1
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002afe:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b00:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	b9ab      	cbnz	r3, 8002b32 <HAL_SPI_TransmitReceive+0xe4>
 8002b06:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	b993      	cbnz	r3, 8002b32 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b0c:	4642      	mov	r2, r8
 8002b0e:	4639      	mov	r1, r7
 8002b10:	4620      	mov	r0, r4
 8002b12:	f7ff fe8b 	bl	800282c <SPI_EndRxTxTransaction>
 8002b16:	2800      	cmp	r0, #0
 8002b18:	f040 8081 	bne.w	8002c1e <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b1c:	68a3      	ldr	r3, [r4, #8]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d132      	bne.n	8002b88 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b22:	6823      	ldr	r3, [r4, #0]
 8002b24:	9001      	str	r0, [sp, #4]
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	9201      	str	r2, [sp, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	9301      	str	r3, [sp, #4]
 8002b2e:	9b01      	ldr	r3, [sp, #4]
 8002b30:	e02a      	b.n	8002b88 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b32:	6822      	ldr	r2, [r4, #0]
 8002b34:	6893      	ldr	r3, [r2, #8]
 8002b36:	0799      	lsls	r1, r3, #30
 8002b38:	d50d      	bpl.n	8002b56 <HAL_SPI_TransmitReceive+0x108>
 8002b3a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	b153      	cbz	r3, 8002b56 <HAL_SPI_TransmitReceive+0x108>
 8002b40:	b14d      	cbz	r5, 8002b56 <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b42:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b44:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002b48:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b4a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002b4c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8002b54:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b56:	6893      	ldr	r3, [r2, #8]
 8002b58:	07db      	lsls	r3, r3, #31
 8002b5a:	d50c      	bpl.n	8002b76 <HAL_SPI_TransmitReceive+0x128>
 8002b5c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	b14b      	cbz	r3, 8002b76 <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b64:	68d2      	ldr	r2, [r2, #12]
 8002b66:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b6a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002b6c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002b74:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b76:	f7fe f90f 	bl	8000d98 <HAL_GetTick>
 8002b7a:	eba0 0008 	sub.w	r0, r0, r8
 8002b7e:	4287      	cmp	r7, r0
 8002b80:	d8be      	bhi.n	8002b00 <HAL_SPI_TransmitReceive+0xb2>
 8002b82:	1c7e      	adds	r6, r7, #1
 8002b84:	d0bc      	beq.n	8002b00 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8002b86:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002b94:	b003      	add	sp, #12
 8002b96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b9a:	b109      	cbz	r1, 8002ba0 <HAL_SPI_TransmitReceive+0x152>
 8002b9c:	2e01      	cmp	r6, #1
 8002b9e:	d108      	bne.n	8002bb2 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ba0:	782a      	ldrb	r2, [r5, #0]
 8002ba2:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ba4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002baa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002bac:	3b01      	subs	r3, #1
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002bb2:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bb4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	b91b      	cbnz	r3, 8002bc2 <HAL_SPI_TransmitReceive+0x174>
 8002bba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0a4      	beq.n	8002b0c <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bc2:	6822      	ldr	r2, [r4, #0]
 8002bc4:	6893      	ldr	r3, [r2, #8]
 8002bc6:	0798      	lsls	r0, r3, #30
 8002bc8:	d50e      	bpl.n	8002be8 <HAL_SPI_TransmitReceive+0x19a>
 8002bca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	b15b      	cbz	r3, 8002be8 <HAL_SPI_TransmitReceive+0x19a>
 8002bd0:	b155      	cbz	r5, 8002be8 <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002bd2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8002bd8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002bda:	3301      	adds	r3, #1
 8002bdc:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002bde:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002be0:	3b01      	subs	r3, #1
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8002be6:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002be8:	6822      	ldr	r2, [r4, #0]
 8002bea:	6893      	ldr	r3, [r2, #8]
 8002bec:	07d9      	lsls	r1, r3, #31
 8002bee:	d50d      	bpl.n	8002c0c <HAL_SPI_TransmitReceive+0x1be>
 8002bf0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	b153      	cbz	r3, 8002c0c <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002bf6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002bf8:	68d2      	ldr	r2, [r2, #12]
 8002bfa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002bfc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002bfe:	3301      	adds	r3, #1
 8002c00:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002c02:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002c0a:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c0c:	f7fe f8c4 	bl	8000d98 <HAL_GetTick>
 8002c10:	eba0 0008 	sub.w	r0, r0, r8
 8002c14:	4287      	cmp	r7, r0
 8002c16:	d8cd      	bhi.n	8002bb4 <HAL_SPI_TransmitReceive+0x166>
 8002c18:	1c7b      	adds	r3, r7, #1
 8002c1a:	d0cb      	beq.n	8002bb4 <HAL_SPI_TransmitReceive+0x166>
 8002c1c:	e7b3      	b.n	8002b86 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c1e:	2320      	movs	r3, #32
 8002c20:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002c22:	2001      	movs	r0, #1
 8002c24:	e7b0      	b.n	8002b88 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 8002c26:	2002      	movs	r0, #2
 8002c28:	e7ae      	b.n	8002b88 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 8002c2a:	2002      	movs	r0, #2
 8002c2c:	e7b2      	b.n	8002b94 <HAL_SPI_TransmitReceive+0x146>
	...

08002c30 <HAL_SPI_TransmitReceive_DMA>:
{
 8002c30:	b538      	push	{r3, r4, r5, lr}
 8002c32:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8002c34:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 8002c38:	2801      	cmp	r0, #1
 8002c3a:	d070      	beq.n	8002d1e <HAL_SPI_TransmitReceive_DMA+0xee>
 8002c3c:	2001      	movs	r0, #1
 8002c3e:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  tmp_state           = hspi->State;
 8002c42:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002c46:	b2c0      	uxtb	r0, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002c48:	2801      	cmp	r0, #1
 8002c4a:	d008      	beq.n	8002c5e <HAL_SPI_TransmitReceive_DMA+0x2e>
 8002c4c:	6865      	ldr	r5, [r4, #4]
 8002c4e:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 8002c52:	d160      	bne.n	8002d16 <HAL_SPI_TransmitReceive_DMA+0xe6>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c54:	68a5      	ldr	r5, [r4, #8]
 8002c56:	2d00      	cmp	r5, #0
 8002c58:	d15d      	bne.n	8002d16 <HAL_SPI_TransmitReceive_DMA+0xe6>
 8002c5a:	2804      	cmp	r0, #4
 8002c5c:	d15b      	bne.n	8002d16 <HAL_SPI_TransmitReceive_DMA+0xe6>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c5e:	2900      	cmp	r1, #0
 8002c60:	d05b      	beq.n	8002d1a <HAL_SPI_TransmitReceive_DMA+0xea>
 8002c62:	2a00      	cmp	r2, #0
 8002c64:	d059      	beq.n	8002d1a <HAL_SPI_TransmitReceive_DMA+0xea>
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d057      	beq.n	8002d1a <HAL_SPI_TransmitReceive_DMA+0xea>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c6a:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  hspi->TxXferSize  = Size;
 8002c6e:	86a3      	strh	r3, [r4, #52]	; 0x34
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c70:	2804      	cmp	r0, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c72:	bf1c      	itt	ne
 8002c74:	2005      	movne	r0, #5
 8002c76:	f884 0051 	strbne.w	r0, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->TxXferCount = Size;
 8002c7e:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxXferCount = Size;
 8002c80:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002c82:	87a3      	strh	r3, [r4, #60]	; 0x3c
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002c84:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c88:	6321      	str	r1, [r4, #48]	; 0x30
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002c8a:	2b04      	cmp	r3, #4
  hspi->TxISR       = NULL;
 8002c8c:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
 8002c90:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002c92:	bf0c      	ite	eq
 8002c94:	4b23      	ldreq	r3, [pc, #140]	; (8002d24 <HAL_SPI_TransmitReceive_DMA+0xf4>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002c96:	4b24      	ldrne	r3, [pc, #144]	; (8002d28 <HAL_SPI_TransmitReceive_DMA+0xf8>)
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c98:	63a2      	str	r2, [r4, #56]	; 0x38
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002c9a:	bf0b      	itete	eq
 8002c9c:	6403      	streq	r3, [r0, #64]	; 0x40
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002c9e:	6403      	strne	r3, [r0, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002ca0:	4b22      	ldreq	r3, [pc, #136]	; (8002d2c <HAL_SPI_TransmitReceive_DMA+0xfc>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8002ca2:	4b23      	ldrne	r3, [pc, #140]	; (8002d30 <HAL_SPI_TransmitReceive_DMA+0x100>)
 8002ca4:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8002ca6:	6821      	ldr	r1, [r4, #0]
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002ca8:	4b22      	ldr	r3, [pc, #136]	; (8002d34 <HAL_SPI_TransmitReceive_DMA+0x104>)
 8002caa:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	6503      	str	r3, [r0, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8002cb0:	310c      	adds	r1, #12
 8002cb2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002cb4:	f7fe f974 	bl	8000fa0 <HAL_DMA_Start_IT>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	b150      	cbz	r0, 8002cd2 <HAL_SPI_TransmitReceive_DMA+0xa2>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002cbc:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8002cbe:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002cc0:	f043 0310 	orr.w	r3, r3, #16
 8002cc4:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8002cc6:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002cd0:	bd38      	pop	{r3, r4, r5, pc}
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002cd2:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002cd4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002cd6:	6851      	ldr	r1, [r2, #4]
 8002cd8:	f041 0101 	orr.w	r1, r1, #1
 8002cdc:	6051      	str	r1, [r2, #4]
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002cde:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002ce2:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8002ce6:	320c      	adds	r2, #12
 8002ce8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002cea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002cec:	f7fe f958 	bl	8000fa0 <HAL_DMA_Start_IT>
 8002cf0:	2800      	cmp	r0, #0
 8002cf2:	d1e3      	bne.n	8002cbc <HAL_SPI_TransmitReceive_DMA+0x8c>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cf4:	6823      	ldr	r3, [r4, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8002cfa:	bf5e      	ittt	pl
 8002cfc:	681a      	ldrpl	r2, [r3, #0]
 8002cfe:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8002d02:	601a      	strpl	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	f042 0220 	orr.w	r2, r2, #32
 8002d0a:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	f042 0202 	orr.w	r2, r2, #2
 8002d12:	605a      	str	r2, [r3, #4]
 8002d14:	e7d9      	b.n	8002cca <HAL_SPI_TransmitReceive_DMA+0x9a>
    errorcode = HAL_BUSY;
 8002d16:	2002      	movs	r0, #2
 8002d18:	e7d7      	b.n	8002cca <HAL_SPI_TransmitReceive_DMA+0x9a>
    errorcode = HAL_ERROR;
 8002d1a:	2001      	movs	r0, #1
 8002d1c:	e7d5      	b.n	8002cca <HAL_SPI_TransmitReceive_DMA+0x9a>
  __HAL_LOCK(hspi);
 8002d1e:	2002      	movs	r0, #2
 8002d20:	e7d6      	b.n	8002cd0 <HAL_SPI_TransmitReceive_DMA+0xa0>
 8002d22:	bf00      	nop
 8002d24:	08002d3f 	.word	0x08002d3f
 8002d28:	08002d4b 	.word	0x08002d4b
 8002d2c:	08002d79 	.word	0x08002d79
 8002d30:	08002dcb 	.word	0x08002dcb
 8002d34:	08002d57 	.word	0x08002d57

08002d38 <HAL_SPI_RxCpltCallback>:
 8002d38:	4770      	bx	lr

08002d3a <HAL_SPI_TxRxCpltCallback>:
 8002d3a:	4770      	bx	lr

08002d3c <HAL_SPI_RxHalfCpltCallback>:
 8002d3c:	4770      	bx	lr

08002d3e <SPI_DMAHalfReceiveCplt>:
{
 8002d3e:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8002d40:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002d42:	f7ff fffb 	bl	8002d3c <HAL_SPI_RxHalfCpltCallback>
}
 8002d46:	bd08      	pop	{r3, pc}

08002d48 <HAL_SPI_TxRxHalfCpltCallback>:
 8002d48:	4770      	bx	lr

08002d4a <SPI_DMAHalfTransmitReceiveCplt>:
{
 8002d4a:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8002d4c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002d4e:	f7ff fffb 	bl	8002d48 <HAL_SPI_TxRxHalfCpltCallback>
}
 8002d52:	bd08      	pop	{r3, pc}

08002d54 <HAL_SPI_ErrorCallback>:
 8002d54:	4770      	bx	lr

08002d56 <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d56:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002d58:	6802      	ldr	r2, [r0, #0]
{
 8002d5a:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002d5c:	6853      	ldr	r3, [r2, #4]
 8002d5e:	f023 0303 	bic.w	r3, r3, #3
 8002d62:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002d64:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002d66:	f043 0310 	orr.w	r3, r3, #16
 8002d6a:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 8002d72:	f7ff ffef 	bl	8002d54 <HAL_SPI_ErrorCallback>
}
 8002d76:	bd08      	pop	{r3, pc}

08002d78 <SPI_DMAReceiveCplt>:
{
 8002d78:	b538      	push	{r3, r4, r5, lr}
 8002d7a:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d7c:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 8002d7e:	f7fe f80b 	bl	8000d98 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002d82:	682b      	ldr	r3, [r5, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	05db      	lsls	r3, r3, #23
  tickstart = HAL_GetTick();
 8002d88:	4602      	mov	r2, r0
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002d8a:	d41a      	bmi.n	8002dc2 <SPI_DMAReceiveCplt+0x4a>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002d8c:	6823      	ldr	r3, [r4, #0]
 8002d8e:	6859      	ldr	r1, [r3, #4]
 8002d90:	f021 0120 	bic.w	r1, r1, #32
 8002d94:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002d96:	6859      	ldr	r1, [r3, #4]
 8002d98:	f021 0103 	bic.w	r1, r1, #3
 8002d9c:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002d9e:	4620      	mov	r0, r4
 8002da0:	2164      	movs	r1, #100	; 0x64
 8002da2:	f7ff fd18 	bl	80027d6 <SPI_EndRxTransaction>
 8002da6:	b108      	cbz	r0, 8002dac <SPI_DMAReceiveCplt+0x34>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002da8:	2320      	movs	r3, #32
 8002daa:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->RxXferCount = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002db0:	2301      	movs	r3, #1
 8002db2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002db6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002db8:	b11b      	cbz	r3, 8002dc2 <SPI_DMAReceiveCplt+0x4a>
      HAL_SPI_ErrorCallback(hspi);
 8002dba:	4620      	mov	r0, r4
 8002dbc:	f7ff ffca 	bl	8002d54 <HAL_SPI_ErrorCallback>
}
 8002dc0:	bd38      	pop	{r3, r4, r5, pc}
  HAL_SPI_RxCpltCallback(hspi);
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	f7ff ffb8 	bl	8002d38 <HAL_SPI_RxCpltCallback>
 8002dc8:	e7fa      	b.n	8002dc0 <SPI_DMAReceiveCplt+0x48>

08002dca <SPI_DMATransmitReceiveCplt>:
{
 8002dca:	b538      	push	{r3, r4, r5, lr}
 8002dcc:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002dce:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 8002dd0:	f7fd ffe2 	bl	8000d98 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002dd4:	682b      	ldr	r3, [r5, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	05db      	lsls	r3, r3, #23
  tickstart = HAL_GetTick();
 8002dda:	4602      	mov	r2, r0
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002ddc:	d41e      	bmi.n	8002e1c <SPI_DMATransmitReceiveCplt+0x52>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002dde:	6821      	ldr	r1, [r4, #0]
 8002de0:	684b      	ldr	r3, [r1, #4]
 8002de2:	f023 0320 	bic.w	r3, r3, #32
 8002de6:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002de8:	4620      	mov	r0, r4
 8002dea:	2164      	movs	r1, #100	; 0x64
 8002dec:	f7ff fd1e 	bl	800282c <SPI_EndRxTxTransaction>
 8002df0:	b118      	cbz	r0, 8002dfa <SPI_DMATransmitReceiveCplt+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002df2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002df4:	f043 0320 	orr.w	r3, r3, #32
 8002df8:	6563      	str	r3, [r4, #84]	; 0x54
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002dfa:	6822      	ldr	r2, [r4, #0]
 8002dfc:	6853      	ldr	r3, [r2, #4]
 8002dfe:	f023 0303 	bic.w	r3, r3, #3
 8002e02:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8002e08:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e10:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e12:	b11b      	cbz	r3, 8002e1c <SPI_DMATransmitReceiveCplt+0x52>
      HAL_SPI_ErrorCallback(hspi);
 8002e14:	4620      	mov	r0, r4
 8002e16:	f7ff ff9d 	bl	8002d54 <HAL_SPI_ErrorCallback>
}
 8002e1a:	bd38      	pop	{r3, r4, r5, pc}
  HAL_SPI_TxRxCpltCallback(hspi);
 8002e1c:	4620      	mov	r0, r4
 8002e1e:	f7ff ff8c 	bl	8002d3a <HAL_SPI_TxRxCpltCallback>
 8002e22:	e7fa      	b.n	8002e1a <SPI_DMATransmitReceiveCplt+0x50>

08002e24 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e24:	4a30      	ldr	r2, [pc, #192]	; (8002ee8 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8002e26:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e28:	4290      	cmp	r0, r2
 8002e2a:	d012      	beq.n	8002e52 <TIM_Base_SetConfig+0x2e>
 8002e2c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002e30:	d00f      	beq.n	8002e52 <TIM_Base_SetConfig+0x2e>
 8002e32:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002e36:	4290      	cmp	r0, r2
 8002e38:	d00b      	beq.n	8002e52 <TIM_Base_SetConfig+0x2e>
 8002e3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e3e:	4290      	cmp	r0, r2
 8002e40:	d007      	beq.n	8002e52 <TIM_Base_SetConfig+0x2e>
 8002e42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e46:	4290      	cmp	r0, r2
 8002e48:	d003      	beq.n	8002e52 <TIM_Base_SetConfig+0x2e>
 8002e4a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002e4e:	4290      	cmp	r0, r2
 8002e50:	d119      	bne.n	8002e86 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002e52:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002e58:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e5a:	4a23      	ldr	r2, [pc, #140]	; (8002ee8 <TIM_Base_SetConfig+0xc4>)
 8002e5c:	4290      	cmp	r0, r2
 8002e5e:	d029      	beq.n	8002eb4 <TIM_Base_SetConfig+0x90>
 8002e60:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002e64:	d026      	beq.n	8002eb4 <TIM_Base_SetConfig+0x90>
 8002e66:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002e6a:	4290      	cmp	r0, r2
 8002e6c:	d022      	beq.n	8002eb4 <TIM_Base_SetConfig+0x90>
 8002e6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e72:	4290      	cmp	r0, r2
 8002e74:	d01e      	beq.n	8002eb4 <TIM_Base_SetConfig+0x90>
 8002e76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e7a:	4290      	cmp	r0, r2
 8002e7c:	d01a      	beq.n	8002eb4 <TIM_Base_SetConfig+0x90>
 8002e7e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002e82:	4290      	cmp	r0, r2
 8002e84:	d016      	beq.n	8002eb4 <TIM_Base_SetConfig+0x90>
 8002e86:	4a19      	ldr	r2, [pc, #100]	; (8002eec <TIM_Base_SetConfig+0xc8>)
 8002e88:	4290      	cmp	r0, r2
 8002e8a:	d013      	beq.n	8002eb4 <TIM_Base_SetConfig+0x90>
 8002e8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e90:	4290      	cmp	r0, r2
 8002e92:	d00f      	beq.n	8002eb4 <TIM_Base_SetConfig+0x90>
 8002e94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e98:	4290      	cmp	r0, r2
 8002e9a:	d00b      	beq.n	8002eb4 <TIM_Base_SetConfig+0x90>
 8002e9c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002ea0:	4290      	cmp	r0, r2
 8002ea2:	d007      	beq.n	8002eb4 <TIM_Base_SetConfig+0x90>
 8002ea4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ea8:	4290      	cmp	r0, r2
 8002eaa:	d003      	beq.n	8002eb4 <TIM_Base_SetConfig+0x90>
 8002eac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002eb0:	4290      	cmp	r0, r2
 8002eb2:	d103      	bne.n	8002ebc <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eb4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eba:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ebc:	694a      	ldr	r2, [r1, #20]
 8002ebe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ec2:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002ec4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ec6:	688b      	ldr	r3, [r1, #8]
 8002ec8:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002eca:	680b      	ldr	r3, [r1, #0]
 8002ecc:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ece:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <TIM_Base_SetConfig+0xc4>)
 8002ed0:	4298      	cmp	r0, r3
 8002ed2:	d003      	beq.n	8002edc <TIM_Base_SetConfig+0xb8>
 8002ed4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ed8:	4298      	cmp	r0, r3
 8002eda:	d101      	bne.n	8002ee0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002edc:	690b      	ldr	r3, [r1, #16]
 8002ede:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	6143      	str	r3, [r0, #20]
}
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40010000 	.word	0x40010000
 8002eec:	40014000 	.word	0x40014000

08002ef0 <HAL_TIM_Base_Init>:
{
 8002ef0:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002ef2:	4604      	mov	r4, r0
 8002ef4:	b1a0      	cbz	r0, 8002f20 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002ef6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002efa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002efe:	b91b      	cbnz	r3, 8002f08 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002f00:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002f04:	f000 fee6 	bl	8003cd4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002f08:	2302      	movs	r3, #2
 8002f0a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f0e:	6820      	ldr	r0, [r4, #0]
 8002f10:	1d21      	adds	r1, r4, #4
 8002f12:	f7ff ff87 	bl	8002e24 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002f16:	2301      	movs	r3, #1
 8002f18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002f1c:	2000      	movs	r0, #0
}
 8002f1e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002f20:	2001      	movs	r0, #1
 8002f22:	e7fc      	b.n	8002f1e <HAL_TIM_Base_Init+0x2e>

08002f24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f24:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f26:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f28:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f2a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f2e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002f32:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f34:	6083      	str	r3, [r0, #8]
}
 8002f36:	bd10      	pop	{r4, pc}

08002f38 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002f38:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002f3c:	2b01      	cmp	r3, #1
{
 8002f3e:	b570      	push	{r4, r5, r6, lr}
 8002f40:	4604      	mov	r4, r0
 8002f42:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002f46:	d019      	beq.n	8002f7c <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 8002f48:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002f4c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8002f4e:	2301      	movs	r3, #1
 8002f50:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002f54:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002f5e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002f60:	680b      	ldr	r3, [r1, #0]
 8002f62:	2b40      	cmp	r3, #64	; 0x40
 8002f64:	d065      	beq.n	8003032 <HAL_TIM_ConfigClockSource+0xfa>
 8002f66:	d815      	bhi.n	8002f94 <HAL_TIM_ConfigClockSource+0x5c>
 8002f68:	2b10      	cmp	r3, #16
 8002f6a:	d00c      	beq.n	8002f86 <HAL_TIM_ConfigClockSource+0x4e>
 8002f6c:	d807      	bhi.n	8002f7e <HAL_TIM_ConfigClockSource+0x46>
 8002f6e:	b153      	cbz	r3, 8002f86 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8002f70:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002f72:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002f74:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002f78:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002f7c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002f7e:	2b20      	cmp	r3, #32
 8002f80:	d001      	beq.n	8002f86 <HAL_TIM_ConfigClockSource+0x4e>
 8002f82:	2b30      	cmp	r3, #48	; 0x30
 8002f84:	d1f4      	bne.n	8002f70 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8002f86:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f88:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f8c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f90:	4313      	orrs	r3, r2
 8002f92:	e01a      	b.n	8002fca <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8002f94:	2b60      	cmp	r3, #96	; 0x60
 8002f96:	d034      	beq.n	8003002 <HAL_TIM_ConfigClockSource+0xca>
 8002f98:	d819      	bhi.n	8002fce <HAL_TIM_ConfigClockSource+0x96>
 8002f9a:	2b50      	cmp	r3, #80	; 0x50
 8002f9c:	d1e8      	bne.n	8002f70 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f9e:	684a      	ldr	r2, [r1, #4]
 8002fa0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002fa2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fa4:	6a05      	ldr	r5, [r0, #32]
 8002fa6:	f025 0501 	bic.w	r5, r5, #1
 8002faa:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fac:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fae:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fb6:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002fba:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002fbc:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002fbe:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002fc0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fc6:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8002fca:	6083      	str	r3, [r0, #8]
 8002fcc:	e7d0      	b.n	8002f70 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8002fce:	2b70      	cmp	r3, #112	; 0x70
 8002fd0:	d00c      	beq.n	8002fec <HAL_TIM_ConfigClockSource+0xb4>
 8002fd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fd6:	d1cb      	bne.n	8002f70 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8002fd8:	68cb      	ldr	r3, [r1, #12]
 8002fda:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8002fde:	f7ff ffa1 	bl	8002f24 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fe2:	6822      	ldr	r2, [r4, #0]
 8002fe4:	6893      	ldr	r3, [r2, #8]
 8002fe6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fea:	e008      	b.n	8002ffe <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8002fec:	68cb      	ldr	r3, [r1, #12]
 8002fee:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8002ff2:	f7ff ff97 	bl	8002f24 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ff6:	6822      	ldr	r2, [r4, #0]
 8002ff8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ffa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ffe:	6093      	str	r3, [r2, #8]
      break;
 8003000:	e7b6      	b.n	8002f70 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003002:	684d      	ldr	r5, [r1, #4]
 8003004:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003006:	6a01      	ldr	r1, [r0, #32]
 8003008:	f021 0110 	bic.w	r1, r1, #16
 800300c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800300e:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8003010:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003012:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003016:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800301a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800301e:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003022:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003024:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003026:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800302c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8003030:	e7cb      	b.n	8002fca <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003032:	684a      	ldr	r2, [r1, #4]
 8003034:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003036:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003038:	6a05      	ldr	r5, [r0, #32]
 800303a:	f025 0501 	bic.w	r5, r5, #1
 800303e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003040:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003042:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800304a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800304e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8003050:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003052:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003054:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800305a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800305e:	e7b4      	b.n	8002fca <HAL_TIM_ConfigClockSource+0x92>

08003060 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003060:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003064:	2b01      	cmp	r3, #1
{
 8003066:	b530      	push	{r4, r5, lr}
 8003068:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800306c:	d014      	beq.n	8003098 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800306e:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003070:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003074:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003076:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003078:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800307a:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 800307c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003080:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003084:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003086:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003088:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800308a:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800308c:	2301      	movs	r3, #1
 800308e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003092:	2300      	movs	r3, #0
 8003094:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8003098:	4618      	mov	r0, r3

  return HAL_OK;
}
 800309a:	bd30      	pop	{r4, r5, pc}

0800309c <arm_max_f32>:
void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 800309c:	b5f0      	push	{r4, r5, r6, r7, lr}
  outIndex = 0u;
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 800309e:	1e4c      	subs	r4, r1, #1
  out = *pSrc++;
 80030a0:	4606      	mov	r6, r0
  blkCnt = (blockSize - 1u) >> 2u;
 80030a2:	ea4f 0c94 	mov.w	ip, r4, lsr #2
  count = 0u;
 80030a6:	2500      	movs	r5, #0
  out = *pSrc++;
 80030a8:	edd0 7a00 	vldr	s15, [r0]
 80030ac:	3614      	adds	r6, #20
 80030ae:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
  outIndex = 0u;
 80030b2:	462f      	mov	r7, r5

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  while(blkCnt > 0u)
 80030b4:	4575      	cmp	r5, lr
 80030b6:	d10b      	bne.n	80030d0 <arm_max_f32+0x34>
 80030b8:	eb00 100c 	add.w	r0, r0, ip, lsl #4
    /* Decrement the loop counter */
    blkCnt--;
  }

  /* if (blockSize - 1u) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 80030bc:	f004 0403 	and.w	r4, r4, #3
 80030c0:	3004      	adds	r0, #4
 80030c2:	1b0c      	subs	r4, r1, r4

  blkCnt = (blockSize - 1u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 80030c4:	42a1      	cmp	r1, r4
 80030c6:	d134      	bne.n	8003132 <arm_max_f32+0x96>
    blkCnt--;

  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 80030c8:	edc2 7a00 	vstr	s15, [r2]
  *pIndex = outIndex;
 80030cc:	601f      	str	r7, [r3, #0]
}
 80030ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    maxVal1 = *pSrc++;
 80030d0:	ed56 6a04 	vldr	s13, [r6, #-16]
    maxVal2 = *pSrc++;
 80030d4:	ed16 7a03 	vldr	s14, [r6, #-12]
    if(out < maxVal1)
 80030d8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80030dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      out = maxVal1;
 80030e0:	bf48      	it	mi
 80030e2:	eef0 7a66 	vmovmi.f32	s15, s13
    if(out < maxVal2)
 80030e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030ea:	bf48      	it	mi
 80030ec:	1c6f      	addmi	r7, r5, #1
    maxVal1 = *pSrc++;
 80030ee:	ed56 6a02 	vldr	s13, [r6, #-8]
    if(out < maxVal2)
 80030f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      out = maxVal2;
 80030f6:	bf48      	it	mi
 80030f8:	eef0 7a47 	vmovmi.f32	s15, s14
    if(out < maxVal1)
 80030fc:	eef4 7ae6 	vcmpe.f32	s15, s13
 8003100:	bf48      	it	mi
 8003102:	1caf      	addmi	r7, r5, #2
    maxVal2 = *pSrc++;
 8003104:	ed16 7a01 	vldr	s14, [r6, #-4]
    if(out < maxVal1)
 8003108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      out = maxVal1;
 800310c:	bf48      	it	mi
 800310e:	eef0 7a66 	vmovmi.f32	s15, s13
    if(out < maxVal2)
 8003112:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003116:	bf48      	it	mi
 8003118:	1cef      	addmi	r7, r5, #3
 800311a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800311e:	f105 0504 	add.w	r5, r5, #4
 8003122:	bf54      	ite	pl
 8003124:	eeb0 7a67 	vmovpl.f32	s14, s15
      outIndex = count + 4u;
 8003128:	462f      	movmi	r7, r5
 800312a:	3610      	adds	r6, #16
    count += 4u;
 800312c:	eef0 7a47 	vmov.f32	s15, s14
 8003130:	e7c0      	b.n	80030b4 <arm_max_f32+0x18>
    maxVal1 = *pSrc++;
 8003132:	ecb0 7a01 	vldmia	r0!, {s14}
    if(out < maxVal1)
 8003136:	eef4 7ac7 	vcmpe.f32	s15, s14
 800313a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800313e:	bf54      	ite	pl
 8003140:	eeb0 7a67 	vmovpl.f32	s14, s15
 8003144:	4627      	movmi	r7, r4
 8003146:	eef0 7a47 	vmov.f32	s15, s14
 800314a:	3401      	adds	r4, #1
 800314c:	e7ba      	b.n	80030c4 <arm_max_f32+0x28>
	...

08003150 <arm_mean_f32>:

void arm_mean_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 8003150:	b530      	push	{r4, r5, lr}
  float32_t sum = 0.0f;                          /* Temporary result storage */
 8003152:	eddf 7a17 	vldr	s15, [pc, #92]	; 80031b0 <arm_mean_f32+0x60>

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t in1, in2, in3, in4;

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 8003156:	088d      	lsrs	r5, r1, #2
 8003158:	4603      	mov	r3, r0
 800315a:	462c      	mov	r4, r5
 800315c:	3310      	adds	r3, #16

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 800315e:	b984      	cbnz	r4, 8003182 <arm_mean_f32+0x32>
 8003160:	eb00 1005 	add.w	r0, r0, r5, lsl #4
    blkCnt--;
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8003164:	f001 0303 	and.w	r3, r1, #3
 8003168:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 800316c:	4298      	cmp	r0, r3
 800316e:	d11a      	bne.n	80031a6 <arm_mean_f32+0x56>
    blkCnt--;
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store the result to the destination */
  *pResult = sum / (float32_t) blockSize;
 8003170:	ee07 1a10 	vmov	s14, r1
 8003174:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003178:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800317c:	edc2 6a00 	vstr	s13, [r2]
}
 8003180:	bd30      	pop	{r4, r5, pc}
    sum += in1;
 8003182:	ed13 7a04 	vldr	s14, [r3, #-16]
 8003186:	ee77 7a87 	vadd.f32	s15, s15, s14
    sum += in2;
 800318a:	ed13 7a03 	vldr	s14, [r3, #-12]
 800318e:	ee77 7a87 	vadd.f32	s15, s15, s14
    sum += in3;
 8003192:	ed13 7a02 	vldr	s14, [r3, #-8]
 8003196:	ee77 7a87 	vadd.f32	s15, s15, s14
    sum += in4;
 800319a:	ed13 7a01 	vldr	s14, [r3, #-4]
    blkCnt--;
 800319e:	3c01      	subs	r4, #1
    sum += in4;
 80031a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031a4:	e7da      	b.n	800315c <arm_mean_f32+0xc>
    sum += *pSrc++;
 80031a6:	ecb0 7a01 	vldmia	r0!, {s14}
 80031aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031ae:	e7dd      	b.n	800316c <arm_mean_f32+0x1c>
 80031b0:	00000000 	.word	0x00000000

080031b4 <arm_min_f32>:
void arm_min_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 80031b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  outIndex = 0u;
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 80031b6:	1e4c      	subs	r4, r1, #1
  out = *pSrc++;
 80031b8:	4606      	mov	r6, r0
  blkCnt = (blockSize - 1u) >> 2u;
 80031ba:	ea4f 0c94 	mov.w	ip, r4, lsr #2
  count = 0u;
 80031be:	2500      	movs	r5, #0
  out = *pSrc++;
 80031c0:	edd0 7a00 	vldr	s15, [r0]
 80031c4:	3614      	adds	r6, #20
 80031c6:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
  outIndex = 0u;
 80031ca:	462f      	mov	r7, r5

  while(blkCnt > 0)
 80031cc:	4575      	cmp	r5, lr
 80031ce:	d10b      	bne.n	80031e8 <arm_min_f32+0x34>
 80031d0:	eb00 100c 	add.w	r0, r0, ip, lsl #4

    blkCnt--;
  }

  /* if (blockSize - 1u ) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 80031d4:	f004 0403 	and.w	r4, r4, #3
 80031d8:	3004      	adds	r0, #4
 80031da:	1b0c      	subs	r4, r1, r4

  blkCnt = (blockSize - 1u);

#endif //      #ifndef ARM_MATH_CM0_FAMILY

  while(blkCnt > 0)
 80031dc:	42a1      	cmp	r1, r4
 80031de:	d134      	bne.n	800324a <arm_min_f32+0x96>
    blkCnt--;

  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
 80031e0:	edc2 7a00 	vstr	s15, [r2]
  *pIndex = outIndex;
 80031e4:	601f      	str	r7, [r3, #0]
}
 80031e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    minVal1 = *pSrc++;
 80031e8:	ed56 6a04 	vldr	s13, [r6, #-16]
    minVal2 = *pSrc++;
 80031ec:	ed16 7a03 	vldr	s14, [r6, #-12]
    if(out > minVal1)
 80031f0:	eef4 7ae6 	vcmpe.f32	s15, s13
 80031f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      out = minVal1;
 80031f8:	bfc8      	it	gt
 80031fa:	eef0 7a66 	vmovgt.f32	s15, s13
    if(out > minVal2)
 80031fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003202:	bfc8      	it	gt
 8003204:	1c6f      	addgt	r7, r5, #1
    minVal1 = *pSrc++;
 8003206:	ed56 6a02 	vldr	s13, [r6, #-8]
    if(out > minVal2)
 800320a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      out = minVal2;
 800320e:	bfc8      	it	gt
 8003210:	eef0 7a47 	vmovgt.f32	s15, s14
    if(out > minVal1)
 8003214:	eef4 7ae6 	vcmpe.f32	s15, s13
 8003218:	bfc8      	it	gt
 800321a:	1caf      	addgt	r7, r5, #2
    minVal2 = *pSrc++;
 800321c:	ed16 7a01 	vldr	s14, [r6, #-4]
    if(out > minVal1)
 8003220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      out = minVal1;
 8003224:	bfc8      	it	gt
 8003226:	eef0 7a66 	vmovgt.f32	s15, s13
    if(out > minVal2)
 800322a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800322e:	bfc8      	it	gt
 8003230:	1cef      	addgt	r7, r5, #3
 8003232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003236:	f105 0504 	add.w	r5, r5, #4
 800323a:	bfd4      	ite	le
 800323c:	eeb0 7a67 	vmovle.f32	s14, s15
      outIndex = count + 4u;
 8003240:	462f      	movgt	r7, r5
 8003242:	3610      	adds	r6, #16
    count += 4u;
 8003244:	eef0 7a47 	vmov.f32	s15, s14
 8003248:	e7c0      	b.n	80031cc <arm_min_f32+0x18>
    minVal1 = *pSrc++;
 800324a:	ecb0 7a01 	vldmia	r0!, {s14}
    if(out > minVal1)
 800324e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003256:	bfd4      	ite	le
 8003258:	eeb0 7a67 	vmovle.f32	s14, s15
 800325c:	4627      	movgt	r7, r4
 800325e:	eef0 7a47 	vmov.f32	s15, s14
 8003262:	3401      	adds	r4, #1
 8003264:	e7ba      	b.n	80031dc <arm_min_f32+0x28>
	...

08003268 <arm_rms_f32>:
void arm_rms_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
  float32_t sum = 0.0f;                          /* Accumulator */
 8003268:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80032e4 <arm_rms_f32+0x7c>
{
 800326c:	b538      	push	{r3, r4, r5, lr}
 800326e:	4615      	mov	r5, r2
#ifndef ARM_MATH_CM0_FAMILY

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /* loop Unrolling */
  blkCnt = blockSize >> 2u;
 8003270:	088a      	lsrs	r2, r1, #2
 8003272:	4603      	mov	r3, r0
 8003274:	4614      	mov	r4, r2
 8003276:	eef0 6a67 	vmov.f32	s13, s15
 800327a:	3310      	adds	r3, #16

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 800327c:	b9bc      	cbnz	r4, 80032ae <arm_rms_f32+0x46>
 800327e:	eb00 1002 	add.w	r0, r0, r2, lsl #4
    blkCnt--;
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8003282:	f001 0303 	and.w	r3, r1, #3
 8003286:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 800328a:	4298      	cmp	r0, r3
 800328c:	d121      	bne.n	80032d2 <arm_rms_f32+0x6a>
    /* Decrement the loop counter */
    blkCnt--;
  }

  /* Compute Rms and store the result in the destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 800328e:	ee07 1a10 	vmov	s14, r1
 8003292:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003296:	ee87 0a87 	vdiv.f32	s0, s15, s14
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if(in >= 0.0f)
 800329a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800329e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a2:	db1b      	blt.n	80032dc <arm_rms_f32+0x74>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 80032a4:	f000 fdf6 	bl	8003e94 <sqrtf>
 80032a8:	ed85 0a00 	vstr	s0, [r5]
}
 80032ac:	bd38      	pop	{r3, r4, r5, pc}
    in = *pSrc++;
 80032ae:	ed13 7a04 	vldr	s14, [r3, #-16]
    sum += in * in;
 80032b2:	eee7 7a07 	vfma.f32	s15, s14, s14
    blkCnt--;
 80032b6:	3c01      	subs	r4, #1
    in = *pSrc++;
 80032b8:	ed13 7a03 	vldr	s14, [r3, #-12]
    sum += in * in;
 80032bc:	eee7 7a07 	vfma.f32	s15, s14, s14
    in = *pSrc++;
 80032c0:	ed13 7a02 	vldr	s14, [r3, #-8]
    sum += in * in;
 80032c4:	eee7 7a07 	vfma.f32	s15, s14, s14
    in = *pSrc++;
 80032c8:	ed13 7a01 	vldr	s14, [r3, #-4]
    sum += in * in;
 80032cc:	eee7 7a07 	vfma.f32	s15, s14, s14
 80032d0:	e7d3      	b.n	800327a <arm_rms_f32+0x12>
    in = *pSrc++;
 80032d2:	ecb0 7a01 	vldmia	r0!, {s14}
    sum += in * in;
 80032d6:	eee7 7a07 	vfma.f32	s15, s14, s14
 80032da:	e7d6      	b.n	800328a <arm_rms_f32+0x22>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 80032dc:	edc5 6a00 	vstr	s13, [r5]
}
 80032e0:	e7e4      	b.n	80032ac <arm_rms_f32+0x44>
 80032e2:	bf00      	nop
 80032e4:	00000000 	.word	0x00000000

080032e8 <arm_std_f32>:

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t meanOfSquares, mean, squareOfMean;

	if(blockSize == 1)
 80032e8:	2901      	cmp	r1, #1
{
 80032ea:	b538      	push	{r3, r4, r5, lr}
 80032ec:	ed9f 5a2a 	vldr	s10, [pc, #168]	; 8003398 <arm_std_f32+0xb0>
 80032f0:	4615      	mov	r5, r2
	if(blockSize == 1)
 80032f2:	d102      	bne.n	80032fa <arm_std_f32+0x12>
	{
		*pResult = 0;
 80032f4:	ed85 5a00 	vstr	s10, [r5]
  /* Compute standard deviation and then store the result to the destination */
  arm_sqrt_f32(var, pResult);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 80032f8:	bd38      	pop	{r3, r4, r5, pc}
  blkCnt = blockSize >> 2u;
 80032fa:	088a      	lsrs	r2, r1, #2
 80032fc:	4603      	mov	r3, r0
 80032fe:	4614      	mov	r4, r2
  float32_t sumOfSquares = 0.0f;                 /* Sum of squares */
 8003300:	eef0 7a45 	vmov.f32	s15, s10
  float32_t sum = 0.0f;                          /* Temporary result storage */
 8003304:	eeb0 7a45 	vmov.f32	s14, s10
 8003308:	3310      	adds	r3, #16
  while(blkCnt > 0u)
 800330a:	bb1c      	cbnz	r4, 8003354 <arm_std_f32+0x6c>
 800330c:	eb00 1002 	add.w	r0, r0, r2, lsl #4
  blkCnt = blockSize % 0x4u;
 8003310:	f001 0303 	and.w	r3, r1, #3
 8003314:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  while(blkCnt > 0u)
 8003318:	4298      	cmp	r0, r3
 800331a:	d135      	bne.n	8003388 <arm_std_f32+0xa0>
  meanOfSquares = sumOfSquares / ((float32_t) blockSize - 1.0f);
 800331c:	ee06 1a90 	vmov	s13, r1
 8003320:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003324:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8003328:	ee76 5ae5 	vsub.f32	s11, s13, s11
  mean = sum / (float32_t) blockSize;
 800332c:	ee87 6a26 	vdiv.f32	s12, s14, s13
  meanOfSquares = sumOfSquares / ((float32_t) blockSize - 1.0f);
 8003330:	ee87 0aa5 	vdiv.f32	s0, s15, s11
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 8003334:	eec6 7aa5 	vdiv.f32	s15, s13, s11
  arm_sqrt_f32((meanOfSquares - squareOfMean), pResult);
 8003338:	ee26 6a46 	vnmul.f32	s12, s12, s12
 800333c:	eea6 0a27 	vfma.f32	s0, s12, s15
    if(in >= 0.0f)
 8003340:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003348:	dbd4      	blt.n	80032f4 <arm_std_f32+0xc>
      *pOut = __builtin_sqrtf(in);
 800334a:	f000 fda3 	bl	8003e94 <sqrtf>
 800334e:	ed85 0a00 	vstr	s0, [r5]
 8003352:	e7d1      	b.n	80032f8 <arm_std_f32+0x10>
    in = *pSrc++;
 8003354:	ed53 6a04 	vldr	s13, [r3, #-16]
    sumOfSquares += in * in;
 8003358:	eee6 7aa6 	vfma.f32	s15, s13, s13
    blkCnt--;
 800335c:	3c01      	subs	r4, #1
    sum += in;
 800335e:	ee37 7a26 	vadd.f32	s14, s14, s13
    in = *pSrc++;
 8003362:	ed53 6a03 	vldr	s13, [r3, #-12]
    sumOfSquares += in * in;
 8003366:	eee6 7aa6 	vfma.f32	s15, s13, s13
    sum += in;
 800336a:	ee37 7a26 	vadd.f32	s14, s14, s13
    in = *pSrc++;
 800336e:	ed53 6a02 	vldr	s13, [r3, #-8]
    sumOfSquares += in * in;
 8003372:	eee6 7aa6 	vfma.f32	s15, s13, s13
    sum += in;
 8003376:	ee37 7a26 	vadd.f32	s14, s14, s13
    in = *pSrc++;
 800337a:	ed53 6a01 	vldr	s13, [r3, #-4]
    sum += in;
 800337e:	ee37 7a26 	vadd.f32	s14, s14, s13
    sumOfSquares += in * in;
 8003382:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8003386:	e7bf      	b.n	8003308 <arm_std_f32+0x20>
    in = *pSrc++;
 8003388:	ecf0 6a01 	vldmia	r0!, {s13}
    sum += in;
 800338c:	ee37 7a26 	vadd.f32	s14, s14, s13
    sumOfSquares += in * in;
 8003390:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8003394:	e7c0      	b.n	8003318 <arm_std_f32+0x30>
 8003396:	bf00      	nop
 8003398:	00000000 	.word	0x00000000

0800339c <arm_var_f32>:
   
  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t meanOfSquares, mean, squareOfMean;   /* Temporary variables */

	if(blockSize == 1)
 800339c:	2901      	cmp	r1, #1
{
 800339e:	b530      	push	{r4, r5, lr}
 80033a0:	eddf 7a25 	vldr	s15, [pc, #148]	; 8003438 <arm_var_f32+0x9c>
	if(blockSize == 1)
 80033a4:	d102      	bne.n	80033ac <arm_var_f32+0x10>
  /* Compute square of mean */
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
                                  ((float32_t) blockSize - 1.0f));

  /* Compute variance and then store the result to the destination */
  *pResult = meanOfSquares - squareOfMean;
 80033a6:	edc2 7a00 	vstr	s15, [r2]
  /* Compute the variance */
  *pResult = ((sumOfSquares - squareOfSum) / (float32_t) (blockSize - 1.0f));

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 80033aa:	bd30      	pop	{r4, r5, pc}
  blkCnt = blockSize >> 2u;
 80033ac:	088d      	lsrs	r5, r1, #2
 80033ae:	4603      	mov	r3, r0
 80033b0:	462c      	mov	r4, r5
  float32_t sum = 0.0f;                          /* Temporary result storage */
 80033b2:	eeb0 7a67 	vmov.f32	s14, s15
 80033b6:	3310      	adds	r3, #16
  while(blkCnt > 0u)
 80033b8:	b9e4      	cbnz	r4, 80033f4 <arm_var_f32+0x58>
 80033ba:	eb00 1005 	add.w	r0, r0, r5, lsl #4
  blkCnt = blockSize % 0x4u;
 80033be:	f001 0303 	and.w	r3, r1, #3
 80033c2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  while(blkCnt > 0u)
 80033c6:	4298      	cmp	r0, r3
 80033c8:	d12e      	bne.n	8003428 <arm_var_f32+0x8c>
  meanOfSquares = sumOfSquares / ((float32_t) blockSize - 1.0f);
 80033ca:	ee06 1a90 	vmov	s13, r1
 80033ce:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80033d2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80033d6:	ee76 5ae5 	vsub.f32	s11, s13, s11
  mean = sum / (float32_t) blockSize;
 80033da:	ee87 6a26 	vdiv.f32	s12, s14, s13
  meanOfSquares = sumOfSquares / ((float32_t) blockSize - 1.0f);
 80033de:	ee87 7aa5 	vdiv.f32	s14, s15, s11
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 80033e2:	eec6 7aa5 	vdiv.f32	s15, s13, s11
  *pResult = meanOfSquares - squareOfMean;
 80033e6:	ee26 6a46 	vnmul.f32	s12, s12, s12
 80033ea:	eea6 7a27 	vfma.f32	s14, s12, s15
 80033ee:	eef0 7a47 	vmov.f32	s15, s14
 80033f2:	e7d8      	b.n	80033a6 <arm_var_f32+0xa>
    in = *pSrc++;
 80033f4:	ed53 6a04 	vldr	s13, [r3, #-16]
    sumOfSquares += in * in;
 80033f8:	eee6 7aa6 	vfma.f32	s15, s13, s13
    blkCnt--;
 80033fc:	3c01      	subs	r4, #1
    sum += in;
 80033fe:	ee37 7a26 	vadd.f32	s14, s14, s13
    in = *pSrc++;
 8003402:	ed53 6a03 	vldr	s13, [r3, #-12]
    sumOfSquares += in * in;
 8003406:	eee6 7aa6 	vfma.f32	s15, s13, s13
    sum += in;
 800340a:	ee37 7a26 	vadd.f32	s14, s14, s13
    in = *pSrc++;
 800340e:	ed53 6a02 	vldr	s13, [r3, #-8]
    sumOfSquares += in * in;
 8003412:	eee6 7aa6 	vfma.f32	s15, s13, s13
    sum += in;
 8003416:	ee37 7a26 	vadd.f32	s14, s14, s13
    in = *pSrc++;
 800341a:	ed53 6a01 	vldr	s13, [r3, #-4]
    sum += in;
 800341e:	ee37 7a26 	vadd.f32	s14, s14, s13
    sumOfSquares += in * in;
 8003422:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8003426:	e7c6      	b.n	80033b6 <arm_var_f32+0x1a>
    in = *pSrc++;
 8003428:	ecf0 6a01 	vldmia	r0!, {s13}
    sum += in;
 800342c:	ee37 7a26 	vadd.f32	s14, s14, s13
    sumOfSquares += in * in;
 8003430:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8003434:	e7c7      	b.n	80033c6 <arm_var_f32+0x2a>
 8003436:	bf00      	nop
 8003438:	00000000 	.word	0x00000000

0800343c <delay_init>:
//初始化延遲函式
//SYSTICK的時鐘固定為HCLK時鐘的1/8
//SYSCLK:系統時鐘
void delay_init(uint8_t SYSCLK)
{
	SysTick->CTRL&=0xfffffffb;//bit2清空,選擇外部時鐘  HCLK/8
 800343c:	4a07      	ldr	r2, [pc, #28]	; (800345c <delay_init+0x20>)
 800343e:	6813      	ldr	r3, [r2, #0]
 8003440:	f023 0304 	bic.w	r3, r3, #4
 8003444:	6013      	str	r3, [r2, #0]
	fac_us=SYSCLK/8;
 8003446:	4b06      	ldr	r3, [pc, #24]	; (8003460 <delay_init+0x24>)
 8003448:	08c0      	lsrs	r0, r0, #3
 800344a:	7018      	strb	r0, [r3, #0]
	fac_ms=(uint16_t)fac_us*1000;
 800344c:	ebc0 1340 	rsb	r3, r0, r0, lsl #5
 8003450:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003454:	4b03      	ldr	r3, [pc, #12]	; (8003464 <delay_init+0x28>)
 8003456:	00c0      	lsls	r0, r0, #3
 8003458:	8018      	strh	r0, [r3, #0]
}
 800345a:	4770      	bx	lr
 800345c:	e000e010 	.word	0xe000e010
 8003460:	200000a2 	.word	0x200000a2
 8003464:	200000a0 	.word	0x200000a0

08003468 <delay_ms>:

void delay_ms(uint16_t nms)
{
	uint32_t temp;
	SysTick->LOAD=(uint32_t)nms*fac_ms;//時間載入(SysTick->LOAD為24bit)
 8003468:	4b09      	ldr	r3, [pc, #36]	; (8003490 <delay_ms+0x28>)
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	4358      	muls	r0, r3
 800346e:	4b09      	ldr	r3, [pc, #36]	; (8003494 <delay_ms+0x2c>)
	SysTick->VAL =0x00;           //清空計數器
 8003470:	2200      	movs	r2, #0
	SysTick->LOAD=(uint32_t)nms*fac_ms;//時間載入(SysTick->LOAD為24bit)
 8003472:	6058      	str	r0, [r3, #4]
	SysTick->VAL =0x00;           //清空計數器
 8003474:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;          //開始倒數
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	f042 0201 	orr.w	r2, r2, #1
 800347c:	601a      	str	r2, [r3, #0]
	do
	{
		temp=SysTick->CTRL;
 800347e:	681a      	ldr	r2, [r3, #0]
	}
	while(temp&0x01&&!(temp&(1<<16)));//等待時間到達
 8003480:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
 8003484:	2a01      	cmp	r2, #1
 8003486:	d0fa      	beq.n	800347e <delay_ms+0x16>
	SysTick->CTRL=0x00;       //關閉計數器
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00;       //清空計數器
 800348c:	609a      	str	r2, [r3, #8]
}
 800348e:	4770      	bx	lr
 8003490:	200000a0 	.word	0x200000a0
 8003494:	e000e010 	.word	0xe000e010

08003498 <delay_us>:
//延時nus
//nus為要延時的us數.
void delay_us(uint32_t nus)
{
	uint32_t temp;
	SysTick->LOAD=nus*fac_us; //時間載入
 8003498:	4b09      	ldr	r3, [pc, #36]	; (80034c0 <delay_us+0x28>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	4358      	muls	r0, r3
 800349e:	4b09      	ldr	r3, [pc, #36]	; (80034c4 <delay_us+0x2c>)
	SysTick->VAL=0x00;        //清空計數器
 80034a0:	2200      	movs	r2, #0
	SysTick->LOAD=nus*fac_us; //時間載入
 80034a2:	6058      	str	r0, [r3, #4]
	SysTick->VAL=0x00;        //清空計數器
 80034a4:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;      //開始倒數
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	f042 0201 	orr.w	r2, r2, #1
 80034ac:	601a      	str	r2, [r3, #0]
	do
	{
		temp=SysTick->CTRL;
 80034ae:	681a      	ldr	r2, [r3, #0]
	}
	while(temp&0x01&&!(temp&(1<<16)));//等待時間到達
 80034b0:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
 80034b4:	2a01      	cmp	r2, #1
 80034b6:	d0fa      	beq.n	80034ae <delay_us+0x16>
	SysTick->CTRL=0x00;       //關閉計數器
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00;       //清空計數器
 80034bc:	609a      	str	r2, [r3, #8]
}
 80034be:	4770      	bx	lr
 80034c0:	200000a2 	.word	0x200000a2
 80034c4:	e000e010 	.word	0xe000e010

080034c8 <writeCMD>:
*	The return value: None
*********************************************************************************************************
*/

void writeCMD(uint8_t command)
{
 80034c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t Txbuffer[1];
	Txbuffer[0] = command;
 80034ca:	ac02      	add	r4, sp, #8
	CS_0();
 80034cc:	4d0a      	ldr	r5, [pc, #40]	; (80034f8 <writeCMD+0x30>)
	Txbuffer[0] = command;
 80034ce:	f804 0d04 	strb.w	r0, [r4, #-4]!
	CS_0();
 80034d2:	2200      	movs	r2, #0
 80034d4:	4628      	mov	r0, r5
 80034d6:	2110      	movs	r1, #16
 80034d8:	f7fd ff5c 	bl	8001394 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,1,50);
 80034dc:	2332      	movs	r3, #50	; 0x32
 80034de:	4621      	mov	r1, r4
 80034e0:	2201      	movs	r2, #1
 80034e2:	4806      	ldr	r0, [pc, #24]	; (80034fc <writeCMD+0x34>)
 80034e4:	f7ff fa0b 	bl	80028fe <HAL_SPI_Transmit>
	CS_1();
 80034e8:	2201      	movs	r2, #1
 80034ea:	2110      	movs	r1, #16
 80034ec:	4628      	mov	r0, r5
 80034ee:	f7fd ff51 	bl	8001394 <HAL_GPIO_WritePin>
}
 80034f2:	b003      	add	sp, #12
 80034f4:	bd30      	pop	{r4, r5, pc}
 80034f6:	bf00      	nop
 80034f8:	40020000 	.word	0x40020000
 80034fc:	20004238 	.word	0x20004238

08003500 <writeByteToReg>:
*	parameter: register ID
*	The return value:
*********************************************************************************************************
*/
void writeByteToReg(uint8_t registerID, uint8_t value)
{
 8003500:	b513      	push	{r0, r1, r4, lr}
	uint8_t Txbuffer[3];
	Txbuffer[0] = CMD_WREG | registerID;
	Txbuffer[1] = 0x00;
	Txbuffer[2] = value;
	CS_0();
 8003502:	4c0d      	ldr	r4, [pc, #52]	; (8003538 <writeByteToReg+0x38>)
	Txbuffer[2] = value;
 8003504:	f88d 1006 	strb.w	r1, [sp, #6]
	Txbuffer[0] = CMD_WREG | registerID;
 8003508:	f040 0050 	orr.w	r0, r0, #80	; 0x50
 800350c:	f88d 0004 	strb.w	r0, [sp, #4]
	Txbuffer[1] = 0x00;
 8003510:	2200      	movs	r2, #0
	CS_0();
 8003512:	4620      	mov	r0, r4
 8003514:	2110      	movs	r1, #16
	Txbuffer[1] = 0x00;
 8003516:	f88d 2005 	strb.w	r2, [sp, #5]
	CS_0();
 800351a:	f7fd ff3b 	bl	8001394 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,3,100);
 800351e:	2364      	movs	r3, #100	; 0x64
 8003520:	a901      	add	r1, sp, #4
 8003522:	2203      	movs	r2, #3
 8003524:	4805      	ldr	r0, [pc, #20]	; (800353c <writeByteToReg+0x3c>)
 8003526:	f7ff f9ea 	bl	80028fe <HAL_SPI_Transmit>
	/*
	send8bit(CMD_WREG | registerID);		//1syt byte: address of the first register to write
	send8bit(0x00);							//2nd byte: number of byte to write = 1.
	send8bit(value);						//3rd byte: value to write to register
	*/
	CS_1();
 800352a:	2201      	movs	r2, #1
 800352c:	2110      	movs	r1, #16
 800352e:	4620      	mov	r0, r4
 8003530:	f7fd ff30 	bl	8001394 <HAL_GPIO_WritePin>

}
 8003534:	b002      	add	sp, #8
 8003536:	bd10      	pop	{r4, pc}
 8003538:	40020000 	.word	0x40020000
 800353c:	20004238 	.word	0x20004238

08003540 <setDataRate>:
	writeByteToReg(REG_DRATE,drate);
 8003540:	4601      	mov	r1, r0
 8003542:	2003      	movs	r0, #3
 8003544:	f7ff bfdc 	b.w	8003500 <writeByteToReg>

08003548 <setPGA>:
*	The return value: None
*********************************************************************************************************
*/
void setPGA(uint8_t pga)
{
	writeByteToReg(REG_ADCON,pga);
 8003548:	4601      	mov	r1, r0
 800354a:	2002      	movs	r0, #2
 800354c:	f7ff bfd8 	b.w	8003500 <writeByteToReg>

08003550 <waitDRDY>:
*	parameter: data
*	The return value: None
*********************************************************************************************************
*/
void waitDRDY(void)
{
 8003550:	b538      	push	{r3, r4, r5, lr}
 8003552:	4c05      	ldr	r4, [pc, #20]	; (8003568 <waitDRDY+0x18>)
	uint32_t i;
		for (i = 0; i < 40000000; i++){
			if (DRDY_IS_LOW()){
 8003554:	4d05      	ldr	r5, [pc, #20]	; (800356c <waitDRDY+0x1c>)
 8003556:	2108      	movs	r1, #8
 8003558:	4628      	mov	r0, r5
 800355a:	f7fd ff15 	bl	8001388 <HAL_GPIO_ReadPin>
 800355e:	b108      	cbz	r0, 8003564 <waitDRDY+0x14>
		for (i = 0; i < 40000000; i++){
 8003560:	3c01      	subs	r4, #1
 8003562:	d1f8      	bne.n	8003556 <waitDRDY+0x6>
				break;
			}
		}
}
 8003564:	bd38      	pop	{r3, r4, r5, pc}
 8003566:	bf00      	nop
 8003568:	02625a00 	.word	0x02625a00
 800356c:	40020000 	.word	0x40020000

08003570 <receive8bit>:
*	parameter: data
*	The return value: NULL
*********************************************************************************************************
*/
uint8_t receive8bit(void)
{
 8003570:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_SPI_Transmit(&hspi1, TXbuffer ,1,50);
	HAL_SPI_Receive(&hspi1, RXbuffer ,1,50);

	return RXbuffer[0];
	*/
	uint8_t send_data = 0xff;
 8003572:	23ff      	movs	r3, #255	; 0xff
	uint8_t read = 0;
 8003574:	aa04      	add	r2, sp, #16
	uint8_t send_data = 0xff;
 8003576:	f88d 300e 	strb.w	r3, [sp, #14]
	uint8_t read = 0;
 800357a:	2300      	movs	r3, #0
 800357c:	f802 3d01 	strb.w	r3, [r2, #-1]!
	HAL_SPI_TransmitReceive(&hspi1,&send_data,&read,1,50);
 8003580:	2332      	movs	r3, #50	; 0x32
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	f10d 010e 	add.w	r1, sp, #14
 8003588:	2301      	movs	r3, #1
 800358a:	4804      	ldr	r0, [pc, #16]	; (800359c <receive8bit+0x2c>)
 800358c:	f7ff fa5f 	bl	8002a4e <HAL_SPI_TransmitReceive>
	return read;



}
 8003590:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8003594:	b005      	add	sp, #20
 8003596:	f85d fb04 	ldr.w	pc, [sp], #4
 800359a:	bf00      	nop
 800359c:	20004238 	.word	0x20004238

080035a0 <readByteFromReg>:
*	parameter: register ID
*	The return value:
*********************************************************************************************************
*/
uint8_t readByteFromReg(uint8_t registerID)
{
 80035a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t TXbuffer[2];
	TXbuffer[0] = CMD_RREG | registerID;
	TXbuffer[1] = 0x00;
	CS_0();
 80035a2:	4c10      	ldr	r4, [pc, #64]	; (80035e4 <readByteFromReg+0x44>)
	TXbuffer[0] = CMD_RREG | registerID;
 80035a4:	f040 0010 	orr.w	r0, r0, #16
 80035a8:	f88d 0004 	strb.w	r0, [sp, #4]
	TXbuffer[1] = 0x00;
 80035ac:	2200      	movs	r2, #0
	CS_0();
 80035ae:	4620      	mov	r0, r4
 80035b0:	2110      	movs	r1, #16
	TXbuffer[1] = 0x00;
 80035b2:	f88d 2005 	strb.w	r2, [sp, #5]
	CS_0();
 80035b6:	f7fd feed 	bl	8001394 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TXbuffer ,2,50);
 80035ba:	2332      	movs	r3, #50	; 0x32
 80035bc:	a901      	add	r1, sp, #4
 80035be:	2202      	movs	r2, #2
 80035c0:	4809      	ldr	r0, [pc, #36]	; (80035e8 <readByteFromReg+0x48>)
 80035c2:	f7ff f99c 	bl	80028fe <HAL_SPI_Transmit>
	delay_us(10);
 80035c6:	200a      	movs	r0, #10
 80035c8:	f7ff ff66 	bl	8003498 <delay_us>
	uint8_t read = receive8bit();
 80035cc:	f7ff ffd0 	bl	8003570 <receive8bit>
	CS_1();
 80035d0:	2201      	movs	r2, #1
	uint8_t read = receive8bit();
 80035d2:	4605      	mov	r5, r0
	CS_1();
 80035d4:	2110      	movs	r1, #16
 80035d6:	4620      	mov	r0, r4
 80035d8:	f7fd fedc 	bl	8001394 <HAL_GPIO_WritePin>

	return read;
}
 80035dc:	4628      	mov	r0, r5
 80035de:	b003      	add	sp, #12
 80035e0:	bd30      	pop	{r4, r5, pc}
 80035e2:	bf00      	nop
 80035e4:	40020000 	.word	0x40020000
 80035e8:	20004238 	.word	0x20004238

080035ec <readChipID>:
{
 80035ec:	b507      	push	{r0, r1, r2, lr}
	waitDRDY();
 80035ee:	f7ff ffaf 	bl	8003550 <waitDRDY>
	volatile uint8_t id = readByteFromReg(REG_STATUS);
 80035f2:	2000      	movs	r0, #0
 80035f4:	f7ff ffd4 	bl	80035a0 <readByteFromReg>
 80035f8:	f88d 0007 	strb.w	r0, [sp, #7]
	return (id >> 4);
 80035fc:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8003600:	0900      	lsrs	r0, r0, #4
 8003602:	b003      	add	sp, #12
 8003604:	f85d fb04 	ldr.w	pc, [sp], #4

08003608 <setBuffer>:
*	parameter: bool val
*	The return value: val
*********************************************************************************************************
*/
void setBuffer(void)
{
 8003608:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t val = 1;
	uint8_t Txbuffer[2];
	Txbuffer[0] = CMD_WREG | REG_STATUS;
 800360a:	ac02      	add	r4, sp, #8
 800360c:	f44f 63ca 	mov.w	r3, #1616	; 0x650
	Txbuffer[1] = (0 <<3) | (1 << 2) | (val << 1);

	CS_0();
 8003610:	4d0a      	ldr	r5, [pc, #40]	; (800363c <setBuffer+0x34>)
	Txbuffer[0] = CMD_WREG | REG_STATUS;
 8003612:	f824 3d04 	strh.w	r3, [r4, #-4]!
	CS_0();
 8003616:	4628      	mov	r0, r5
 8003618:	2200      	movs	r2, #0
 800361a:	2110      	movs	r1, #16
 800361c:	f7fd feba 	bl	8001394 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,2,50);
 8003620:	2332      	movs	r3, #50	; 0x32
 8003622:	4621      	mov	r1, r4
 8003624:	2202      	movs	r2, #2
 8003626:	4806      	ldr	r0, [pc, #24]	; (8003640 <setBuffer+0x38>)
 8003628:	f7ff f969 	bl	80028fe <HAL_SPI_Transmit>
	//send8bit(CMD_WREG | REG_STATUS);
	//send8bit((0 <<3) | (1 << 2) | (val << 1));
	CS_1();
 800362c:	2201      	movs	r2, #1
 800362e:	2110      	movs	r1, #16
 8003630:	4628      	mov	r0, r5
 8003632:	f7fd feaf 	bl	8001394 <HAL_GPIO_WritePin>
}
 8003636:	b003      	add	sp, #12
 8003638:	bd30      	pop	{r4, r5, pc}
 800363a:	bf00      	nop
 800363c:	40020000 	.word	0x40020000
 8003640:	20004238 	.word	0x20004238

08003644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003644:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003646:	2414      	movs	r4, #20
{
 8003648:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800364a:	4622      	mov	r2, r4
 800364c:	2100      	movs	r1, #0
 800364e:	a809      	add	r0, sp, #36	; 0x24
 8003650:	f000 fc18 	bl	8003e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003654:	4622      	mov	r2, r4
 8003656:	2100      	movs	r1, #0
 8003658:	a803      	add	r0, sp, #12
 800365a:	f000 fc13 	bl	8003e84 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800365e:	2400      	movs	r4, #0
 8003660:	4b1b      	ldr	r3, [pc, #108]	; (80036d0 <SystemClock_Config+0x8c>)
 8003662:	9401      	str	r4, [sp, #4]
 8003664:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003666:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800366a:	641a      	str	r2, [r3, #64]	; 0x40
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003672:	9301      	str	r3, [sp, #4]
 8003674:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003676:	4b17      	ldr	r3, [pc, #92]	; (80036d4 <SystemClock_Config+0x90>)
 8003678:	9402      	str	r4, [sp, #8]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003688:	9302      	str	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800368a:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800368c:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800368e:	2310      	movs	r3, #16
 8003690:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003694:	2108      	movs	r1, #8
 8003696:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003698:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 168;
 800369a:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800369e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80036a0:	2304      	movs	r3, #4
 80036a2:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80036a4:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80036a6:	e9cd 540e 	strd	r5, r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80036aa:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036ac:	f7fe fe00 	bl	80022b0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036b0:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036b2:	e9cd 3503 	strd	r3, r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80036b6:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80036ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036be:	e9cd 0306 	strd	r0, r3, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80036c2:	2105      	movs	r1, #5
 80036c4:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036c6:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80036c8:	f7fe ffa2 	bl	8002610 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80036cc:	b015      	add	sp, #84	; 0x54
 80036ce:	bd30      	pop	{r4, r5, pc}
 80036d0:	40023800 	.word	0x40023800
 80036d4:	40007000 	.word	0x40007000

080036d8 <main>:
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08c      	sub	sp, #48	; 0x30
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80036dc:	2400      	movs	r4, #0
 80036de:	4d87      	ldr	r5, [pc, #540]	; (80038fc <main+0x224>)
  htim4.Instance = TIM4;
 80036e0:	4e87      	ldr	r6, [pc, #540]	; (8003900 <main+0x228>)
  HAL_Init();
 80036e2:	f7fd fb33 	bl	8000d4c <HAL_Init>
  SystemClock_Config();
 80036e6:	f7ff ffad 	bl	8003644 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036ea:	2214      	movs	r2, #20
 80036ec:	2100      	movs	r1, #0
 80036ee:	a807      	add	r0, sp, #28
 80036f0:	f000 fbc8 	bl	8003e84 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80036f4:	9403      	str	r4, [sp, #12]
 80036f6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80036f8:	4882      	ldr	r0, [pc, #520]	; (8003904 <main+0x22c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80036fa:	f043 0301 	orr.w	r3, r3, #1
 80036fe:	632b      	str	r3, [r5, #48]	; 0x30
 8003700:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	9303      	str	r3, [sp, #12]
 8003708:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800370a:	9404      	str	r4, [sp, #16]
 800370c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800370e:	f043 0302 	orr.w	r3, r3, #2
 8003712:	632b      	str	r3, [r5, #48]	; 0x30
 8003714:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800371c:	4622      	mov	r2, r4
 800371e:	2110      	movs	r1, #16
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003720:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003722:	f7fd fe37 	bl	8001394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003726:	4b78      	ldr	r3, [pc, #480]	; (8003908 <main+0x230>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003728:	4876      	ldr	r0, [pc, #472]	; (8003904 <main+0x22c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800372c:	2208      	movs	r2, #8
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800372e:	a907      	add	r1, sp, #28

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003730:	2701      	movs	r7, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003732:	e9cd 2307 	strd	r2, r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003736:	f04f 0810 	mov.w	r8, #16
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800373a:	f7fd fd45 	bl	80011c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800373e:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003740:	a907      	add	r1, sp, #28
 8003742:	4870      	ldr	r0, [pc, #448]	; (8003904 <main+0x22c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003744:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003746:	e9cd 8707 	strd	r8, r7, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800374a:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800374c:	f7fd fd3c 	bl	80011c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003750:	4622      	mov	r2, r4
 8003752:	4621      	mov	r1, r4
 8003754:	2009      	movs	r0, #9
 8003756:	f7fd fb37 	bl	8000dc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800375a:	2009      	movs	r0, #9
 800375c:	f7fd fb68 	bl	8000e30 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003760:	9401      	str	r4, [sp, #4]
 8003762:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003764:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003768:	632b      	str	r3, [r5, #48]	; 0x30
 800376a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800376c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003770:	9301      	str	r3, [sp, #4]
 8003772:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003774:	9402      	str	r4, [sp, #8]
 8003776:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003778:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800377c:	632b      	str	r3, [r5, #48]	; 0x30
 800377e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  hspi1.Instance = SPI1;
 8003780:	4d62      	ldr	r5, [pc, #392]	; (800390c <main+0x234>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003782:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003786:	4622      	mov	r2, r4
 8003788:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800378a:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800378c:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800378e:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003790:	f7fd fb1a 	bl	8000dc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003794:	200b      	movs	r0, #11
 8003796:	f7fd fb4b 	bl	8000e30 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800379a:	4622      	mov	r2, r4
 800379c:	4621      	mov	r1, r4
 800379e:	2011      	movs	r0, #17
 80037a0:	f7fd fb12 	bl	8000dc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80037a4:	2011      	movs	r0, #17
 80037a6:	f7fd fb43 	bl	8000e30 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80037aa:	4622      	mov	r2, r4
 80037ac:	4621      	mov	r1, r4
 80037ae:	2038      	movs	r0, #56	; 0x38
 80037b0:	f7fd fb0a 	bl	8000dc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80037b4:	2038      	movs	r0, #56	; 0x38
 80037b6:	f7fd fb3b 	bl	8000e30 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80037ba:	4622      	mov	r2, r4
 80037bc:	4621      	mov	r1, r4
 80037be:	203b      	movs	r0, #59	; 0x3b
 80037c0:	f7fd fb02 	bl	8000dc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80037c4:	203b      	movs	r0, #59	; 0x3b
 80037c6:	f7fd fb33 	bl	8000e30 <HAL_NVIC_EnableIRQ>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80037ca:	4951      	ldr	r1, [pc, #324]	; (8003910 <main+0x238>)
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037cc:	62ac      	str	r4, [r5, #40]	; 0x28
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80037ce:	f44f 7382 	mov.w	r3, #260	; 0x104
 80037d2:	e9c5 1300 	strd	r1, r3, [r5]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80037d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80037da:	2328      	movs	r3, #40	; 0x28
 80037dc:	e9c5 0306 	strd	r0, r3, [r5, #24]
  hspi1.Init.CRCPolynomial = 10;
 80037e0:	f04f 090a 	mov.w	r9, #10
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80037e4:	4628      	mov	r0, r5
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80037e6:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80037ea:	e9c5 4704 	strd	r4, r7, [r5, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80037ee:	e9c5 4408 	strd	r4, r4, [r5, #32]
  hspi1.Init.CRCPolynomial = 10;
 80037f2:	f8c5 902c 	str.w	r9, [r5, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80037f6:	f7ff f845 	bl	8002884 <HAL_SPI_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037fa:	4642      	mov	r2, r8
 80037fc:	4621      	mov	r1, r4
 80037fe:	a807      	add	r0, sp, #28
 8003800:	f000 fb40 	bl	8003e84 <memset>
  htim4.Instance = TIM4;
 8003804:	4b43      	ldr	r3, [pc, #268]	; (8003914 <main+0x23c>)
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003806:	6134      	str	r4, [r6, #16]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003808:	4630      	mov	r0, r6
  htim4.Init.Prescaler = 0;
 800380a:	e9c6 3400 	strd	r3, r4, [r6]
  htim4.Init.Period = 0;
 800380e:	e9c6 4402 	strd	r4, r4, [r6, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003812:	61b4      	str	r4, [r6, #24]
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003814:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003818:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800381c:	f7ff fb68 	bl	8002ef0 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003820:	a907      	add	r1, sp, #28
 8003822:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003824:	f8cd a01c 	str.w	sl, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003828:	f7ff fb86 	bl	8002f38 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800382c:	a905      	add	r1, sp, #20
 800382e:	4630      	mov	r0, r6
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003830:	e9cd 4405 	strd	r4, r4, [sp, #20]
  hi2c1.Instance = I2C1;
 8003834:	4e38      	ldr	r6, [pc, #224]	; (8003918 <main+0x240>)
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003836:	f7ff fc13 	bl	8003060 <HAL_TIMEx_MasterConfigSynchronization>
  hi2c1.Init.ClockSpeed = 100000;
 800383a:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8003930 <main+0x258>
 800383e:	4b37      	ldr	r3, [pc, #220]	; (800391c <main+0x244>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003840:	60b4      	str	r4, [r6, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8003842:	e9c6 c300 	strd	ip, r3, [r6]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003846:	f04f 0e04 	mov.w	lr, #4
 800384a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800384e:	e9c6 e303 	strd	lr, r3, [r6, #12]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8003852:	2240      	movs	r2, #64	; 0x40
 8003854:	2380      	movs	r3, #128	; 0x80
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003856:	4630      	mov	r0, r6
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8003858:	e9c6 2307 	strd	r2, r3, [r6, #28]
  hi2c1.Init.OwnAddress2 = 0;
 800385c:	e9c6 4405 	strd	r4, r4, [r6, #20]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003860:	f7fd fdaa 	bl	80013b8 <HAL_I2C_Init>
  HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 2);
 8003864:	2202      	movs	r2, #2
 8003866:	492e      	ldr	r1, [pc, #184]	; (8003920 <main+0x248>)
 8003868:	4630      	mov	r0, r6
  ADS1256.data_index = 0;
 800386a:	4e2e      	ldr	r6, [pc, #184]	; (8003924 <main+0x24c>)
  HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 2);
 800386c:	f7fd fe48 	bl	8001500 <HAL_I2C_Slave_Receive_IT>
  delay_init(168);
 8003870:	20a8      	movs	r0, #168	; 0xa8
  ADS1256.data_length = 4096;
 8003872:	e9c6 4a00 	strd	r4, sl, [r6]
  delay_init(168);
 8003876:	f7ff fde1 	bl	800343c <delay_init>
  writeCMD(CMD_RESET);
 800387a:	20fe      	movs	r0, #254	; 0xfe
 800387c:	f7ff fe24 	bl	80034c8 <writeCMD>
  delay_ms(10);
 8003880:	4648      	mov	r0, r9
 8003882:	f7ff fdf1 	bl	8003468 <delay_ms>
  setBuffer();
 8003886:	f7ff febf 	bl	8003608 <setBuffer>
  setPGA(PGA_GAIN1);
 800388a:	4620      	mov	r0, r4
 800388c:	f7ff fe5c 	bl	8003548 <setPGA>
  setDataRate(DRATE_15000);
 8003890:	20e0      	movs	r0, #224	; 0xe0
 8003892:	f7ff fe55 	bl	8003540 <setDataRate>
  id = readChipID();
 8003896:	f7ff fea9 	bl	80035ec <readChipID>
 800389a:	4b23      	ldr	r3, [pc, #140]	; (8003928 <main+0x250>)
 800389c:	7018      	strb	r0, [r3, #0]
   delay_ms(500);
 800389e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80038a2:	f7ff fde1 	bl	8003468 <delay_ms>
	writeByteToReg(REG_MUX, positiveCh <<4 | NegativeCh); //xxxx1000 - AINp = positiveCh, AINn = NegativeCh
 80038a6:	2123      	movs	r1, #35	; 0x23
 80038a8:	4638      	mov	r0, r7
 80038aa:	f7ff fe29 	bl	8003500 <writeByteToReg>
  delay_us(15);
 80038ae:	200f      	movs	r0, #15
 80038b0:	f7ff fdf2 	bl	8003498 <delay_us>
  writeCMD(CMD_SYNC);    // SYNC command
 80038b4:	20fc      	movs	r0, #252	; 0xfc
 80038b6:	f7ff fe07 	bl	80034c8 <writeCMD>
  delay_us(10);
 80038ba:	4648      	mov	r0, r9
 80038bc:	f7ff fdec 	bl	8003498 <delay_us>
  writeCMD(CMD_WAKEUP);  // WAKEUP command
 80038c0:	4620      	mov	r0, r4
 80038c2:	f7ff fe01 	bl	80034c8 <writeCMD>
  delay_us(15); // min delay: t11 = 4 * 1 / 7,68 Mhz = 0,52 micro sec
 80038c6:	200f      	movs	r0, #15
 80038c8:	f7ff fde6 	bl	8003498 <delay_us>
  waitDRDY();
 80038cc:	f7ff fe40 	bl	8003550 <waitDRDY>
  CS_0();
 80038d0:	4622      	mov	r2, r4
 80038d2:	4641      	mov	r1, r8
 80038d4:	480b      	ldr	r0, [pc, #44]	; (8003904 <main+0x22c>)
 80038d6:	f7fd fd5d 	bl	8001394 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, RDATACcmdbuffer ,1,50);
 80038da:	2332      	movs	r3, #50	; 0x32
 80038dc:	463a      	mov	r2, r7
 80038de:	4913      	ldr	r1, [pc, #76]	; (800392c <main+0x254>)
 80038e0:	4628      	mov	r0, r5
 80038e2:	f7ff f80c 	bl	80028fe <HAL_SPI_Transmit>
  delay_ms(25); // min delay: t6 = 50 * 1/7.68 MHz = 6.5 microseconds
 80038e6:	2019      	movs	r0, #25
 80038e8:	f7ff fdbe 	bl	8003468 <delay_ms>
  ADS1256.data_startFlag = 1;
 80038ec:	f244 0308 	movw	r3, #16392	; 0x4008
  delay_us(1);
 80038f0:	4638      	mov	r0, r7
  ADS1256.data_startFlag = 1;
 80038f2:	54f7      	strb	r7, [r6, r3]
  delay_us(1);
 80038f4:	f7ff fdd0 	bl	8003498 <delay_us>
 80038f8:	e7fe      	b.n	80038f8 <main+0x220>
 80038fa:	bf00      	nop
 80038fc:	40023800 	.word	0x40023800
 8003900:	200000b8 	.word	0x200000b8
 8003904:	40020000 	.word	0x40020000
 8003908:	10210000 	.word	0x10210000
 800390c:	20004238 	.word	0x20004238
 8003910:	40013000 	.word	0x40013000
 8003914:	40000800 	.word	0x40000800
 8003918:	20000158 	.word	0x20000158
 800391c:	000186a0 	.word	0x000186a0
 8003920:	200041d0 	.word	0x200041d0
 8003924:	200001ac 	.word	0x200001ac
 8003928:	200000a6 	.word	0x200000a6
 800392c:	20000008 	.word	0x20000008
 8003930:	40005400 	.word	0x40005400

08003934 <HAL_GPIO_EXTI_Callback>:
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{

	if(GPIO_Pin == GPIO_PIN_3 && id == 3 && ADS1256.data_startFlag == 1)
 8003934:	2808      	cmp	r0, #8
{
 8003936:	b538      	push	{r3, r4, r5, lr}
	if(GPIO_Pin == GPIO_PIN_3 && id == 3 && ADS1256.data_startFlag == 1)
 8003938:	f040 808d 	bne.w	8003a56 <HAL_GPIO_EXTI_Callback+0x122>
 800393c:	4b46      	ldr	r3, [pc, #280]	; (8003a58 <HAL_GPIO_EXTI_Callback+0x124>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	2b03      	cmp	r3, #3
 8003942:	f040 8088 	bne.w	8003a56 <HAL_GPIO_EXTI_Callback+0x122>
 8003946:	4c45      	ldr	r4, [pc, #276]	; (8003a5c <HAL_GPIO_EXTI_Callback+0x128>)
 8003948:	f244 0208 	movw	r2, #16392	; 0x4008
 800394c:	5ca2      	ldrb	r2, [r4, r2]
 800394e:	2a01      	cmp	r2, #1
 8003950:	f040 8081 	bne.w	8003a56 <HAL_GPIO_EXTI_Callback+0x122>
	{
		//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
		//delay_us(1);
		HAL_SPI_TransmitReceive_DMA(&hspi1,RDATACsend_data,Databuffer,3);
 8003954:	4d42      	ldr	r5, [pc, #264]	; (8003a60 <HAL_GPIO_EXTI_Callback+0x12c>)
 8003956:	4943      	ldr	r1, [pc, #268]	; (8003a64 <HAL_GPIO_EXTI_Callback+0x130>)
 8003958:	4843      	ldr	r0, [pc, #268]	; (8003a68 <HAL_GPIO_EXTI_Callback+0x134>)
 800395a:	462a      	mov	r2, r5
 800395c:	f7ff f968 	bl	8002c30 <HAL_SPI_TransmitReceive_DMA>

		// construct 24 bit value
		read  = ((int32_t)Databuffer[0] << 16) & 0x00FF0000;
		read |= ((int32_t)Databuffer[1] << 8);
 8003960:	786b      	ldrb	r3, [r5, #1]
		read  = ((int32_t)Databuffer[0] << 16) & 0x00FF0000;
 8003962:	782a      	ldrb	r2, [r5, #0]
			read |= 0xFF000000;

		}
		//tempdata = read;
		data = read;
		ADS1256.data_buffer[ADS1256.data_index] = data / 167000;
 8003964:	eddf 6a41 	vldr	s13, [pc, #260]	; 8003a6c <HAL_GPIO_EXTI_Callback+0x138>
		read |= ((int32_t)Databuffer[1] << 8);
 8003968:	021b      	lsls	r3, r3, #8
 800396a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		read |= Databuffer[2];
 800396e:	78aa      	ldrb	r2, [r5, #2]
 8003970:	4313      	orrs	r3, r2
		if (read & 0x800000){
 8003972:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8003976:	4a3e      	ldr	r2, [pc, #248]	; (8003a70 <HAL_GPIO_EXTI_Callback+0x13c>)
			read |= 0xFF000000;
 8003978:	bf18      	it	ne
 800397a:	f043 437f 	orrne.w	r3, r3, #4278190080	; 0xff000000
 800397e:	6013      	str	r3, [r2, #0]
		data = read;
 8003980:	edd2 7a00 	vldr	s15, [r2]
 8003984:	4b3b      	ldr	r3, [pc, #236]	; (8003a74 <HAL_GPIO_EXTI_Callback+0x140>)
 8003986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		ADS1256.data_buffer[ADS1256.data_index] = data / 167000;
 800398a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
		data = read;
 800398e:	edc3 7a00 	vstr	s15, [r3]
		ADS1256.data_buffer[ADS1256.data_index] = data / 167000;
 8003992:	6823      	ldr	r3, [r4, #0]
 8003994:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8003998:	ed82 7a02 	vstr	s14, [r2, #8]
		ADS1256.data_index++;
		if(ADS1256.data_index == ADS1256.data_length)
 800399c:	6862      	ldr	r2, [r4, #4]
		ADS1256.data_index++;
 800399e:	3301      	adds	r3, #1
		if(ADS1256.data_index == ADS1256.data_length)
 80039a0:	4293      	cmp	r3, r2
		ADS1256.data_index++;
 80039a2:	6023      	str	r3, [r4, #0]
		if(ADS1256.data_index == ADS1256.data_length)
 80039a4:	d157      	bne.n	8003a56 <HAL_GPIO_EXTI_Callback+0x122>
		{
			ADS1256.data_index = 0;
 80039a6:	2300      	movs	r3, #0
 80039a8:	6023      	str	r3, [r4, #0]
			arm_max_f32(&ADS1256.data_buffer,4096, &statistic_value.Statistic_max , &max_index);
 80039aa:	4c33      	ldr	r4, [pc, #204]	; (8003a78 <HAL_GPIO_EXTI_Callback+0x144>)
 80039ac:	4b33      	ldr	r3, [pc, #204]	; (8003a7c <HAL_GPIO_EXTI_Callback+0x148>)
 80039ae:	4834      	ldr	r0, [pc, #208]	; (8003a80 <HAL_GPIO_EXTI_Callback+0x14c>)
 80039b0:	4622      	mov	r2, r4
 80039b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039b6:	f7ff fb71 	bl	800309c <arm_max_f32>
			arm_min_f32(&ADS1256.data_buffer, 4096, &statistic_value.Statistic_min, &mintestIndex);
 80039ba:	4b32      	ldr	r3, [pc, #200]	; (8003a84 <HAL_GPIO_EXTI_Callback+0x150>)
 80039bc:	4830      	ldr	r0, [pc, #192]	; (8003a80 <HAL_GPIO_EXTI_Callback+0x14c>)
 80039be:	1d22      	adds	r2, r4, #4
 80039c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039c4:	f7ff fbf6 	bl	80031b4 <arm_min_f32>
			arm_var_f32(&ADS1256.data_buffer, 4096, &statistic_value.Statistic_var);
 80039c8:	f104 0208 	add.w	r2, r4, #8
 80039cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039d0:	482b      	ldr	r0, [pc, #172]	; (8003a80 <HAL_GPIO_EXTI_Callback+0x14c>)
 80039d2:	f7ff fce3 	bl	800339c <arm_var_f32>
			arm_rms_f32(&ADS1256.data_buffer, 4096, &statistic_value.Statistic_rms);
 80039d6:	f104 020c 	add.w	r2, r4, #12
 80039da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039de:	4828      	ldr	r0, [pc, #160]	; (8003a80 <HAL_GPIO_EXTI_Callback+0x14c>)
 80039e0:	f7ff fc42 	bl	8003268 <arm_rms_f32>
			arm_mean_f32(&ADS1256.data_buffer, 4096, &statistic_value.Statistic_mean);
 80039e4:	f104 0210 	add.w	r2, r4, #16
 80039e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039ec:	4824      	ldr	r0, [pc, #144]	; (8003a80 <HAL_GPIO_EXTI_Callback+0x14c>)
 80039ee:	f7ff fbaf 	bl	8003150 <arm_mean_f32>
			arm_std_f32(&ADS1256.data_buffer, 4096, &statistic_value.Statistic_std);
 80039f2:	f104 0214 	add.w	r2, r4, #20
 80039f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039fa:	4821      	ldr	r0, [pc, #132]	; (8003a80 <HAL_GPIO_EXTI_Callback+0x14c>)
 80039fc:	f7ff fc74 	bl	80032e8 <arm_std_f32>
			pData[0] = statistic_value.Statistic_max;
 8003a00:	edd4 7a00 	vldr	s15, [r4]
 8003a04:	4b20      	ldr	r3, [pc, #128]	; (8003a88 <HAL_GPIO_EXTI_Callback+0x154>)
 8003a06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a0a:	ee17 2a90 	vmov	r2, s15
			pData[1] = statistic_value.Statistic_min;
 8003a0e:	edd4 7a01 	vldr	s15, [r4, #4]
			pData[0] = statistic_value.Statistic_max;
 8003a12:	701a      	strb	r2, [r3, #0]
			pData[1] = statistic_value.Statistic_min;
 8003a14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a18:	ee17 2a90 	vmov	r2, s15
			pData[2] = statistic_value.Statistic_var;
 8003a1c:	edd4 7a02 	vldr	s15, [r4, #8]
			pData[1] = statistic_value.Statistic_min;
 8003a20:	705a      	strb	r2, [r3, #1]
			pData[2] = statistic_value.Statistic_var;
 8003a22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a26:	ee17 2a90 	vmov	r2, s15
			pData[3] = statistic_value.Statistic_rms;
 8003a2a:	edd4 7a03 	vldr	s15, [r4, #12]
			pData[2] = statistic_value.Statistic_var;
 8003a2e:	709a      	strb	r2, [r3, #2]
			pData[3] = statistic_value.Statistic_rms;
 8003a30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a34:	ee17 2a90 	vmov	r2, s15
			pData[4] = statistic_value.Statistic_mean;
 8003a38:	edd4 7a04 	vldr	s15, [r4, #16]
			pData[3] = statistic_value.Statistic_rms;
 8003a3c:	70da      	strb	r2, [r3, #3]
			pData[4] = statistic_value.Statistic_mean;
 8003a3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a42:	ee17 2a90 	vmov	r2, s15
			pData[5] = statistic_value.Statistic_std;
 8003a46:	edd4 7a05 	vldr	s15, [r4, #20]
			pData[4] = statistic_value.Statistic_mean;
 8003a4a:	711a      	strb	r2, [r3, #4]
			pData[5] = statistic_value.Statistic_std;
 8003a4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a50:	ee17 2a90 	vmov	r2, s15
 8003a54:	715a      	strb	r2, [r3, #5]
		}

		//delay_us(8);
	}
}
 8003a56:	bd38      	pop	{r3, r4, r5, pc}
 8003a58:	200000a6 	.word	0x200000a6
 8003a5c:	200001ac 	.word	0x200001ac
 8003a60:	200000a3 	.word	0x200000a3
 8003a64:	20000009 	.word	0x20000009
 8003a68:	20004238 	.word	0x20004238
 8003a6c:	48231600 	.word	0x48231600
 8003a70:	200000b0 	.word	0x200000b0
 8003a74:	200041d4 	.word	0x200041d4
 8003a78:	200041b8 	.word	0x200041b8
 8003a7c:	200000a8 	.word	0x200000a8
 8003a80:	200001b4 	.word	0x200001b4
 8003a84:	200000ac 	.word	0x200000ac
 8003a88:	2000000c 	.word	0x2000000c

08003a8c <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a8c:	b538      	push	{r3, r4, r5, lr}

	pData[9] = 123;
 8003a8e:	4c06      	ldr	r4, [pc, #24]	; (8003aa8 <HAL_I2C_SlaveRxCpltCallback+0x1c>)
	while(HAL_I2C_Slave_Transmit_DMA(&hi2c1, &pData, 10) ==HAL_OK)
 8003a90:	4d06      	ldr	r5, [pc, #24]	; (8003aac <HAL_I2C_SlaveRxCpltCallback+0x20>)
	pData[9] = 123;
 8003a92:	237b      	movs	r3, #123	; 0x7b
 8003a94:	7263      	strb	r3, [r4, #9]
	while(HAL_I2C_Slave_Transmit_DMA(&hi2c1, &pData, 10) ==HAL_OK)
 8003a96:	220a      	movs	r2, #10
 8003a98:	4621      	mov	r1, r4
 8003a9a:	4628      	mov	r0, r5
 8003a9c:	f7fd fd6c 	bl	8001578 <HAL_I2C_Slave_Transmit_DMA>
 8003aa0:	2800      	cmp	r0, #0
 8003aa2:	d0f8      	beq.n	8003a96 <HAL_I2C_SlaveRxCpltCallback+0xa>
	{

	}


}
 8003aa4:	bd38      	pop	{r3, r4, r5, pc}
 8003aa6:	bf00      	nop
 8003aa8:	2000000c 	.word	0x2000000c
 8003aac:	20000158 	.word	0x20000158

08003ab0 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003ab0:	4770      	bx	lr
	...

08003ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ab4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ab6:	4b0c      	ldr	r3, [pc, #48]	; (8003ae8 <HAL_MspInit+0x34>)
 8003ab8:	2100      	movs	r1, #0
 8003aba:	9100      	str	r1, [sp, #0]
 8003abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003abe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ac2:	645a      	str	r2, [r3, #68]	; 0x44
 8003ac4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ac6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003aca:	9200      	str	r2, [sp, #0]
 8003acc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ace:	9101      	str	r1, [sp, #4]
 8003ad0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ad2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ad6:	641a      	str	r2, [r3, #64]	; 0x40
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ade:	9301      	str	r3, [sp, #4]
 8003ae0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ae2:	b002      	add	sp, #8
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	40023800 	.word	0x40023800

08003aec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003aec:	b570      	push	{r4, r5, r6, lr}
 8003aee:	4606      	mov	r6, r0
 8003af0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af2:	2214      	movs	r2, #20
 8003af4:	2100      	movs	r1, #0
 8003af6:	a803      	add	r0, sp, #12
 8003af8:	f000 f9c4 	bl	8003e84 <memset>
  if(hi2c->Instance==I2C1)
 8003afc:	6832      	ldr	r2, [r6, #0]
 8003afe:	4b36      	ldr	r3, [pc, #216]	; (8003bd8 <HAL_I2C_MspInit+0xec>)
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d167      	bne.n	8003bd4 <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b04:	4c35      	ldr	r4, [pc, #212]	; (8003bdc <HAL_I2C_MspInit+0xf0>)
 8003b06:	2500      	movs	r5, #0
 8003b08:	9501      	str	r5, [sp, #4]
 8003b0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b0c:	f043 0302 	orr.w	r3, r3, #2
 8003b10:	6323      	str	r3, [r4, #48]	; 0x30
 8003b12:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	9301      	str	r3, [sp, #4]
 8003b1a:	9b01      	ldr	r3, [sp, #4]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b1c:	20c0      	movs	r0, #192	; 0xc0
 8003b1e:	2312      	movs	r3, #18
 8003b20:	e9cd 0303 	strd	r0, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b24:	f04f 0c01 	mov.w	ip, #1
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e9cd c305 	strd	ip, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b2e:	482c      	ldr	r0, [pc, #176]	; (8003be0 <HAL_I2C_MspInit+0xf4>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b30:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b32:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b34:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b36:	f7fd fb47 	bl	80011c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b3a:	9502      	str	r5, [sp, #8]
 8003b3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003b3e:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 8003bf0 <HAL_I2C_MspInit+0x104>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b46:	6423      	str	r3, [r4, #64]	; 0x40
 8003b48:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8003b4a:	4c26      	ldr	r4, [pc, #152]	; (8003be4 <HAL_I2C_MspInit+0xf8>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b50:	9302      	str	r3, [sp, #8]
 8003b52:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003b54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b58:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003b5c:	4620      	mov	r0, r4
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b62:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b66:	e9c4 3504 	strd	r3, r5, [r4, #16]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003b6a:	e9c4 5506 	strd	r5, r5, [r4, #24]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b6e:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003b72:	f7fd f997 	bl	8000ea4 <HAL_DMA_Init>
 8003b76:	b108      	cbz	r0, 8003b7c <HAL_I2C_MspInit+0x90>
    {
      Error_Handler();
 8003b78:	f7ff ff9a 	bl	8003ab0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003b7c:	63b4      	str	r4, [r6, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8003b7e:	4a1a      	ldr	r2, [pc, #104]	; (8003be8 <HAL_I2C_MspInit+0xfc>)
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003b80:	63a6      	str	r6, [r4, #56]	; 0x38
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8003b82:	4c1a      	ldr	r4, [pc, #104]	; (8003bec <HAL_I2C_MspInit+0x100>)
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8003b84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b88:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b8c:	2140      	movs	r1, #64	; 0x40
 8003b8e:	2300      	movs	r3, #0
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b90:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003b94:	4620      	mov	r0, r4
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b96:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b9a:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003b9e:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ba2:	e9c4 3308 	strd	r3, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003ba6:	f7fd f97d 	bl	8000ea4 <HAL_DMA_Init>
 8003baa:	b108      	cbz	r0, 8003bb0 <HAL_I2C_MspInit+0xc4>
    {
      Error_Handler();
 8003bac:	f7ff ff80 	bl	8003ab0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	4611      	mov	r1, r2
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8003bb4:	6374      	str	r4, [r6, #52]	; 0x34
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003bb6:	201f      	movs	r0, #31
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8003bb8:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003bba:	f7fd f905 	bl	8000dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003bbe:	201f      	movs	r0, #31
 8003bc0:	f7fd f936 	bl	8000e30 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2020      	movs	r0, #32
 8003bc8:	4611      	mov	r1, r2
 8003bca:	f7fd f8fd 	bl	8000dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003bce:	2020      	movs	r0, #32
 8003bd0:	f7fd f92e 	bl	8000e30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003bd4:	b008      	add	sp, #32
 8003bd6:	bd70      	pop	{r4, r5, r6, pc}
 8003bd8:	40005400 	.word	0x40005400
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	40020400 	.word	0x40020400
 8003be4:	200041d8 	.word	0x200041d8
 8003be8:	400260a0 	.word	0x400260a0
 8003bec:	200000f8 	.word	0x200000f8
 8003bf0:	40026010 	.word	0x40026010

08003bf4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003bf4:	b570      	push	{r4, r5, r6, lr}
 8003bf6:	4606      	mov	r6, r0
 8003bf8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bfa:	2214      	movs	r2, #20
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	a803      	add	r0, sp, #12
 8003c00:	f000 f940 	bl	8003e84 <memset>
  if(hspi->Instance==SPI1)
 8003c04:	6832      	ldr	r2, [r6, #0]
 8003c06:	4b2d      	ldr	r3, [pc, #180]	; (8003cbc <HAL_SPI_MspInit+0xc8>)
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d155      	bne.n	8003cb8 <HAL_SPI_MspInit+0xc4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003c0c:	2500      	movs	r5, #0
 8003c0e:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8003c12:	9501      	str	r5, [sp, #4]
 8003c14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8003c16:	4c2a      	ldr	r4, [pc, #168]	; (8003cc0 <HAL_SPI_MspInit+0xcc>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003c18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c1c:	645a      	str	r2, [r3, #68]	; 0x44
 8003c1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c20:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003c24:	9201      	str	r2, [sp, #4]
 8003c26:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c28:	9502      	str	r5, [sp, #8]
 8003c2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c2c:	f042 0201 	orr.w	r2, r2, #1
 8003c30:	631a      	str	r2, [r3, #48]	; 0x30
 8003c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	9302      	str	r3, [sp, #8]
 8003c3a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c3c:	21e0      	movs	r1, #224	; 0xe0
 8003c3e:	2302      	movs	r3, #2
 8003c40:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c44:	2003      	movs	r0, #3
 8003c46:	2305      	movs	r3, #5
 8003c48:	e9cd 0306 	strd	r0, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c4c:	a903      	add	r1, sp, #12
 8003c4e:	481d      	ldr	r0, [pc, #116]	; (8003cc4 <HAL_SPI_MspInit+0xd0>)
 8003c50:	f7fd faba 	bl	80011c8 <HAL_GPIO_Init>
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8003c54:	f8df c078 	ldr.w	ip, [pc, #120]	; 8003cd0 <HAL_SPI_MspInit+0xdc>
 8003c58:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8003c5c:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c60:	2340      	movs	r3, #64	; 0x40
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c62:	e9c4 3502 	strd	r3, r5, [r4, #8]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003c66:	4620      	mov	r0, r4
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c68:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c6c:	e9c4 3504 	strd	r3, r5, [r4, #16]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003c70:	e9c4 5506 	strd	r5, r5, [r4, #24]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c74:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003c78:	f7fd f914 	bl	8000ea4 <HAL_DMA_Init>
 8003c7c:	b108      	cbz	r0, 8003c82 <HAL_SPI_MspInit+0x8e>
    {
      Error_Handler();
 8003c7e:	f7ff ff17 	bl	8003ab0 <Error_Handler>

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8003c82:	4a11      	ldr	r2, [pc, #68]	; (8003cc8 <HAL_SPI_MspInit+0xd4>)
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003c84:	64b4      	str	r4, [r6, #72]	; 0x48
 8003c86:	63a6      	str	r6, [r4, #56]	; 0x38
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8003c88:	4c10      	ldr	r4, [pc, #64]	; (8003ccc <HAL_SPI_MspInit+0xd8>)
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8003c8a:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8003c8e:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003c92:	4620      	mov	r0, r4
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c94:	2300      	movs	r3, #0
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c96:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c9a:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c9e:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003ca2:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ca6:	e9c4 3308 	strd	r3, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003caa:	f7fd f8fb 	bl	8000ea4 <HAL_DMA_Init>
 8003cae:	b108      	cbz	r0, 8003cb4 <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 8003cb0:	f7ff fefe 	bl	8003ab0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8003cb4:	64f4      	str	r4, [r6, #76]	; 0x4c
 8003cb6:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003cb8:	b008      	add	sp, #32
 8003cba:	bd70      	pop	{r4, r5, r6, pc}
 8003cbc:	40013000 	.word	0x40013000
 8003cc0:	200042f0 	.word	0x200042f0
 8003cc4:	40020000 	.word	0x40020000
 8003cc8:	40026410 	.word	0x40026410
 8003ccc:	20004290 	.word	0x20004290
 8003cd0:	40026458 	.word	0x40026458

08003cd4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM4)
 8003cd4:	6802      	ldr	r2, [r0, #0]
 8003cd6:	4b09      	ldr	r3, [pc, #36]	; (8003cfc <HAL_TIM_Base_MspInit+0x28>)
 8003cd8:	429a      	cmp	r2, r3
{
 8003cda:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM4)
 8003cdc:	d10b      	bne.n	8003cf6 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003cde:	2300      	movs	r3, #0
 8003ce0:	9301      	str	r3, [sp, #4]
 8003ce2:	4b07      	ldr	r3, [pc, #28]	; (8003d00 <HAL_TIM_Base_MspInit+0x2c>)
 8003ce4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ce6:	f042 0204 	orr.w	r2, r2, #4
 8003cea:	641a      	str	r2, [r3, #64]	; 0x40
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	f003 0304 	and.w	r3, r3, #4
 8003cf2:	9301      	str	r3, [sp, #4]
 8003cf4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003cf6:	b002      	add	sp, #8
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	40000800 	.word	0x40000800
 8003d00:	40023800 	.word	0x40023800

08003d04 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003d04:	4770      	bx	lr

08003d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d06:	e7fe      	b.n	8003d06 <HardFault_Handler>

08003d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d08:	e7fe      	b.n	8003d08 <MemManage_Handler>

08003d0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d0a:	e7fe      	b.n	8003d0a <BusFault_Handler>

08003d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d0c:	e7fe      	b.n	8003d0c <UsageFault_Handler>

08003d0e <SVC_Handler>:
 8003d0e:	4770      	bx	lr

08003d10 <DebugMon_Handler>:
 8003d10:	4770      	bx	lr

08003d12 <PendSV_Handler>:
 8003d12:	4770      	bx	lr

08003d14 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d14:	f7fd b834 	b.w	8000d80 <HAL_IncTick>

08003d18 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003d18:	2008      	movs	r0, #8
 8003d1a:	f7fd bb41 	b.w	80013a0 <HAL_GPIO_EXTI_IRQHandler>
	...

08003d20 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003d20:	4801      	ldr	r0, [pc, #4]	; (8003d28 <DMA1_Stream0_IRQHandler+0x8>)
 8003d22:	f7fd b98d 	b.w	8001040 <HAL_DMA_IRQHandler>
 8003d26:	bf00      	nop
 8003d28:	200041d8 	.word	0x200041d8

08003d2c <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003d2c:	4801      	ldr	r0, [pc, #4]	; (8003d34 <DMA1_Stream6_IRQHandler+0x8>)
 8003d2e:	f7fd b987 	b.w	8001040 <HAL_DMA_IRQHandler>
 8003d32:	bf00      	nop
 8003d34:	200000f8 	.word	0x200000f8

08003d38 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003d38:	b510      	push	{r4, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003d3a:	4c05      	ldr	r4, [pc, #20]	; (8003d50 <I2C1_EV_IRQHandler+0x18>)
 8003d3c:	4620      	mov	r0, r4
 8003d3e:	f7fd fe01 	bl	8001944 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */
  HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 2);
 8003d42:	4620      	mov	r0, r4
 8003d44:	2202      	movs	r2, #2
 8003d46:	4903      	ldr	r1, [pc, #12]	; (8003d54 <I2C1_EV_IRQHandler+0x1c>)
  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 2);
 8003d4c:	f7fd bbd8 	b.w	8001500 <HAL_I2C_Slave_Receive_IT>
 8003d50:	20000158 	.word	0x20000158
 8003d54:	200041d0 	.word	0x200041d0

08003d58 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003d58:	b510      	push	{r4, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003d5a:	4c05      	ldr	r4, [pc, #20]	; (8003d70 <I2C1_ER_IRQHandler+0x18>)
 8003d5c:	4620      	mov	r0, r4
 8003d5e:	f7fe fa11 	bl	8002184 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */
  HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 2);
 8003d62:	4620      	mov	r0, r4
 8003d64:	2202      	movs	r2, #2
 8003d66:	4903      	ldr	r1, [pc, #12]	; (8003d74 <I2C1_ER_IRQHandler+0x1c>)
  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 2);
 8003d6c:	f7fd bbc8 	b.w	8001500 <HAL_I2C_Slave_Receive_IT>
 8003d70:	20000158 	.word	0x20000158
 8003d74:	200041d0 	.word	0x200041d0

08003d78 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003d78:	4801      	ldr	r0, [pc, #4]	; (8003d80 <DMA2_Stream0_IRQHandler+0x8>)
 8003d7a:	f7fd b961 	b.w	8001040 <HAL_DMA_IRQHandler>
 8003d7e:	bf00      	nop
 8003d80:	20004290 	.word	0x20004290

08003d84 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003d84:	4801      	ldr	r0, [pc, #4]	; (8003d8c <DMA2_Stream3_IRQHandler+0x8>)
 8003d86:	f7fd b95b 	b.w	8001040 <HAL_DMA_IRQHandler>
 8003d8a:	bf00      	nop
 8003d8c:	200042f0 	.word	0x200042f0

08003d90 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d90:	490f      	ldr	r1, [pc, #60]	; (8003dd0 <SystemInit+0x40>)
 8003d92:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003d96:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003d9e:	4b0d      	ldr	r3, [pc, #52]	; (8003dd4 <SystemInit+0x44>)
 8003da0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003da2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003da4:	f042 0201 	orr.w	r2, r2, #1
 8003da8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003daa:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003db2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003db6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003db8:	4a07      	ldr	r2, [pc, #28]	; (8003dd8 <SystemInit+0x48>)
 8003dba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003dc2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003dc4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003dc6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003dca:	608b      	str	r3, [r1, #8]
#endif
}
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	e000ed00 	.word	0xe000ed00
 8003dd4:	40023800 	.word	0x40023800
 8003dd8:	24003010 	.word	0x24003010

08003ddc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003ddc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e14 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003de0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003de2:	e003      	b.n	8003dec <LoopCopyDataInit>

08003de4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003de4:	4b0c      	ldr	r3, [pc, #48]	; (8003e18 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003de6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003de8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003dea:	3104      	adds	r1, #4

08003dec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003dec:	480b      	ldr	r0, [pc, #44]	; (8003e1c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003dee:	4b0c      	ldr	r3, [pc, #48]	; (8003e20 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003df0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003df2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003df4:	d3f6      	bcc.n	8003de4 <CopyDataInit>
  ldr  r2, =_sbss
 8003df6:	4a0b      	ldr	r2, [pc, #44]	; (8003e24 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003df8:	e002      	b.n	8003e00 <LoopFillZerobss>

08003dfa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003dfa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003dfc:	f842 3b04 	str.w	r3, [r2], #4

08003e00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003e00:	4b09      	ldr	r3, [pc, #36]	; (8003e28 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003e02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003e04:	d3f9      	bcc.n	8003dfa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003e06:	f7ff ffc3 	bl	8003d90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e0a:	f000 f817 	bl	8003e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e0e:	f7ff fc63 	bl	80036d8 <main>
  bx  lr    
 8003e12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003e14:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003e18:	08003f90 	.word	0x08003f90
  ldr  r0, =_sdata
 8003e1c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003e20:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8003e24:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8003e28:	20004350 	.word	0x20004350

08003e2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e2c:	e7fe      	b.n	8003e2c <ADC_IRQHandler>
	...

08003e30 <__errno>:
 8003e30:	4b01      	ldr	r3, [pc, #4]	; (8003e38 <__errno+0x8>)
 8003e32:	6818      	ldr	r0, [r3, #0]
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	2000001c 	.word	0x2000001c

08003e3c <__libc_init_array>:
 8003e3c:	b570      	push	{r4, r5, r6, lr}
 8003e3e:	4e0d      	ldr	r6, [pc, #52]	; (8003e74 <__libc_init_array+0x38>)
 8003e40:	4c0d      	ldr	r4, [pc, #52]	; (8003e78 <__libc_init_array+0x3c>)
 8003e42:	1ba4      	subs	r4, r4, r6
 8003e44:	10a4      	asrs	r4, r4, #2
 8003e46:	2500      	movs	r5, #0
 8003e48:	42a5      	cmp	r5, r4
 8003e4a:	d109      	bne.n	8003e60 <__libc_init_array+0x24>
 8003e4c:	4e0b      	ldr	r6, [pc, #44]	; (8003e7c <__libc_init_array+0x40>)
 8003e4e:	4c0c      	ldr	r4, [pc, #48]	; (8003e80 <__libc_init_array+0x44>)
 8003e50:	f000 f876 	bl	8003f40 <_init>
 8003e54:	1ba4      	subs	r4, r4, r6
 8003e56:	10a4      	asrs	r4, r4, #2
 8003e58:	2500      	movs	r5, #0
 8003e5a:	42a5      	cmp	r5, r4
 8003e5c:	d105      	bne.n	8003e6a <__libc_init_array+0x2e>
 8003e5e:	bd70      	pop	{r4, r5, r6, pc}
 8003e60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e64:	4798      	blx	r3
 8003e66:	3501      	adds	r5, #1
 8003e68:	e7ee      	b.n	8003e48 <__libc_init_array+0xc>
 8003e6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e6e:	4798      	blx	r3
 8003e70:	3501      	adds	r5, #1
 8003e72:	e7f2      	b.n	8003e5a <__libc_init_array+0x1e>
 8003e74:	08003f88 	.word	0x08003f88
 8003e78:	08003f88 	.word	0x08003f88
 8003e7c:	08003f88 	.word	0x08003f88
 8003e80:	08003f8c 	.word	0x08003f8c

08003e84 <memset>:
 8003e84:	4402      	add	r2, r0
 8003e86:	4603      	mov	r3, r0
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d100      	bne.n	8003e8e <memset+0xa>
 8003e8c:	4770      	bx	lr
 8003e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e92:	e7f9      	b.n	8003e88 <memset+0x4>

08003e94 <sqrtf>:
 8003e94:	b510      	push	{r4, lr}
 8003e96:	ed2d 8b02 	vpush	{d8}
 8003e9a:	b08a      	sub	sp, #40	; 0x28
 8003e9c:	eeb0 8a40 	vmov.f32	s16, s0
 8003ea0:	f000 f848 	bl	8003f34 <__ieee754_sqrtf>
 8003ea4:	4b21      	ldr	r3, [pc, #132]	; (8003f2c <sqrtf+0x98>)
 8003ea6:	f993 4000 	ldrsb.w	r4, [r3]
 8003eaa:	1c63      	adds	r3, r4, #1
 8003eac:	d02c      	beq.n	8003f08 <sqrtf+0x74>
 8003eae:	eeb4 8a48 	vcmp.f32	s16, s16
 8003eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb6:	d627      	bvs.n	8003f08 <sqrtf+0x74>
 8003eb8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8003ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ec0:	d522      	bpl.n	8003f08 <sqrtf+0x74>
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	4b1a      	ldr	r3, [pc, #104]	; (8003f30 <sqrtf+0x9c>)
 8003ec8:	9301      	str	r3, [sp, #4]
 8003eca:	ee18 0a10 	vmov	r0, s16
 8003ece:	2300      	movs	r3, #0
 8003ed0:	9308      	str	r3, [sp, #32]
 8003ed2:	f7fc fadd 	bl	8000490 <__aeabi_f2d>
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003edc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	b9ac      	cbnz	r4, 8003f10 <sqrtf+0x7c>
 8003ee4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003ee8:	4668      	mov	r0, sp
 8003eea:	f000 f826 	bl	8003f3a <matherr>
 8003eee:	b1b8      	cbz	r0, 8003f20 <sqrtf+0x8c>
 8003ef0:	9b08      	ldr	r3, [sp, #32]
 8003ef2:	b11b      	cbz	r3, 8003efc <sqrtf+0x68>
 8003ef4:	f7ff ff9c 	bl	8003e30 <__errno>
 8003ef8:	9b08      	ldr	r3, [sp, #32]
 8003efa:	6003      	str	r3, [r0, #0]
 8003efc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f00:	f7fc fd30 	bl	8000964 <__aeabi_d2f>
 8003f04:	ee00 0a10 	vmov	s0, r0
 8003f08:	b00a      	add	sp, #40	; 0x28
 8003f0a:	ecbd 8b02 	vpop	{d8}
 8003f0e:	bd10      	pop	{r4, pc}
 8003f10:	4610      	mov	r0, r2
 8003f12:	4619      	mov	r1, r3
 8003f14:	f7fc fc3e 	bl	8000794 <__aeabi_ddiv>
 8003f18:	2c02      	cmp	r4, #2
 8003f1a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003f1e:	d1e3      	bne.n	8003ee8 <sqrtf+0x54>
 8003f20:	f7ff ff86 	bl	8003e30 <__errno>
 8003f24:	2321      	movs	r3, #33	; 0x21
 8003f26:	6003      	str	r3, [r0, #0]
 8003f28:	e7e2      	b.n	8003ef0 <sqrtf+0x5c>
 8003f2a:	bf00      	nop
 8003f2c:	20000080 	.word	0x20000080
 8003f30:	08003f78 	.word	0x08003f78

08003f34 <__ieee754_sqrtf>:
 8003f34:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8003f38:	4770      	bx	lr

08003f3a <matherr>:
 8003f3a:	2000      	movs	r0, #0
 8003f3c:	4770      	bx	lr
	...

08003f40 <_init>:
 8003f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f42:	bf00      	nop
 8003f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f46:	bc08      	pop	{r3}
 8003f48:	469e      	mov	lr, r3
 8003f4a:	4770      	bx	lr

08003f4c <_fini>:
 8003f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f4e:	bf00      	nop
 8003f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f52:	bc08      	pop	{r3}
 8003f54:	469e      	mov	lr, r3
 8003f56:	4770      	bx	lr
